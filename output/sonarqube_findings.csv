Key,Project Key,Branch,Path,Line Number,Message,Status,Author,Creation Date,Update Date,Rule Reference,Comments,Type,Severity,Effort,Tags,Security Category,Vulnerability Probability,Rule Key,Rule Repo,Rule Name,Rule Created At,Rule HTML Description,Rule Markdown Description,Rule Severity,Rule Status,Rule Is Template,Rule Tags,Rule System Tags,Rule Language,Rule Language Name,Rule Params,Rule Type,Rule Remote Function Overloaded,Rule Scope,Rule Is External,Rule Description Sections,Rule Education Principles
AYbAIe7v_dtLGUU1PIS7,csharp-dotnetcore-sonar,main,Program.cs,2,Remove this commented out code.,OPEN,joshua.quek.fullstack@gmail.com,2023-03-08T07:31:28+0000,2023-06-29T12:22:50+0000,csharpsquid:S125,[object Object],CODE_SMELL,MAJOR,5,unused,,,csharpsquid:S125,csharpsquid,Sections of code should not be commented out,2023-02-21T15:21:15+0000,<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>,<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>,MAJOR,READY,false,,unused,cs,C#,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>""}]",[]
AYbAIe7v_dtLGUU1PITB,csharp-dotnetcore-sonar,main,Program.cs,33,Converting null literal or possible null value to non-nullable type.,OPEN,joshua.quek.fullstack@gmail.com,2023-03-08T07:31:28+0000,2023-06-29T12:23:56+0000,external_roslyn:CS8600,[object Object],CODE_SMELL,MAJOR,0,,,,external_roslyn:CS8600,external_roslyn,Converting null literal or possible null value to non-nullable type.,2023-03-08T07:31:34+0000,,,MAJOR,READY,false,,,,,[],CODE_SMELL,false,ALL,true,[],[]
AYbAIe7v_dtLGUU1PITA,csharp-dotnetcore-sonar,main,Program.cs,26,Dereference of a possibly null reference.,OPEN,joshua.quek.fullstack@gmail.com,2023-03-08T07:31:28+0000,2023-06-29T12:23:38+0000,external_roslyn:CS8602,[object Object],CODE_SMELL,MAJOR,0,,,,external_roslyn:CS8602,external_roslyn,Dereference of a possibly null reference.,2023-03-08T07:31:34+0000,,,MAJOR,READY,false,,,,,[],CODE_SMELL,false,ALL,true,[],[]
AYbAIe7v_dtLGUU1PIS_,csharp-dotnetcore-sonar,main,Program.cs,20,Possible null reference argument for parameter 's' in 'int int.Parse(string s)'.,OPEN,joshua.quek.fullstack@gmail.com,2023-03-08T07:31:28+0000,2023-06-29T12:23:22+0000,external_roslyn:CS8604,[object Object],CODE_SMELL,MAJOR,0,,,,external_roslyn:CS8604,external_roslyn,Possible null reference argument.,2023-03-08T07:31:34+0000,,,MAJOR,READY,false,,,,,[],CODE_SMELL,false,ALL,true,[],[]
AYbAIe7v_dtLGUU1PIS-,csharp-dotnetcore-sonar,main,Program.cs,19,Possible null reference argument for parameter 's' in 'int int.Parse(string s)'.,OPEN,joshua.quek.fullstack@gmail.com,2023-03-08T07:31:28+0000,2023-06-29T12:23:06+0000,external_roslyn:CS8604,[object Object],CODE_SMELL,MAJOR,0,,,,external_roslyn:CS8604,external_roslyn,Possible null reference argument.,2023-03-08T07:31:34+0000,,,MAJOR,READY,false,,,,,[],CODE_SMELL,false,ALL,true,[],[]
AYbAIe7v_dtLGUU1PITD,csharp-dotnetcore-sonar,main,Program.cs,55,Converting null literal or possible null value to non-nullable type.,OPEN,joshua.quek.fullstack@gmail.com,2023-03-08T07:31:28+0000,2023-06-28T10:06:28+0000,external_roslyn:CS8600,[object Object],CODE_SMELL,MAJOR,0,,,,external_roslyn:CS8600,external_roslyn,Converting null literal or possible null value to non-nullable type.,2023-03-08T07:31:34+0000,,,MAJOR,READY,false,,,,,[],CODE_SMELL,false,ALL,true,[],[]
AYbAIe7v_dtLGUU1PITC,csharp-dotnetcore-sonar,main,Program.cs,34,Dereference of a possibly null reference.,OPEN,joshua.quek.fullstack@gmail.com,2023-03-08T07:31:28+0000,2023-06-28T10:06:15+0000,external_roslyn:CS8602,[object Object],CODE_SMELL,MAJOR,0,,,,external_roslyn:CS8602,external_roslyn,Dereference of a possibly null reference.,2023-03-08T07:31:34+0000,,,MAJOR,READY,false,,,,,[],CODE_SMELL,false,ALL,true,[],[]
AYbAIe7v_dtLGUU1PIS9,csharp-dotnetcore-sonar,main,Program.cs,15,Move 'Solution' into a named namespace.,RESOLVED,joshua.quek.fullstack@gmail.com,2023-03-08T07:31:28+0000,2023-06-27T13:44:13+0000,csharpsquid:S3903,[object Object],BUG,MAJOR,5,,,,csharpsquid:S3903,csharpsquid,Types should be defined in named namespaces,2023-02-21T15:21:15+0000,<p>Types are declared in namespaces in order to prevent name collisions and as a way to organize them into the object hierarchy. Types that are\ndefined outside any named namespace are in a global namespace that cannot be referenced in code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo // Noncompliant\n{\n}\npublic struct Bar // Noncompliant\n{\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nnamespace SomeSpace\n{\n    public class Foo\n    {\n    }\n    public struct Bar\n    {\n    }\n}\n</pre>,<p>Types are declared in namespaces in order to prevent name collisions and as a way to organize them into the object hierarchy. Types that are\ndefined outside any named namespace are in a global namespace that cannot be referenced in code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo // Noncompliant\n{\n}\npublic struct Bar // Noncompliant\n{\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nnamespace SomeSpace\n{\n    public class Foo\n    {\n    }\n    public struct Bar\n    {\n    }\n}\n</pre>,MAJOR,READY,false,,,cs,C#,[],BUG,false,MAIN,false,"[{""key"":""default"",""content"":""<p>Types are declared in namespaces in order to prevent name collisions and as a way to organize them into the object hierarchy. Types that are\ndefined outside any named namespace are in a global namespace that cannot be referenced in code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo // Noncompliant\n{\n}\n\npublic struct Bar // Noncompliant\n{\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nnamespace SomeSpace\n{\n    public class Foo\n    {\n    }\n\n    public struct Bar\n    {\n    }\n}\n</pre>""}]",[]
AYbAIe7v_dtLGUU1PIS8,csharp-dotnetcore-sonar,main,Program.cs,15,Add a 'protected' constructor or the 'static' keyword to the class declaration.,RESOLVED,joshua.quek.fullstack@gmail.com,2023-03-08T07:31:28+0000,2023-06-27T13:43:56+0000,csharpsquid:S1118,[object Object],CODE_SMELL,MAJOR,10,design,,,csharpsquid:S1118,csharpsquid,Utility classes should not have public constructors,2023-02-21T15:21:16+0000,"<p>Utility classes, which are collections of <code>static</code> members, are not meant to be instantiated.</p>\n<p>C# adds an implicit public constructor to every class which does not explicitly define at least one constructor. Hence, at least one\n<code>protected</code> constructor should be defined if you wish to subclass this utility class. Or the <code>static</code> keyword should be added to\nthe class declaration to prevent subclassing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class StringUtils // Noncompliant\n{\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static class StringUtils\n{\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}\n</pre>\n<p>or</p>\n<pre>\npublic class StringUtils\n{\n  protected StringUtils()\n  {\n  }\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}\n</pre>","<p>Utility classes, which are collections of <code>static</code> members, are not meant to be instantiated.</p>\n<p>C# adds an implicit public constructor to every class which does not explicitly define at least one constructor. Hence, at least one\n<code>protected</code> constructor should be defined if you wish to subclass this utility class. Or the <code>static</code> keyword should be added to\nthe class declaration to prevent subclassing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class StringUtils // Noncompliant\n{\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static class StringUtils\n{\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}\n</pre>\n<p>or</p>\n<pre>\npublic class StringUtils\n{\n  protected StringUtils()\n  {\n  }\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}\n</pre>",MAJOR,READY,false,,design,cs,C#,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>Utility classes, which are collections of <code>static</code> members, are not meant to be instantiated.</p>\n<p>C# adds an implicit public constructor to every class which does not explicitly define at least one constructor. Hence, at least one\n<code>protected</code> constructor should be defined if you wish to subclass this utility class. Or the <code>static</code> keyword should be added to\nthe class declaration to prevent subclassing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class StringUtils // Noncompliant\n{\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static class StringUtils\n{\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}\n</pre>\n<p>or</p>\n<pre>\npublic class StringUtils\n{\n  protected StringUtils()\n  {\n  }\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}\n</pre>""}]",[]
AYbD8eqR_dtLGUU1PIf5,dotnetcore-azuredevops_dotnetcore-azuredevops_AYbAf9qWAu8T8ZieRlfh,main,Program.cs,55,Converting null literal or possible null value to non-nullable type.,OPEN,,2023-03-09T01:17:16+0000,2023-06-15T02:19:05+0000,external_roslyn:CS8600,[object Object],CODE_SMELL,MAJOR,0,,,,external_roslyn:CS8600,external_roslyn,Converting null literal or possible null value to non-nullable type.,2023-03-08T07:31:34+0000,,,MAJOR,READY,false,,,,,[],CODE_SMELL,false,ALL,true,[],[]
AYbD8eqR_dtLGUU1PIfz,dotnetcore-azuredevops_dotnetcore-azuredevops_AYbAf9qWAu8T8ZieRlfh,main,Program.cs,15,Move 'Solution' into a named namespace.,OPEN,,2023-03-09T01:17:16+0000,2023-06-15T02:34:33+0000,csharpsquid:S3903,,BUG,MAJOR,5,,,,csharpsquid:S3903,csharpsquid,Types should be defined in named namespaces,2023-02-21T15:21:15+0000,<p>Types are declared in namespaces in order to prevent name collisions and as a way to organize them into the object hierarchy. Types that are\ndefined outside any named namespace are in a global namespace that cannot be referenced in code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo // Noncompliant\n{\n}\npublic struct Bar // Noncompliant\n{\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nnamespace SomeSpace\n{\n    public class Foo\n    {\n    }\n    public struct Bar\n    {\n    }\n}\n</pre>,<p>Types are declared in namespaces in order to prevent name collisions and as a way to organize them into the object hierarchy. Types that are\ndefined outside any named namespace are in a global namespace that cannot be referenced in code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo // Noncompliant\n{\n}\npublic struct Bar // Noncompliant\n{\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nnamespace SomeSpace\n{\n    public class Foo\n    {\n    }\n    public struct Bar\n    {\n    }\n}\n</pre>,MAJOR,READY,false,,,cs,C#,[],BUG,false,MAIN,false,"[{""key"":""default"",""content"":""<p>Types are declared in namespaces in order to prevent name collisions and as a way to organize them into the object hierarchy. Types that are\ndefined outside any named namespace are in a global namespace that cannot be referenced in code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo // Noncompliant\n{\n}\n\npublic struct Bar // Noncompliant\n{\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nnamespace SomeSpace\n{\n    public class Foo\n    {\n    }\n\n    public struct Bar\n    {\n    }\n}\n</pre>""}]",[]
AYbD8eqR_dtLGUU1PIfy,dotnetcore-azuredevops_dotnetcore-azuredevops_AYbAf9qWAu8T8ZieRlfh,main,Program.cs,15,Add a 'protected' constructor or the 'static' keyword to the class declaration.,OPEN,,2023-03-09T01:17:16+0000,2023-06-15T02:34:08+0000,csharpsquid:S1118,,CODE_SMELL,MAJOR,10,design,,,csharpsquid:S1118,csharpsquid,Utility classes should not have public constructors,2023-02-21T15:21:16+0000,"<p>Utility classes, which are collections of <code>static</code> members, are not meant to be instantiated.</p>\n<p>C# adds an implicit public constructor to every class which does not explicitly define at least one constructor. Hence, at least one\n<code>protected</code> constructor should be defined if you wish to subclass this utility class. Or the <code>static</code> keyword should be added to\nthe class declaration to prevent subclassing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class StringUtils // Noncompliant\n{\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static class StringUtils\n{\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}\n</pre>\n<p>or</p>\n<pre>\npublic class StringUtils\n{\n  protected StringUtils()\n  {\n  }\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}\n</pre>","<p>Utility classes, which are collections of <code>static</code> members, are not meant to be instantiated.</p>\n<p>C# adds an implicit public constructor to every class which does not explicitly define at least one constructor. Hence, at least one\n<code>protected</code> constructor should be defined if you wish to subclass this utility class. Or the <code>static</code> keyword should be added to\nthe class declaration to prevent subclassing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class StringUtils // Noncompliant\n{\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static class StringUtils\n{\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}\n</pre>\n<p>or</p>\n<pre>\npublic class StringUtils\n{\n  protected StringUtils()\n  {\n  }\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}\n</pre>",MAJOR,READY,false,,design,cs,C#,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>Utility classes, which are collections of <code>static</code> members, are not meant to be instantiated.</p>\n<p>C# adds an implicit public constructor to every class which does not explicitly define at least one constructor. Hence, at least one\n<code>protected</code> constructor should be defined if you wish to subclass this utility class. Or the <code>static</code> keyword should be added to\nthe class declaration to prevent subclassing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class StringUtils // Noncompliant\n{\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static class StringUtils\n{\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}\n</pre>\n<p>or</p>\n<pre>\npublic class StringUtils\n{\n  protected StringUtils()\n  {\n  }\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}\n</pre>""}]",[]
AYbD8eqR_dtLGUU1PIfx,dotnetcore-azuredevops_dotnetcore-azuredevops_AYbAf9qWAu8T8ZieRlfh,main,Program.cs,2,Remove this commented out code.,OPEN,,2023-03-09T01:17:16+0000,2023-06-15T02:33:49+0000,csharpsquid:S125,,CODE_SMELL,MAJOR,5,unused,,,csharpsquid:S125,csharpsquid,Sections of code should not be commented out,2023-02-21T15:21:15+0000,<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>,<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>,MAJOR,READY,false,,unused,cs,C#,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>""}]",[]
AYbD8eqR_dtLGUU1PIf3,dotnetcore-azuredevops_dotnetcore-azuredevops_AYbAf9qWAu8T8ZieRlfh,main,Program.cs,33,Converting null literal or possible null value to non-nullable type.,OPEN,,2023-03-09T01:17:16+0000,2023-06-15T02:18:30+0000,external_roslyn:CS8600,[object Object],CODE_SMELL,MAJOR,0,,,,external_roslyn:CS8600,external_roslyn,Converting null literal or possible null value to non-nullable type.,2023-03-08T07:31:34+0000,,,MAJOR,READY,false,,,,,[],CODE_SMELL,false,ALL,true,[],[]
AYbD8eqR_dtLGUU1PIf2,dotnetcore-azuredevops_dotnetcore-azuredevops_AYbAf9qWAu8T8ZieRlfh,main,Program.cs,26,Dereference of a possibly null reference.,OPEN,,2023-03-09T01:17:16+0000,2023-06-15T02:18:07+0000,external_roslyn:CS8602,[object Object],CODE_SMELL,MAJOR,0,,,,external_roslyn:CS8602,external_roslyn,Dereference of a possibly null reference.,2023-03-08T07:31:34+0000,,,MAJOR,READY,false,,,,,[],CODE_SMELL,false,ALL,true,[],[]
AYbD8eqR_dtLGUU1PIf1,dotnetcore-azuredevops_dotnetcore-azuredevops_AYbAf9qWAu8T8ZieRlfh,main,Program.cs,20,Possible null reference argument for parameter 's' in 'int int.Parse(string s)'.,OPEN,,2023-03-09T01:17:16+0000,2023-06-15T02:17:42+0000,external_roslyn:CS8604,[object Object],CODE_SMELL,MAJOR,0,,,,external_roslyn:CS8604,external_roslyn,Possible null reference argument.,2023-03-08T07:31:34+0000,,,MAJOR,READY,false,,,,,[],CODE_SMELL,false,ALL,true,[],[]
AYbD8eqR_dtLGUU1PIf0,dotnetcore-azuredevops_dotnetcore-azuredevops_AYbAf9qWAu8T8ZieRlfh,main,Program.cs,19,Possible null reference argument for parameter 's' in 'int int.Parse(string s)'.,OPEN,,2023-03-09T01:17:16+0000,2023-06-15T02:34:58+0000,external_roslyn:CS8604,,CODE_SMELL,MAJOR,0,,,,external_roslyn:CS8604,external_roslyn,Possible null reference argument.,2023-03-08T07:31:34+0000,,,MAJOR,READY,false,,,,,[],CODE_SMELL,false,ALL,true,[],[]
AYbD8eqR_dtLGUU1PIf4,dotnetcore-azuredevops_dotnetcore-azuredevops_AYbAf9qWAu8T8ZieRlfh,main,Program.cs,34,Dereference of a possibly null reference.,OPEN,,2023-03-09T01:17:16+0000,2023-06-15T02:18:54+0000,external_roslyn:CS8602,[object Object],CODE_SMELL,MAJOR,0,,,,external_roslyn:CS8602,external_roslyn,Dereference of a possibly null reference.,2023-03-08T07:31:34+0000,,,MAJOR,READY,false,,,,,[],CODE_SMELL,false,ALL,true,[],[]
AYeiqDmhDSDrNq9G0IUS,dstx-file-project-local,main,src/samplefile.dstx,null,An illegal character with code point 10 was found in this literal.,CLOSED,,2023-04-21T07:12:15+0000,2023-04-21T07:16:00+0000,plsql:LiteralsNonPrintableCharactersCheck,,CODE_SMELL,CRITICAL,10,pitfall,,,plsql:LiteralsNonPrintableCharactersCheck,plsql,Whitespace and control characters in string literals should be explicit,2023-02-21T15:21:11+0000,"<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>","<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>",CRITICAL,READY,false,,pitfall,plsql,PL/SQL,"[{""key"":""allowTabulations"",""htmlDesc"":""'true' to allow tabulation characters in literals, 'false' otherwise"",""defaultValue"":""true"",""type"":""BOOLEAN""}]",CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\n\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>""}]",[]
AYeiqDmhDSDrNq9G0IUT,dstx-file-project-local,main,src/samplefile.dstx,null,An illegal character with code point 10 was found in this literal.,CLOSED,,2023-04-21T07:12:15+0000,2023-04-21T07:16:00+0000,plsql:LiteralsNonPrintableCharactersCheck,,CODE_SMELL,CRITICAL,10,pitfall,,,plsql:LiteralsNonPrintableCharactersCheck,plsql,Whitespace and control characters in string literals should be explicit,2023-02-21T15:21:11+0000,"<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>","<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>",CRITICAL,READY,false,,pitfall,plsql,PL/SQL,"[{""key"":""allowTabulations"",""htmlDesc"":""'true' to allow tabulation characters in literals, 'false' otherwise"",""defaultValue"":""true"",""type"":""BOOLEAN""}]",CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\n\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>""}]",[]
AYeiqDmhDSDrNq9G0IUU,dstx-file-project-local,main,src/samplefile.dstx,null,An illegal character with code point 10 was found in this literal.,CLOSED,,2023-04-21T07:12:15+0000,2023-04-21T07:16:00+0000,plsql:LiteralsNonPrintableCharactersCheck,,CODE_SMELL,CRITICAL,10,pitfall,,,plsql:LiteralsNonPrintableCharactersCheck,plsql,Whitespace and control characters in string literals should be explicit,2023-02-21T15:21:11+0000,"<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>","<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>",CRITICAL,READY,false,,pitfall,plsql,PL/SQL,"[{""key"":""allowTabulations"",""htmlDesc"":""'true' to allow tabulation characters in literals, 'false' otherwise"",""defaultValue"":""true"",""type"":""BOOLEAN""}]",CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\n\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>""}]",[]
AYeiqDmhDSDrNq9G0IUV,dstx-file-project-local,main,src/samplefile.dstx,null,An illegal character with code point 10 was found in this literal.,CLOSED,,2023-04-21T07:12:15+0000,2023-04-21T07:16:00+0000,plsql:LiteralsNonPrintableCharactersCheck,,CODE_SMELL,CRITICAL,10,pitfall,,,plsql:LiteralsNonPrintableCharactersCheck,plsql,Whitespace and control characters in string literals should be explicit,2023-02-21T15:21:11+0000,"<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>","<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>",CRITICAL,READY,false,,pitfall,plsql,PL/SQL,"[{""key"":""allowTabulations"",""htmlDesc"":""'true' to allow tabulation characters in literals, 'false' otherwise"",""defaultValue"":""true"",""type"":""BOOLEAN""}]",CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\n\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>""}]",[]
AYeiqDmhDSDrNq9G0IUW,dstx-file-project-local,main,src/samplefile.dstx,null,An illegal character with code point 10 was found in this literal.,CLOSED,,2023-04-21T07:12:15+0000,2023-04-21T07:16:00+0000,plsql:LiteralsNonPrintableCharactersCheck,,CODE_SMELL,CRITICAL,10,pitfall,,,plsql:LiteralsNonPrintableCharactersCheck,plsql,Whitespace and control characters in string literals should be explicit,2023-02-21T15:21:11+0000,"<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>","<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>",CRITICAL,READY,false,,pitfall,plsql,PL/SQL,"[{""key"":""allowTabulations"",""htmlDesc"":""'true' to allow tabulation characters in literals, 'false' otherwise"",""defaultValue"":""true"",""type"":""BOOLEAN""}]",CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\n\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>""}]",[]
AYeiqDmhDSDrNq9G0IUX,dstx-file-project-local,main,src/samplefile.dstx,null,An illegal character with code point 10 was found in this literal.,CLOSED,,2023-04-21T07:12:15+0000,2023-04-21T07:16:00+0000,plsql:LiteralsNonPrintableCharactersCheck,,CODE_SMELL,CRITICAL,10,pitfall,,,plsql:LiteralsNonPrintableCharactersCheck,plsql,Whitespace and control characters in string literals should be explicit,2023-02-21T15:21:11+0000,"<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>","<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>",CRITICAL,READY,false,,pitfall,plsql,PL/SQL,"[{""key"":""allowTabulations"",""htmlDesc"":""'true' to allow tabulation characters in literals, 'false' otherwise"",""defaultValue"":""true"",""type"":""BOOLEAN""}]",CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\n\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>""}]",[]
AYeiqDmhDSDrNq9G0IUY,dstx-file-project-local,main,src/samplefile.dstx,null,An illegal character with code point 10 was found in this literal.,CLOSED,,2023-04-21T07:12:15+0000,2023-04-21T07:16:00+0000,plsql:LiteralsNonPrintableCharactersCheck,,CODE_SMELL,CRITICAL,10,pitfall,,,plsql:LiteralsNonPrintableCharactersCheck,plsql,Whitespace and control characters in string literals should be explicit,2023-02-21T15:21:11+0000,"<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>","<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>",CRITICAL,READY,false,,pitfall,plsql,PL/SQL,"[{""key"":""allowTabulations"",""htmlDesc"":""'true' to allow tabulation characters in literals, 'false' otherwise"",""defaultValue"":""true"",""type"":""BOOLEAN""}]",CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\n\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>""}]",[]
AYeiqDmhDSDrNq9G0IUZ,dstx-file-project-local,main,src/samplefile.dstx,null,An illegal character with code point 10 was found in this literal.,CLOSED,,2023-04-21T07:12:15+0000,2023-04-21T07:16:00+0000,plsql:LiteralsNonPrintableCharactersCheck,,CODE_SMELL,CRITICAL,10,pitfall,,,plsql:LiteralsNonPrintableCharactersCheck,plsql,Whitespace and control characters in string literals should be explicit,2023-02-21T15:21:11+0000,"<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>","<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>",CRITICAL,READY,false,,pitfall,plsql,PL/SQL,"[{""key"":""allowTabulations"",""htmlDesc"":""'true' to allow tabulation characters in literals, 'false' otherwise"",""defaultValue"":""true"",""type"":""BOOLEAN""}]",CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\n\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>""}]",[]
AYejAmsFDSDrNq9G0If8,dstx-file-project-local,main,src/samplefile.sql,null,An illegal character with code point 10 was found in this literal.,CLOSED,,2023-04-21T08:50:42+0000,2023-04-25T01:25:13+0000,plsql:LiteralsNonPrintableCharactersCheck,,CODE_SMELL,CRITICAL,10,pitfall,,,plsql:LiteralsNonPrintableCharactersCheck,plsql,Whitespace and control characters in string literals should be explicit,2023-02-21T15:21:11+0000,"<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>","<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>",CRITICAL,READY,false,,pitfall,plsql,PL/SQL,"[{""key"":""allowTabulations"",""htmlDesc"":""'true' to allow tabulation characters in literals, 'false' otherwise"",""defaultValue"":""true"",""type"":""BOOLEAN""}]",CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\n\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>""}]",[]
AYejAmsFDSDrNq9G0If9,dstx-file-project-local,main,src/samplefile.sql,null,An illegal character with code point 10 was found in this literal.,CLOSED,,2023-04-21T08:50:42+0000,2023-04-25T01:25:13+0000,plsql:LiteralsNonPrintableCharactersCheck,,CODE_SMELL,CRITICAL,10,pitfall,,,plsql:LiteralsNonPrintableCharactersCheck,plsql,Whitespace and control characters in string literals should be explicit,2023-02-21T15:21:11+0000,"<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>","<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>",CRITICAL,READY,false,,pitfall,plsql,PL/SQL,"[{""key"":""allowTabulations"",""htmlDesc"":""'true' to allow tabulation characters in literals, 'false' otherwise"",""defaultValue"":""true"",""type"":""BOOLEAN""}]",CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\n\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>""}]",[]
AYejAmsFDSDrNq9G0If-,dstx-file-project-local,main,src/samplefile.sql,null,An illegal character with code point 10 was found in this literal.,CLOSED,,2023-04-21T08:50:42+0000,2023-04-25T01:25:13+0000,plsql:LiteralsNonPrintableCharactersCheck,,CODE_SMELL,CRITICAL,10,pitfall,,,plsql:LiteralsNonPrintableCharactersCheck,plsql,Whitespace and control characters in string literals should be explicit,2023-02-21T15:21:11+0000,"<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>","<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>",CRITICAL,READY,false,,pitfall,plsql,PL/SQL,"[{""key"":""allowTabulations"",""htmlDesc"":""'true' to allow tabulation characters in literals, 'false' otherwise"",""defaultValue"":""true"",""type"":""BOOLEAN""}]",CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\n\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>""}]",[]
AYejAmsFDSDrNq9G0If_,dstx-file-project-local,main,src/samplefile.sql,null,An illegal character with code point 10 was found in this literal.,CLOSED,,2023-04-21T08:50:42+0000,2023-04-25T01:25:13+0000,plsql:LiteralsNonPrintableCharactersCheck,,CODE_SMELL,CRITICAL,10,pitfall,,,plsql:LiteralsNonPrintableCharactersCheck,plsql,Whitespace and control characters in string literals should be explicit,2023-02-21T15:21:11+0000,"<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>","<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>",CRITICAL,READY,false,,pitfall,plsql,PL/SQL,"[{""key"":""allowTabulations"",""htmlDesc"":""'true' to allow tabulation characters in literals, 'false' otherwise"",""defaultValue"":""true"",""type"":""BOOLEAN""}]",CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\n\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>""}]",[]
AYejAmsFDSDrNq9G0IgA,dstx-file-project-local,main,src/samplefile.sql,null,An illegal character with code point 10 was found in this literal.,CLOSED,,2023-04-21T08:50:42+0000,2023-04-25T01:25:13+0000,plsql:LiteralsNonPrintableCharactersCheck,,CODE_SMELL,CRITICAL,10,pitfall,,,plsql:LiteralsNonPrintableCharactersCheck,plsql,Whitespace and control characters in string literals should be explicit,2023-02-21T15:21:11+0000,"<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>","<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>",CRITICAL,READY,false,,pitfall,plsql,PL/SQL,"[{""key"":""allowTabulations"",""htmlDesc"":""'true' to allow tabulation characters in literals, 'false' otherwise"",""defaultValue"":""true"",""type"":""BOOLEAN""}]",CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\n\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>""}]",[]
AYejAmsFDSDrNq9G0IgB,dstx-file-project-local,main,src/samplefile.sql,null,An illegal character with code point 10 was found in this literal.,CLOSED,,2023-04-21T08:50:42+0000,2023-04-25T01:25:13+0000,plsql:LiteralsNonPrintableCharactersCheck,,CODE_SMELL,CRITICAL,10,pitfall,,,plsql:LiteralsNonPrintableCharactersCheck,plsql,Whitespace and control characters in string literals should be explicit,2023-02-21T15:21:11+0000,"<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>","<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>",CRITICAL,READY,false,,pitfall,plsql,PL/SQL,"[{""key"":""allowTabulations"",""htmlDesc"":""'true' to allow tabulation characters in literals, 'false' otherwise"",""defaultValue"":""true"",""type"":""BOOLEAN""}]",CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\n\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>""}]",[]
AYejAmsFDSDrNq9G0IgC,dstx-file-project-local,main,src/samplefile.sql,null,An illegal character with code point 10 was found in this literal.,CLOSED,,2023-04-21T08:50:42+0000,2023-04-25T01:25:13+0000,plsql:LiteralsNonPrintableCharactersCheck,,CODE_SMELL,CRITICAL,10,pitfall,,,plsql:LiteralsNonPrintableCharactersCheck,plsql,Whitespace and control characters in string literals should be explicit,2023-02-21T15:21:11+0000,"<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>","<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>",CRITICAL,READY,false,,pitfall,plsql,PL/SQL,"[{""key"":""allowTabulations"",""htmlDesc"":""'true' to allow tabulation characters in literals, 'false' otherwise"",""defaultValue"":""true"",""type"":""BOOLEAN""}]",CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\n\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>""}]",[]
AYejAmsFDSDrNq9G0IgD,dstx-file-project-local,main,src/samplefile.sql,null,An illegal character with code point 10 was found in this literal.,CLOSED,,2023-04-21T08:50:42+0000,2023-04-25T01:25:13+0000,plsql:LiteralsNonPrintableCharactersCheck,,CODE_SMELL,CRITICAL,10,pitfall,,,plsql:LiteralsNonPrintableCharactersCheck,plsql,Whitespace and control characters in string literals should be explicit,2023-02-21T15:21:11+0000,"<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>","<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>",CRITICAL,READY,false,,pitfall,plsql,PL/SQL,"[{""key"":""allowTabulations"",""htmlDesc"":""'true' to allow tabulation characters in literals, 'false' otherwise"",""defaultValue"":""true"",""type"":""BOOLEAN""}]",CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\n\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>""}]",[]
AYe2EnT5xaLudXy26Q5i,dstx-file-project-local,main,src/samplefile.sql,859,An illegal character with code point 10 was found in this literal.,OPEN,,2023-04-21T08:50:42+0000,2023-04-25T01:55:18+0000,plsql:LiteralsNonPrintableCharactersCheck,,CODE_SMELL,CRITICAL,10,pitfall,,,plsql:LiteralsNonPrintableCharactersCheck,plsql,Whitespace and control characters in string literals should be explicit,2023-02-21T15:21:11+0000,"<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>","<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>",CRITICAL,READY,false,,pitfall,plsql,PL/SQL,"[{""key"":""allowTabulations"",""htmlDesc"":""'true' to allow tabulation characters in literals, 'false' otherwise"",""defaultValue"":""true"",""type"":""BOOLEAN""}]",CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\n\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>""}]",[]
AYe2EnT5xaLudXy26Q5f,dstx-file-project-local,main,src/samplefile.sql,641,An illegal character with code point 10 was found in this literal.,OPEN,,2023-04-21T08:50:42+0000,2023-04-25T01:55:18+0000,plsql:LiteralsNonPrintableCharactersCheck,,CODE_SMELL,CRITICAL,10,pitfall,,,plsql:LiteralsNonPrintableCharactersCheck,plsql,Whitespace and control characters in string literals should be explicit,2023-02-21T15:21:11+0000,"<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>","<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>",CRITICAL,READY,false,,pitfall,plsql,PL/SQL,"[{""key"":""allowTabulations"",""htmlDesc"":""'true' to allow tabulation characters in literals, 'false' otherwise"",""defaultValue"":""true"",""type"":""BOOLEAN""}]",CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\n\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>""}]",[]
AYe2EnT5xaLudXy26Q5g,dstx-file-project-local,main,src/samplefile.sql,822,An illegal character with code point 10 was found in this literal.,OPEN,,2023-04-21T08:50:42+0000,2023-04-25T01:55:18+0000,plsql:LiteralsNonPrintableCharactersCheck,,CODE_SMELL,CRITICAL,10,pitfall,,,plsql:LiteralsNonPrintableCharactersCheck,plsql,Whitespace and control characters in string literals should be explicit,2023-02-21T15:21:11+0000,"<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>","<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>",CRITICAL,READY,false,,pitfall,plsql,PL/SQL,"[{""key"":""allowTabulations"",""htmlDesc"":""'true' to allow tabulation characters in literals, 'false' otherwise"",""defaultValue"":""true"",""type"":""BOOLEAN""}]",CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\n\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>""}]",[]
AYe2EnT5xaLudXy26Q5h,dstx-file-project-local,main,src/samplefile.sql,858,An illegal character with code point 10 was found in this literal.,OPEN,,2023-04-21T08:50:42+0000,2023-04-25T01:55:18+0000,plsql:LiteralsNonPrintableCharactersCheck,,CODE_SMELL,CRITICAL,10,pitfall,,,plsql:LiteralsNonPrintableCharactersCheck,plsql,Whitespace and control characters in string literals should be explicit,2023-02-21T15:21:11+0000,"<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>","<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>",CRITICAL,READY,false,,pitfall,plsql,PL/SQL,"[{""key"":""allowTabulations"",""htmlDesc"":""'true' to allow tabulation characters in literals, 'false' otherwise"",""defaultValue"":""true"",""type"":""BOOLEAN""}]",CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\n\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>""}]",[]
AYe2EnT5xaLudXy26Q5k,dstx-file-project-local,main,src/samplefile.sql,880,An illegal character with code point 10 was found in this literal.,OPEN,,2023-04-21T08:50:42+0000,2023-04-25T01:55:18+0000,plsql:LiteralsNonPrintableCharactersCheck,,CODE_SMELL,CRITICAL,10,pitfall,,,plsql:LiteralsNonPrintableCharactersCheck,plsql,Whitespace and control characters in string literals should be explicit,2023-02-21T15:21:11+0000,"<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>","<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>",CRITICAL,READY,false,,pitfall,plsql,PL/SQL,"[{""key"":""allowTabulations"",""htmlDesc"":""'true' to allow tabulation characters in literals, 'false' otherwise"",""defaultValue"":""true"",""type"":""BOOLEAN""}]",CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\n\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>""}]",[]
AYe2EnT5xaLudXy26Q5l,dstx-file-project-local,main,src/samplefile.sql,1173,An illegal character with code point 10 was found in this literal.,OPEN,,2023-04-21T08:50:42+0000,2023-04-25T01:55:18+0000,plsql:LiteralsNonPrintableCharactersCheck,,CODE_SMELL,CRITICAL,10,pitfall,,,plsql:LiteralsNonPrintableCharactersCheck,plsql,Whitespace and control characters in string literals should be explicit,2023-02-21T15:21:11+0000,"<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>","<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>",CRITICAL,READY,false,,pitfall,plsql,PL/SQL,"[{""key"":""allowTabulations"",""htmlDesc"":""'true' to allow tabulation characters in literals, 'false' otherwise"",""defaultValue"":""true"",""type"":""BOOLEAN""}]",CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\n\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>""}]",[]
AYe2EnT5xaLudXy26Q5j,dstx-file-project-local,main,src/samplefile.sql,870,An illegal character with code point 10 was found in this literal.,OPEN,,2023-04-21T08:50:42+0000,2023-04-25T01:55:18+0000,plsql:LiteralsNonPrintableCharactersCheck,,CODE_SMELL,CRITICAL,10,pitfall,,,plsql:LiteralsNonPrintableCharactersCheck,plsql,Whitespace and control characters in string literals should be explicit,2023-02-21T15:21:11+0000,"<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>","<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>",CRITICAL,READY,false,,pitfall,plsql,PL/SQL,"[{""key"":""allowTabulations"",""htmlDesc"":""'true' to allow tabulation characters in literals, 'false' otherwise"",""defaultValue"":""true"",""type"":""BOOLEAN""}]",CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\n\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>""}]",[]
AYe2EnT5xaLudXy26Q5m,dstx-file-project-local,main,src/samplefile.sql,1182,An illegal character with code point 10 was found in this literal.,OPEN,,2023-04-21T08:50:42+0000,2023-04-25T01:55:18+0000,plsql:LiteralsNonPrintableCharactersCheck,,CODE_SMELL,CRITICAL,10,pitfall,,,plsql:LiteralsNonPrintableCharactersCheck,plsql,Whitespace and control characters in string literals should be explicit,2023-02-21T15:21:11+0000,"<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>","<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>",CRITICAL,READY,false,,pitfall,plsql,PL/SQL,"[{""key"":""allowTabulations"",""htmlDesc"":""'true' to allow tabulation characters in literals, 'false' otherwise"",""defaultValue"":""true"",""type"":""BOOLEAN""}]",CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\n\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>""}]",[]
AYfq8swN2NhXQ4Y5VZBR,dtsx-file-project-local,main,src/samplefile.sql,1182,An illegal character with code point 10 was found in this literal.,OPEN,,2023-05-05T08:06:19+0000,2023-05-05T08:06:19+0000,plsql:LiteralsNonPrintableCharactersCheck,,CODE_SMELL,CRITICAL,10,pitfall,,,plsql:LiteralsNonPrintableCharactersCheck,plsql,Whitespace and control characters in string literals should be explicit,2023-02-21T15:21:11+0000,"<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>","<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>",CRITICAL,READY,false,,pitfall,plsql,PL/SQL,"[{""key"":""allowTabulations"",""htmlDesc"":""'true' to allow tabulation characters in literals, 'false' otherwise"",""defaultValue"":""true"",""type"":""BOOLEAN""}]",CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\n\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>""}]",[]
AYfq8swN2NhXQ4Y5VZBQ,dtsx-file-project-local,main,src/samplefile.sql,1173,An illegal character with code point 10 was found in this literal.,OPEN,,2023-05-05T08:06:19+0000,2023-05-05T08:06:19+0000,plsql:LiteralsNonPrintableCharactersCheck,,CODE_SMELL,CRITICAL,10,pitfall,,,plsql:LiteralsNonPrintableCharactersCheck,plsql,Whitespace and control characters in string literals should be explicit,2023-02-21T15:21:11+0000,"<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>","<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>",CRITICAL,READY,false,,pitfall,plsql,PL/SQL,"[{""key"":""allowTabulations"",""htmlDesc"":""'true' to allow tabulation characters in literals, 'false' otherwise"",""defaultValue"":""true"",""type"":""BOOLEAN""}]",CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\n\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>""}]",[]
AYfq8swN2NhXQ4Y5VZBP,dtsx-file-project-local,main,src/samplefile.sql,880,An illegal character with code point 10 was found in this literal.,OPEN,,2023-05-05T08:06:19+0000,2023-05-05T08:06:19+0000,plsql:LiteralsNonPrintableCharactersCheck,,CODE_SMELL,CRITICAL,10,pitfall,,,plsql:LiteralsNonPrintableCharactersCheck,plsql,Whitespace and control characters in string literals should be explicit,2023-02-21T15:21:11+0000,"<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>","<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>",CRITICAL,READY,false,,pitfall,plsql,PL/SQL,"[{""key"":""allowTabulations"",""htmlDesc"":""'true' to allow tabulation characters in literals, 'false' otherwise"",""defaultValue"":""true"",""type"":""BOOLEAN""}]",CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\n\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>""}]",[]
AYfq8swN2NhXQ4Y5VZBO,dtsx-file-project-local,main,src/samplefile.sql,870,An illegal character with code point 10 was found in this literal.,OPEN,,2023-05-05T08:06:19+0000,2023-05-05T08:06:19+0000,plsql:LiteralsNonPrintableCharactersCheck,,CODE_SMELL,CRITICAL,10,pitfall,,,plsql:LiteralsNonPrintableCharactersCheck,plsql,Whitespace and control characters in string literals should be explicit,2023-02-21T15:21:11+0000,"<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>","<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>",CRITICAL,READY,false,,pitfall,plsql,PL/SQL,"[{""key"":""allowTabulations"",""htmlDesc"":""'true' to allow tabulation characters in literals, 'false' otherwise"",""defaultValue"":""true"",""type"":""BOOLEAN""}]",CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\n\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>""}]",[]
AYfq8swN2NhXQ4Y5VZBN,dtsx-file-project-local,main,src/samplefile.sql,859,An illegal character with code point 10 was found in this literal.,OPEN,,2023-05-05T08:06:19+0000,2023-05-05T08:06:19+0000,plsql:LiteralsNonPrintableCharactersCheck,,CODE_SMELL,CRITICAL,10,pitfall,,,plsql:LiteralsNonPrintableCharactersCheck,plsql,Whitespace and control characters in string literals should be explicit,2023-02-21T15:21:11+0000,"<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>","<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>",CRITICAL,READY,false,,pitfall,plsql,PL/SQL,"[{""key"":""allowTabulations"",""htmlDesc"":""'true' to allow tabulation characters in literals, 'false' otherwise"",""defaultValue"":""true"",""type"":""BOOLEAN""}]",CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\n\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>""}]",[]
AYfq8swN2NhXQ4Y5VZBM,dtsx-file-project-local,main,src/samplefile.sql,858,An illegal character with code point 10 was found in this literal.,OPEN,,2023-05-05T08:06:19+0000,2023-05-05T08:06:19+0000,plsql:LiteralsNonPrintableCharactersCheck,,CODE_SMELL,CRITICAL,10,pitfall,,,plsql:LiteralsNonPrintableCharactersCheck,plsql,Whitespace and control characters in string literals should be explicit,2023-02-21T15:21:11+0000,"<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>","<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>",CRITICAL,READY,false,,pitfall,plsql,PL/SQL,"[{""key"":""allowTabulations"",""htmlDesc"":""'true' to allow tabulation characters in literals, 'false' otherwise"",""defaultValue"":""true"",""type"":""BOOLEAN""}]",CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\n\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>""}]",[]
AYfq8swN2NhXQ4Y5VZBL,dtsx-file-project-local,main,src/samplefile.sql,822,An illegal character with code point 10 was found in this literal.,OPEN,,2023-05-05T08:06:19+0000,2023-05-05T08:06:19+0000,plsql:LiteralsNonPrintableCharactersCheck,,CODE_SMELL,CRITICAL,10,pitfall,,,plsql:LiteralsNonPrintableCharactersCheck,plsql,Whitespace and control characters in string literals should be explicit,2023-02-21T15:21:11+0000,"<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>","<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>",CRITICAL,READY,false,,pitfall,plsql,PL/SQL,"[{""key"":""allowTabulations"",""htmlDesc"":""'true' to allow tabulation characters in literals, 'false' otherwise"",""defaultValue"":""true"",""type"":""BOOLEAN""}]",CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\n\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>""}]",[]
AYfq8swN2NhXQ4Y5VZBK,dtsx-file-project-local,main,src/samplefile.sql,641,An illegal character with code point 10 was found in this literal.,OPEN,,2023-05-05T08:06:19+0000,2023-05-05T08:06:19+0000,plsql:LiteralsNonPrintableCharactersCheck,,CODE_SMELL,CRITICAL,10,pitfall,,,plsql:LiteralsNonPrintableCharactersCheck,plsql,Whitespace and control characters in string literals should be explicit,2023-02-21T15:21:11+0000,"<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>","<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>",CRITICAL,READY,false,,pitfall,plsql,PL/SQL,"[{""key"":""allowTabulations"",""htmlDesc"":""'true' to allow tabulation characters in literals, 'false' otherwise"",""defaultValue"":""true"",""type"":""BOOLEAN""}]",CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>New lines and control characters can be injected in the source code by bad manipulations. Control characters aren’t visible to maintainers, so\nwhether or not they are actually wanted should be double-checked. Note that this rule can optionally also report violations on literals containing the\ntabulation character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSET SERVEROUTPUT ON\n\nBEGIN\n  /* Non-Compliant */ DBMS_OUTPUT.PUT_LINE('Hello\nworld!');\n\n  DBMS_OUTPUT.PUT_LINE('Hello'); -- Compliant, this is preferred\n  DBMS_OUTPUT.PUT_LINE('world!');\nEND;\n/\n</pre>\n<h2>Exceptions</h2>\n<p>By default no issue will be raised on tabulation characters. This exception can be disabled.</p>""}]",[]
AYeTkVLrf3tdOjSTH2we,java-gradle-sonar-local,main,src/main/java/fr/parisnanterre/pascalpoizat/templates/javaproject/Principal.java,42,Move this default to the end of the switch.,OPEN,,2023-04-18T08:52:51+0000,2023-06-28T10:01:06+0000,java:S4524,[object Object],CODE_SMELL,CRITICAL,5,,,,java:S4524,java,"""default"" clauses should be last",2023-02-21T15:21:13+0000,"<p><code>switch</code> can contain a <code>default</code> clause for various reasons: to handle unexpected values, to show that all the cases were\nproperly considered.</p>\n<p>For readability purpose, to help a developer to quickly find the default behavior of a <code>switch</code> statement, it is recommended to put the\n<code>default</code> clause at the end of the <code>switch</code> statement. This rule raises an issue if the <code>default</code> clause is not the\nlast one of the <code>switch</code>'s cases.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  default: // default clause should be the last one\n    error();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n  default:\n    error();\n    break;\n}\n</pre>","<p><code>switch</code> can contain a <code>default</code> clause for various reasons: to handle unexpected values, to show that all the cases were\nproperly considered.</p>\n<p>For readability purpose, to help a developer to quickly find the default behavior of a <code>switch</code> statement, it is recommended to put the\n<code>default</code> clause at the end of the <code>switch</code> statement. This rule raises an issue if the <code>default</code> clause is not the\nlast one of the <code>switch</code>'s cases.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  default: // default clause should be the last one\n    error();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n  default:\n    error();\n    break;\n}\n</pre>",CRITICAL,READY,false,,,java,Java,[],CODE_SMELL,false,ALL,false,"[{""key"":""default"",""content"":""<p><code>switch</code> can contain a <code>default</code> clause for various reasons: to handle unexpected values, to show that all the cases were\nproperly considered.</p>\n<p>For readability purpose, to help a developer to quickly find the default behavior of a <code>switch</code> statement, it is recommended to put the\n<code>default</code> clause at the end of the <code>switch</code> statement. This rule raises an issue if the <code>default</code> clause is not the\nlast one of the <code>switch</code>'s cases.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  default: // default clause should be the last one\n    error();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n  default:\n    error();\n    break;\n}\n</pre>""}]",[]
AYeTkVLrf3tdOjSTH2wf,java-gradle-sonar-local,main,src/main/java/fr/parisnanterre/pascalpoizat/templates/javaproject/Principal.java,43,Replace this use of System.out or System.err by a logger.,OPEN,,2023-04-18T08:52:51+0000,2023-06-28T10:01:38+0000,java:S106,[object Object],CODE_SMELL,MAJOR,10,"bad-practice,cert,owasp-a3",,,java:S106,java,Standard outputs should not be used directly to log anything,2023-02-21T15:21:12+0000,"<p>When logging a message there are several important requirements which must be fulfilled:</p>\n<ul>\n  <li> The user must be able to easily retrieve the logs </li>\n  <li> The format of all logged message must be uniform to allow the user to easily read the log </li>\n  <li> Logged data must actually be recorded </li>\n  <li> Sensitive data must only be logged securely </li>\n</ul>\n<p>If a program directly writes to the standard outputs, there is absolutely no way to comply with those requirements. That’s why defining and using a\ndedicated logger is highly recommended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSystem.out.println(""My Message"");  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlogger.log(""My Message"");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/"">OWASP Top 10 2021 Category A9</a> - Security Logging and\n  Monitoring Failures </li>\n  <li> <a href=""https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure"">OWASP Top 10 2017 Category A3</a> - Sensitive Data\n  Exposure </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/nzdGBQ"">CERT, ERR02-J.</a> - Prevent exceptions while logging data </li>\n</ul>","<p>When logging a message there are several important requirements which must be fulfilled:</p>\n<ul>\n  <li> The user must be able to easily retrieve the logs </li>\n  <li> The format of all logged message must be uniform to allow the user to easily read the log </li>\n  <li> Logged data must actually be recorded </li>\n  <li> Sensitive data must only be logged securely </li>\n</ul>\n<p>If a program directly writes to the standard outputs, there is absolutely no way to comply with those requirements. That’s why defining and using a\ndedicated logger is highly recommended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSystem.out.println(""My Message"");  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlogger.log(""My Message"");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/"">OWASP Top 10 2021 Category A9</a> - Security Logging and\n  Monitoring Failures </li>\n  <li> <a href=""https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure"">OWASP Top 10 2017 Category A3</a> - Sensitive Data\n  Exposure </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/nzdGBQ"">CERT, ERR02-J.</a> - Prevent exceptions while logging data </li>\n</ul>",MAJOR,READY,false,,"bad-practice,cert,owasp-a3",java,Java,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>When logging a message there are several important requirements which must be fulfilled:</p>\n<ul>\n  <li> The user must be able to easily retrieve the logs </li>\n  <li> The format of all logged message must be uniform to allow the user to easily read the log </li>\n  <li> Logged data must actually be recorded </li>\n  <li> Sensitive data must only be logged securely </li>\n</ul>\n<p>If a program directly writes to the standard outputs, there is absolutely no way to comply with those requirements. That’s why defining and using a\ndedicated logger is highly recommended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSystem.out.println(\""My Message\"");  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlogger.log(\""My Message\"");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\""https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\"">OWASP Top 10 2021 Category A9</a> - Security Logging and\n  Monitoring Failures </li>\n  <li> <a href=\""https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"">OWASP Top 10 2017 Category A3</a> - Sensitive Data\n  Exposure </li>\n  <li> <a href=\""https://wiki.sei.cmu.edu/confluence/x/nzdGBQ\"">CERT, ERR02-J.</a> - Prevent exceptions while logging data </li>\n</ul>""}]",[]
AYeTkVLrf3tdOjSTH2wg,java-gradle-sonar-local,main,src/main/java/fr/parisnanterre/pascalpoizat/templates/javaproject/Principal.java,46,Replace this use of System.out or System.err by a logger.,OPEN,,2023-04-18T08:52:51+0000,2023-06-28T10:01:50+0000,java:S106,[object Object],CODE_SMELL,MAJOR,10,"bad-practice,cert,owasp-a3",,,java:S106,java,Standard outputs should not be used directly to log anything,2023-02-21T15:21:12+0000,"<p>When logging a message there are several important requirements which must be fulfilled:</p>\n<ul>\n  <li> The user must be able to easily retrieve the logs </li>\n  <li> The format of all logged message must be uniform to allow the user to easily read the log </li>\n  <li> Logged data must actually be recorded </li>\n  <li> Sensitive data must only be logged securely </li>\n</ul>\n<p>If a program directly writes to the standard outputs, there is absolutely no way to comply with those requirements. That’s why defining and using a\ndedicated logger is highly recommended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSystem.out.println(""My Message"");  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlogger.log(""My Message"");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/"">OWASP Top 10 2021 Category A9</a> - Security Logging and\n  Monitoring Failures </li>\n  <li> <a href=""https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure"">OWASP Top 10 2017 Category A3</a> - Sensitive Data\n  Exposure </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/nzdGBQ"">CERT, ERR02-J.</a> - Prevent exceptions while logging data </li>\n</ul>","<p>When logging a message there are several important requirements which must be fulfilled:</p>\n<ul>\n  <li> The user must be able to easily retrieve the logs </li>\n  <li> The format of all logged message must be uniform to allow the user to easily read the log </li>\n  <li> Logged data must actually be recorded </li>\n  <li> Sensitive data must only be logged securely </li>\n</ul>\n<p>If a program directly writes to the standard outputs, there is absolutely no way to comply with those requirements. That’s why defining and using a\ndedicated logger is highly recommended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSystem.out.println(""My Message"");  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlogger.log(""My Message"");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/"">OWASP Top 10 2021 Category A9</a> - Security Logging and\n  Monitoring Failures </li>\n  <li> <a href=""https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure"">OWASP Top 10 2017 Category A3</a> - Sensitive Data\n  Exposure </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/nzdGBQ"">CERT, ERR02-J.</a> - Prevent exceptions while logging data </li>\n</ul>",MAJOR,READY,false,,"bad-practice,cert,owasp-a3",java,Java,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>When logging a message there are several important requirements which must be fulfilled:</p>\n<ul>\n  <li> The user must be able to easily retrieve the logs </li>\n  <li> The format of all logged message must be uniform to allow the user to easily read the log </li>\n  <li> Logged data must actually be recorded </li>\n  <li> Sensitive data must only be logged securely </li>\n</ul>\n<p>If a program directly writes to the standard outputs, there is absolutely no way to comply with those requirements. That’s why defining and using a\ndedicated logger is highly recommended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSystem.out.println(\""My Message\"");  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlogger.log(\""My Message\"");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\""https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\"">OWASP Top 10 2021 Category A9</a> - Security Logging and\n  Monitoring Failures </li>\n  <li> <a href=\""https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"">OWASP Top 10 2017 Category A3</a> - Sensitive Data\n  Exposure </li>\n  <li> <a href=\""https://wiki.sei.cmu.edu/confluence/x/nzdGBQ\"">CERT, ERR02-J.</a> - Prevent exceptions while logging data </li>\n</ul>""}]",[]
AYeTkVLrf3tdOjSTH2wh,java-gradle-sonar-local,main,src/main/java/fr/parisnanterre/pascalpoizat/templates/javaproject/Principal.java,49,Replace this use of System.out or System.err by a logger.,OPEN,,2023-04-18T08:52:51+0000,2023-06-28T10:02:04+0000,java:S106,[object Object],CODE_SMELL,MAJOR,10,"bad-practice,cert,owasp-a3",,,java:S106,java,Standard outputs should not be used directly to log anything,2023-02-21T15:21:12+0000,"<p>When logging a message there are several important requirements which must be fulfilled:</p>\n<ul>\n  <li> The user must be able to easily retrieve the logs </li>\n  <li> The format of all logged message must be uniform to allow the user to easily read the log </li>\n  <li> Logged data must actually be recorded </li>\n  <li> Sensitive data must only be logged securely </li>\n</ul>\n<p>If a program directly writes to the standard outputs, there is absolutely no way to comply with those requirements. That’s why defining and using a\ndedicated logger is highly recommended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSystem.out.println(""My Message"");  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlogger.log(""My Message"");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/"">OWASP Top 10 2021 Category A9</a> - Security Logging and\n  Monitoring Failures </li>\n  <li> <a href=""https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure"">OWASP Top 10 2017 Category A3</a> - Sensitive Data\n  Exposure </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/nzdGBQ"">CERT, ERR02-J.</a> - Prevent exceptions while logging data </li>\n</ul>","<p>When logging a message there are several important requirements which must be fulfilled:</p>\n<ul>\n  <li> The user must be able to easily retrieve the logs </li>\n  <li> The format of all logged message must be uniform to allow the user to easily read the log </li>\n  <li> Logged data must actually be recorded </li>\n  <li> Sensitive data must only be logged securely </li>\n</ul>\n<p>If a program directly writes to the standard outputs, there is absolutely no way to comply with those requirements. That’s why defining and using a\ndedicated logger is highly recommended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSystem.out.println(""My Message"");  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlogger.log(""My Message"");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/"">OWASP Top 10 2021 Category A9</a> - Security Logging and\n  Monitoring Failures </li>\n  <li> <a href=""https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure"">OWASP Top 10 2017 Category A3</a> - Sensitive Data\n  Exposure </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/nzdGBQ"">CERT, ERR02-J.</a> - Prevent exceptions while logging data </li>\n</ul>",MAJOR,READY,false,,"bad-practice,cert,owasp-a3",java,Java,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>When logging a message there are several important requirements which must be fulfilled:</p>\n<ul>\n  <li> The user must be able to easily retrieve the logs </li>\n  <li> The format of all logged message must be uniform to allow the user to easily read the log </li>\n  <li> Logged data must actually be recorded </li>\n  <li> Sensitive data must only be logged securely </li>\n</ul>\n<p>If a program directly writes to the standard outputs, there is absolutely no way to comply with those requirements. That’s why defining and using a\ndedicated logger is highly recommended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSystem.out.println(\""My Message\"");  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlogger.log(\""My Message\"");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\""https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\"">OWASP Top 10 2021 Category A9</a> - Security Logging and\n  Monitoring Failures </li>\n  <li> <a href=\""https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"">OWASP Top 10 2017 Category A3</a> - Sensitive Data\n  Exposure </li>\n  <li> <a href=\""https://wiki.sei.cmu.edu/confluence/x/nzdGBQ\"">CERT, ERR02-J.</a> - Prevent exceptions while logging data </li>\n</ul>""}]",[]
AYeTkVLrf3tdOjSTH2wZ,java-gradle-sonar-local,main,src/main/java/fr/parisnanterre/pascalpoizat/templates/javaproject/Principal.java,53,"Remove this expression which always evaluates to ""false""",OPEN,,2023-04-18T08:52:51+0000,2023-06-28T10:02:16+0000,java:S2589,[object Object],CODE_SMELL,MAJOR,10,"cert,cwe,redundant,suspicious",,,java:S2589,java,Boolean expressions should not be gratuitous,2023-02-21T15:21:13+0000,"<p>If a boolean expression doesn’t change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer’s intent, then it’s a bug and the expression should be fixed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = true;\nif (a) { // Noncompliant\n  doSomething();\n}\nif (b &amp;&amp; a) { // Noncompliant; ""a"" is always ""true""\n  doSomething();\n}\nif (c || !a) { // Noncompliant; ""!a"" is always ""false""\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = true;\nif (foo(a)) {\n  doSomething();\n}\nif (b) {\n  doSomething();\n}\nif (c) {\n  doSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/571"">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/570"">MITRE, CWE-570</a> - Expression is Always False </li>\n</ul>","<p>If a boolean expression doesn’t change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer’s intent, then it’s a bug and the expression should be fixed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = true;\nif (a) { // Noncompliant\n  doSomething();\n}\nif (b &amp;&amp; a) { // Noncompliant; ""a"" is always ""true""\n  doSomething();\n}\nif (c || !a) { // Noncompliant; ""!a"" is always ""false""\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = true;\nif (foo(a)) {\n  doSomething();\n}\nif (b) {\n  doSomething();\n}\nif (c) {\n  doSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/571"">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/570"">MITRE, CWE-570</a> - Expression is Always False </li>\n</ul>",MAJOR,READY,false,,"cert,cwe,redundant,suspicious",java,Java,[],CODE_SMELL,false,ALL,false,"[{""key"":""default"",""content"":""<p>If a boolean expression doesn’t change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer’s intent, then it’s a bug and the expression should be fixed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = true;\nif (a) { // Noncompliant\n  doSomething();\n}\n\nif (b &amp;&amp; a) { // Noncompliant; \""a\"" is always \""true\""\n  doSomething();\n}\n\nif (c || !a) { // Noncompliant; \""!a\"" is always \""false\""\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = true;\nif (foo(a)) {\n  doSomething();\n}\n\nif (b) {\n  doSomething();\n}\n\nif (c) {\n  doSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\""https://cwe.mitre.org/data/definitions/571\"">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=\""https://cwe.mitre.org/data/definitions/570\"">MITRE, CWE-570</a> - Expression is Always False </li>\n</ul>""}]",[]
AYeTkVLrf3tdOjSTH2wa,java-gradle-sonar-local,main,src/main/java/fr/parisnanterre/pascalpoizat/templates/javaproject/Principal.java,53,"Remove this expression which always evaluates to ""true""",OPEN,,2023-04-18T08:52:51+0000,2023-06-28T10:02:28+0000,java:S2589,[object Object],CODE_SMELL,MAJOR,10,"cert,cwe,redundant,suspicious",,,java:S2589,java,Boolean expressions should not be gratuitous,2023-02-21T15:21:13+0000,"<p>If a boolean expression doesn’t change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer’s intent, then it’s a bug and the expression should be fixed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = true;\nif (a) { // Noncompliant\n  doSomething();\n}\nif (b &amp;&amp; a) { // Noncompliant; ""a"" is always ""true""\n  doSomething();\n}\nif (c || !a) { // Noncompliant; ""!a"" is always ""false""\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = true;\nif (foo(a)) {\n  doSomething();\n}\nif (b) {\n  doSomething();\n}\nif (c) {\n  doSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/571"">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/570"">MITRE, CWE-570</a> - Expression is Always False </li>\n</ul>","<p>If a boolean expression doesn’t change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer’s intent, then it’s a bug and the expression should be fixed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = true;\nif (a) { // Noncompliant\n  doSomething();\n}\nif (b &amp;&amp; a) { // Noncompliant; ""a"" is always ""true""\n  doSomething();\n}\nif (c || !a) { // Noncompliant; ""!a"" is always ""false""\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = true;\nif (foo(a)) {\n  doSomething();\n}\nif (b) {\n  doSomething();\n}\nif (c) {\n  doSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/571"">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/570"">MITRE, CWE-570</a> - Expression is Always False </li>\n</ul>",MAJOR,READY,false,,"cert,cwe,redundant,suspicious",java,Java,[],CODE_SMELL,false,ALL,false,"[{""key"":""default"",""content"":""<p>If a boolean expression doesn’t change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer’s intent, then it’s a bug and the expression should be fixed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = true;\nif (a) { // Noncompliant\n  doSomething();\n}\n\nif (b &amp;&amp; a) { // Noncompliant; \""a\"" is always \""true\""\n  doSomething();\n}\n\nif (c || !a) { // Noncompliant; \""!a\"" is always \""false\""\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = true;\nif (foo(a)) {\n  doSomething();\n}\n\nif (b) {\n  doSomething();\n}\n\nif (c) {\n  doSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\""https://cwe.mitre.org/data/definitions/571\"">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=\""https://cwe.mitre.org/data/definitions/570\"">MITRE, CWE-570</a> - Expression is Always False </li>\n</ul>""}]",[]
AYeTkVLrf3tdOjSTH2wb,java-gradle-sonar-local,main,src/main/java/fr/parisnanterre/pascalpoizat/templates/javaproject/Principal.java,53,"Remove this expression which always evaluates to ""false""",OPEN,,2023-04-18T08:52:51+0000,2023-06-28T10:02:41+0000,java:S2589,[object Object],CODE_SMELL,MAJOR,10,"cert,cwe,redundant,suspicious",,,java:S2589,java,Boolean expressions should not be gratuitous,2023-02-21T15:21:13+0000,"<p>If a boolean expression doesn’t change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer’s intent, then it’s a bug and the expression should be fixed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = true;\nif (a) { // Noncompliant\n  doSomething();\n}\nif (b &amp;&amp; a) { // Noncompliant; ""a"" is always ""true""\n  doSomething();\n}\nif (c || !a) { // Noncompliant; ""!a"" is always ""false""\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = true;\nif (foo(a)) {\n  doSomething();\n}\nif (b) {\n  doSomething();\n}\nif (c) {\n  doSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/571"">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/570"">MITRE, CWE-570</a> - Expression is Always False </li>\n</ul>","<p>If a boolean expression doesn’t change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer’s intent, then it’s a bug and the expression should be fixed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = true;\nif (a) { // Noncompliant\n  doSomething();\n}\nif (b &amp;&amp; a) { // Noncompliant; ""a"" is always ""true""\n  doSomething();\n}\nif (c || !a) { // Noncompliant; ""!a"" is always ""false""\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = true;\nif (foo(a)) {\n  doSomething();\n}\nif (b) {\n  doSomething();\n}\nif (c) {\n  doSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/571"">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/570"">MITRE, CWE-570</a> - Expression is Always False </li>\n</ul>",MAJOR,READY,false,,"cert,cwe,redundant,suspicious",java,Java,[],CODE_SMELL,false,ALL,false,"[{""key"":""default"",""content"":""<p>If a boolean expression doesn’t change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer’s intent, then it’s a bug and the expression should be fixed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = true;\nif (a) { // Noncompliant\n  doSomething();\n}\n\nif (b &amp;&amp; a) { // Noncompliant; \""a\"" is always \""true\""\n  doSomething();\n}\n\nif (c || !a) { // Noncompliant; \""!a\"" is always \""false\""\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = true;\nif (foo(a)) {\n  doSomething();\n}\n\nif (b) {\n  doSomething();\n}\n\nif (c) {\n  doSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\""https://cwe.mitre.org/data/definitions/571\"">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=\""https://cwe.mitre.org/data/definitions/570\"">MITRE, CWE-570</a> - Expression is Always False </li>\n</ul>""}]",[]
AYeTkVLrf3tdOjSTH2wc,java-gradle-sonar-local,main,src/main/java/fr/parisnanterre/pascalpoizat/templates/javaproject/Principal.java,53,"Remove this expression which always evaluates to ""true""",OPEN,,2023-04-18T08:52:51+0000,2023-06-28T10:02:59+0000,java:S2589,[object Object],CODE_SMELL,MAJOR,10,"cert,cwe,redundant,suspicious",,,java:S2589,java,Boolean expressions should not be gratuitous,2023-02-21T15:21:13+0000,"<p>If a boolean expression doesn’t change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer’s intent, then it’s a bug and the expression should be fixed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = true;\nif (a) { // Noncompliant\n  doSomething();\n}\nif (b &amp;&amp; a) { // Noncompliant; ""a"" is always ""true""\n  doSomething();\n}\nif (c || !a) { // Noncompliant; ""!a"" is always ""false""\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = true;\nif (foo(a)) {\n  doSomething();\n}\nif (b) {\n  doSomething();\n}\nif (c) {\n  doSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/571"">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/570"">MITRE, CWE-570</a> - Expression is Always False </li>\n</ul>","<p>If a boolean expression doesn’t change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer’s intent, then it’s a bug and the expression should be fixed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = true;\nif (a) { // Noncompliant\n  doSomething();\n}\nif (b &amp;&amp; a) { // Noncompliant; ""a"" is always ""true""\n  doSomething();\n}\nif (c || !a) { // Noncompliant; ""!a"" is always ""false""\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = true;\nif (foo(a)) {\n  doSomething();\n}\nif (b) {\n  doSomething();\n}\nif (c) {\n  doSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/571"">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/570"">MITRE, CWE-570</a> - Expression is Always False </li>\n</ul>",MAJOR,READY,false,,"cert,cwe,redundant,suspicious",java,Java,[],CODE_SMELL,false,ALL,false,"[{""key"":""default"",""content"":""<p>If a boolean expression doesn’t change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer’s intent, then it’s a bug and the expression should be fixed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = true;\nif (a) { // Noncompliant\n  doSomething();\n}\n\nif (b &amp;&amp; a) { // Noncompliant; \""a\"" is always \""true\""\n  doSomething();\n}\n\nif (c || !a) { // Noncompliant; \""!a\"" is always \""false\""\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = true;\nif (foo(a)) {\n  doSomething();\n}\n\nif (b) {\n  doSomething();\n}\n\nif (c) {\n  doSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\""https://cwe.mitre.org/data/definitions/571\"">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=\""https://cwe.mitre.org/data/definitions/570\"">MITRE, CWE-570</a> - Expression is Always False </li>\n</ul>""}]",[]
AYeTkVLrf3tdOjSTH2wi,java-gradle-sonar-local,main,src/main/java/fr/parisnanterre/pascalpoizat/templates/javaproject/Principal.java,53,Remove the unnecessary boolean literal.,OPEN,,2023-04-18T08:52:51+0000,2023-06-28T10:03:12+0000,java:S1125,[object Object],CODE_SMELL,MINOR,5,clumsy,,,java:S1125,java,Boolean literals should not be redundant,2023-02-21T15:21:13+0000,<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (booleanMethod() == true) { /* ... */ }\nif (booleanMethod() == false) { /* ... */ }\nif (booleanMethod() || false) { /* ... */ }\ndoSomething(!false);\ndoSomething(booleanMethod() == true);\nbooleanVariable = booleanMethod() ? true : false;\nbooleanVariable = booleanMethod() ? true : exp;\nbooleanVariable = booleanMethod() ? false : exp;\nbooleanVariable = booleanMethod() ? exp : true;\nbooleanVariable = booleanMethod() ? exp : false;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (booleanMethod()) { /* ... */ }\nif (!booleanMethod()) { /* ... */ }\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\ndoSomething(booleanMethod());\nbooleanVariable = booleanMethod();\nbooleanVariable = booleanMethod() || exp;\nbooleanVariable = !booleanMethod() &amp;&amp; exp;\nbooleanVariable = !booleanMethod() || exp;\nbooleanVariable = booleanMethod() &amp;&amp; exp;\n</pre>,<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (booleanMethod() == true) { /* ... */ }\nif (booleanMethod() == false) { /* ... */ }\nif (booleanMethod() || false) { /* ... */ }\ndoSomething(!false);\ndoSomething(booleanMethod() == true);\nbooleanVariable = booleanMethod() ? true : false;\nbooleanVariable = booleanMethod() ? true : exp;\nbooleanVariable = booleanMethod() ? false : exp;\nbooleanVariable = booleanMethod() ? exp : true;\nbooleanVariable = booleanMethod() ? exp : false;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (booleanMethod()) { /* ... */ }\nif (!booleanMethod()) { /* ... */ }\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\ndoSomething(booleanMethod());\nbooleanVariable = booleanMethod();\nbooleanVariable = booleanMethod() || exp;\nbooleanVariable = !booleanMethod() &amp;&amp; exp;\nbooleanVariable = !booleanMethod() || exp;\nbooleanVariable = booleanMethod() &amp;&amp; exp;\n</pre>,MINOR,READY,false,,clumsy,java,Java,[],CODE_SMELL,false,ALL,false,"[{""key"":""default"",""content"":""<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (booleanMethod() == true) { /* ... */ }\nif (booleanMethod() == false) { /* ... */ }\nif (booleanMethod() || false) { /* ... */ }\ndoSomething(!false);\ndoSomething(booleanMethod() == true);\n\nbooleanVariable = booleanMethod() ? true : false;\nbooleanVariable = booleanMethod() ? true : exp;\nbooleanVariable = booleanMethod() ? false : exp;\nbooleanVariable = booleanMethod() ? exp : true;\nbooleanVariable = booleanMethod() ? exp : false;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (booleanMethod()) { /* ... */ }\nif (!booleanMethod()) { /* ... */ }\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\ndoSomething(booleanMethod());\n\nbooleanVariable = booleanMethod();\nbooleanVariable = booleanMethod() || exp;\nbooleanVariable = !booleanMethod() &amp;&amp; exp;\nbooleanVariable = !booleanMethod() || exp;\nbooleanVariable = booleanMethod() &amp;&amp; exp;\n</pre>""}]",[]
AYeTkVLrf3tdOjSTH2wk,java-gradle-sonar-local,main,src/main/java/fr/parisnanterre/pascalpoizat/templates/javaproject/Principal.java,53,Remove the unnecessary boolean literals.,OPEN,,2023-04-18T08:52:51+0000,2023-06-28T10:03:34+0000,java:S1125,[object Object],CODE_SMELL,MINOR,5,clumsy,,,java:S1125,java,Boolean literals should not be redundant,2023-02-21T15:21:13+0000,<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (booleanMethod() == true) { /* ... */ }\nif (booleanMethod() == false) { /* ... */ }\nif (booleanMethod() || false) { /* ... */ }\ndoSomething(!false);\ndoSomething(booleanMethod() == true);\nbooleanVariable = booleanMethod() ? true : false;\nbooleanVariable = booleanMethod() ? true : exp;\nbooleanVariable = booleanMethod() ? false : exp;\nbooleanVariable = booleanMethod() ? exp : true;\nbooleanVariable = booleanMethod() ? exp : false;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (booleanMethod()) { /* ... */ }\nif (!booleanMethod()) { /* ... */ }\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\ndoSomething(booleanMethod());\nbooleanVariable = booleanMethod();\nbooleanVariable = booleanMethod() || exp;\nbooleanVariable = !booleanMethod() &amp;&amp; exp;\nbooleanVariable = !booleanMethod() || exp;\nbooleanVariable = booleanMethod() &amp;&amp; exp;\n</pre>,<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (booleanMethod() == true) { /* ... */ }\nif (booleanMethod() == false) { /* ... */ }\nif (booleanMethod() || false) { /* ... */ }\ndoSomething(!false);\ndoSomething(booleanMethod() == true);\nbooleanVariable = booleanMethod() ? true : false;\nbooleanVariable = booleanMethod() ? true : exp;\nbooleanVariable = booleanMethod() ? false : exp;\nbooleanVariable = booleanMethod() ? exp : true;\nbooleanVariable = booleanMethod() ? exp : false;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (booleanMethod()) { /* ... */ }\nif (!booleanMethod()) { /* ... */ }\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\ndoSomething(booleanMethod());\nbooleanVariable = booleanMethod();\nbooleanVariable = booleanMethod() || exp;\nbooleanVariable = !booleanMethod() &amp;&amp; exp;\nbooleanVariable = !booleanMethod() || exp;\nbooleanVariable = booleanMethod() &amp;&amp; exp;\n</pre>,MINOR,READY,false,,clumsy,java,Java,[],CODE_SMELL,false,ALL,false,"[{""key"":""default"",""content"":""<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (booleanMethod() == true) { /* ... */ }\nif (booleanMethod() == false) { /* ... */ }\nif (booleanMethod() || false) { /* ... */ }\ndoSomething(!false);\ndoSomething(booleanMethod() == true);\n\nbooleanVariable = booleanMethod() ? true : false;\nbooleanVariable = booleanMethod() ? true : exp;\nbooleanVariable = booleanMethod() ? false : exp;\nbooleanVariable = booleanMethod() ? exp : true;\nbooleanVariable = booleanMethod() ? exp : false;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (booleanMethod()) { /* ... */ }\nif (!booleanMethod()) { /* ... */ }\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\ndoSomething(booleanMethod());\n\nbooleanVariable = booleanMethod();\nbooleanVariable = booleanMethod() || exp;\nbooleanVariable = !booleanMethod() &amp;&amp; exp;\nbooleanVariable = !booleanMethod() || exp;\nbooleanVariable = booleanMethod() &amp;&amp; exp;\n</pre>""}]",[]
AYeTkVLrf3tdOjSTH2wl,java-gradle-sonar-local,main,src/main/java/fr/parisnanterre/pascalpoizat/templates/javaproject/Principal.java,53,Remove the unnecessary boolean literals.,OPEN,,2023-04-18T08:52:51+0000,2023-06-28T10:03:48+0000,java:S1125,[object Object],CODE_SMELL,MINOR,5,clumsy,,,java:S1125,java,Boolean literals should not be redundant,2023-02-21T15:21:13+0000,<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (booleanMethod() == true) { /* ... */ }\nif (booleanMethod() == false) { /* ... */ }\nif (booleanMethod() || false) { /* ... */ }\ndoSomething(!false);\ndoSomething(booleanMethod() == true);\nbooleanVariable = booleanMethod() ? true : false;\nbooleanVariable = booleanMethod() ? true : exp;\nbooleanVariable = booleanMethod() ? false : exp;\nbooleanVariable = booleanMethod() ? exp : true;\nbooleanVariable = booleanMethod() ? exp : false;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (booleanMethod()) { /* ... */ }\nif (!booleanMethod()) { /* ... */ }\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\ndoSomething(booleanMethod());\nbooleanVariable = booleanMethod();\nbooleanVariable = booleanMethod() || exp;\nbooleanVariable = !booleanMethod() &amp;&amp; exp;\nbooleanVariable = !booleanMethod() || exp;\nbooleanVariable = booleanMethod() &amp;&amp; exp;\n</pre>,<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (booleanMethod() == true) { /* ... */ }\nif (booleanMethod() == false) { /* ... */ }\nif (booleanMethod() || false) { /* ... */ }\ndoSomething(!false);\ndoSomething(booleanMethod() == true);\nbooleanVariable = booleanMethod() ? true : false;\nbooleanVariable = booleanMethod() ? true : exp;\nbooleanVariable = booleanMethod() ? false : exp;\nbooleanVariable = booleanMethod() ? exp : true;\nbooleanVariable = booleanMethod() ? exp : false;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (booleanMethod()) { /* ... */ }\nif (!booleanMethod()) { /* ... */ }\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\ndoSomething(booleanMethod());\nbooleanVariable = booleanMethod();\nbooleanVariable = booleanMethod() || exp;\nbooleanVariable = !booleanMethod() &amp;&amp; exp;\nbooleanVariable = !booleanMethod() || exp;\nbooleanVariable = booleanMethod() &amp;&amp; exp;\n</pre>,MINOR,READY,false,,clumsy,java,Java,[],CODE_SMELL,false,ALL,false,"[{""key"":""default"",""content"":""<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (booleanMethod() == true) { /* ... */ }\nif (booleanMethod() == false) { /* ... */ }\nif (booleanMethod() || false) { /* ... */ }\ndoSomething(!false);\ndoSomething(booleanMethod() == true);\n\nbooleanVariable = booleanMethod() ? true : false;\nbooleanVariable = booleanMethod() ? true : exp;\nbooleanVariable = booleanMethod() ? false : exp;\nbooleanVariable = booleanMethod() ? exp : true;\nbooleanVariable = booleanMethod() ? exp : false;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (booleanMethod()) { /* ... */ }\nif (!booleanMethod()) { /* ... */ }\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\ndoSomething(booleanMethod());\n\nbooleanVariable = booleanMethod();\nbooleanVariable = booleanMethod() || exp;\nbooleanVariable = !booleanMethod() &amp;&amp; exp;\nbooleanVariable = !booleanMethod() || exp;\nbooleanVariable = booleanMethod() &amp;&amp; exp;\n</pre>""}]",[]
AYeTkVLqf3tdOjSTH2wY,java-gradle-sonar-local,main,src/main/java/fr/parisnanterre/pascalpoizat/templates/javaproject/Principal.java,43,"Define a constant instead of duplicating this literal ""Non Compliant"" 4 times.",OPEN,,2023-04-18T08:52:51+0000,2023-06-28T10:01:21+0000,java:S1192,[object Object],CODE_SMELL,CRITICAL,10,design,,,java:S1192,java,String literals should not be duplicated,2023-02-21T15:21:12+0000,"<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>\n<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\npublic void run() {\n  prepare(""action1"");                              // Noncompliant - ""action1"" is duplicated 3 times\n  execute(""action1"");\n  release(""action1"");\n}\n@SuppressWarning(""all"")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(""all"")\nprivate void method2() { /* ... */ }\npublic String method3(String a) {\n  System.out.println(""'"" + a + ""'"");               // Compliant - literal ""'"" has less than 5 characters and is excluded\n  return """";                                       // Compliant - literal """" has less than 5 characters and is excluded\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate static final String ACTION_1 = ""action1"";  // Compliant\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n<h2>Exceptions</h2>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>","<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>\n<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\npublic void run() {\n  prepare(""action1"");                              // Noncompliant - ""action1"" is duplicated 3 times\n  execute(""action1"");\n  release(""action1"");\n}\n@SuppressWarning(""all"")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(""all"")\nprivate void method2() { /* ... */ }\npublic String method3(String a) {\n  System.out.println(""'"" + a + ""'"");               // Compliant - literal ""'"" has less than 5 characters and is excluded\n  return """";                                       // Compliant - literal """" has less than 5 characters and is excluded\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate static final String ACTION_1 = ""action1"";  // Compliant\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n<h2>Exceptions</h2>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>",CRITICAL,READY,false,,design,java,Java,"[{""key"":""threshold"",""htmlDesc"":""Number of times a literal must be duplicated to trigger an issue"",""defaultValue"":""3"",""type"":""INTEGER""}]",CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>\n<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\npublic void run() {\n  prepare(\""action1\"");                              // Noncompliant - \""action1\"" is duplicated 3 times\n  execute(\""action1\"");\n  release(\""action1\"");\n}\n\n@SuppressWarning(\""all\"")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(\""all\"")\nprivate void method2() { /* ... */ }\n\npublic String method3(String a) {\n  System.out.println(\""'\"" + a + \""'\"");               // Compliant - literal \""'\"" has less than 5 characters and is excluded\n  return \""\"";                                       // Compliant - literal \""\"" has less than 5 characters and is excluded\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate static final String ACTION_1 = \""action1\"";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n<h2>Exceptions</h2>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>""}]",[]
AYeTkVLrf3tdOjSTH2wd,java-gradle-sonar-local,main,src/main/java/fr/parisnanterre/pascalpoizat/templates/javaproject/Principal.java,41,Remove this conditional structure or edit its code blocks so that they're not all the same.,OPEN,,2023-04-18T08:52:51+0000,2023-06-28T10:00:49+0000,java:S3923,[object Object],BUG,MAJOR,15,,,,java:S3923,java,All branches in a conditional structure should not have exactly the same implementation,2023-02-21T15:21:12+0000,"<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made\nand something different should be executed, or there shouldn’t be a <code>switch</code>/<code>if</code> chain at all.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (b == 0) {  // Noncompliant\n  doOneMoreThing();\n} else {\n  doOneMoreThing();\n}\nint b = a &gt; 12 ? 4 : 4;  // Noncompliant\nswitch (i) {  // Noncompliant\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomething();\n    break;\n  case 3:\n    doSomething();\n    break;\n  default:\n    doSomething();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without <code>default</code>\nclauses.</p>\n<pre>\nif(b == 0) {    //no issue, this could have been done on purpose to make the code more readable\n  doSomething();\n} else if(b == 1) {\n  doSomething();\n}\n</pre>","<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made\nand something different should be executed, or there shouldn’t be a <code>switch</code>/<code>if</code> chain at all.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (b == 0) {  // Noncompliant\n  doOneMoreThing();\n} else {\n  doOneMoreThing();\n}\nint b = a &gt; 12 ? 4 : 4;  // Noncompliant\nswitch (i) {  // Noncompliant\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomething();\n    break;\n  case 3:\n    doSomething();\n    break;\n  default:\n    doSomething();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without <code>default</code>\nclauses.</p>\n<pre>\nif(b == 0) {    //no issue, this could have been done on purpose to make the code more readable\n  doSomething();\n} else if(b == 1) {\n  doSomething();\n}\n</pre>",MAJOR,READY,false,,,java,Java,[],BUG,false,ALL,false,"[{""key"":""default"",""content"":""<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made\nand something different should be executed, or there shouldn’t be a <code>switch</code>/<code>if</code> chain at all.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (b == 0) {  // Noncompliant\n  doOneMoreThing();\n} else {\n  doOneMoreThing();\n}\n\nint b = a &gt; 12 ? 4 : 4;  // Noncompliant\n\nswitch (i) {  // Noncompliant\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomething();\n    break;\n  case 3:\n    doSomething();\n    break;\n  default:\n    doSomething();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without <code>default</code>\nclauses.</p>\n<pre>\nif(b == 0) {    //no issue, this could have been done on purpose to make the code more readable\n  doSomething();\n} else if(b == 1) {\n  doSomething();\n}\n</pre>""}]",[]
AYeTkVLrf3tdOjSTH2wj,java-gradle-sonar-local,main,src/main/java/fr/parisnanterre/pascalpoizat/templates/javaproject/Principal.java,53,"Correct one of the identical sub-expressions on both sides of operator ""||""",OPEN,,2023-04-18T08:52:51+0000,2023-06-28T10:03:24+0000,java:S1764,[object Object],BUG,MAJOR,2,cert,,,java:S1764,java,Identical expressions should not be used on both sides of a binary operator,2023-02-21T15:21:13+0000,"<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( a == a ) { // always true\n  doZ();\n}\nif ( a != a ) { // always false\n  doY();\n}\nif ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too\n  doX();\n}\nif ( a == b || a == b ) { // if the first one is true, the second one is too\n  doW();\n}\nint j = 5 / 5; //always 1\nint k = 5 - 5; //always 0\nc.equals(c); //always true\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </li>\n  <li> The specific case of testing a floating point value against itself is a valid test for <code>NaN</code> and is therefore ignored. </li>\n  <li> Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored. </li>\n</ul>\n<pre>\nfloat f;\nif(f != f) { //test for NaN value\n  System.out.println(""f is NaN"");\n}\nint i = 1 &lt;&lt; 1; // Compliant\nint j = a &lt;&lt; a; // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/5dUxBQ"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n  </li>\n  <li> <a href='/coding_rules#rule_key=java%3AS1656'>S1656</a> - Implements a check on <code>=</code>. </li>\n</ul>","<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( a == a ) { // always true\n  doZ();\n}\nif ( a != a ) { // always false\n  doY();\n}\nif ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too\n  doX();\n}\nif ( a == b || a == b ) { // if the first one is true, the second one is too\n  doW();\n}\nint j = 5 / 5; //always 1\nint k = 5 - 5; //always 0\nc.equals(c); //always true\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </li>\n  <li> The specific case of testing a floating point value against itself is a valid test for <code>NaN</code> and is therefore ignored. </li>\n  <li> Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored. </li>\n</ul>\n<pre>\nfloat f;\nif(f != f) { //test for NaN value\n  System.out.println(""f is NaN"");\n}\nint i = 1 &lt;&lt; 1; // Compliant\nint j = a &lt;&lt; a; // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/5dUxBQ"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n  </li>\n  <li> <a href='/coding_rules#rule_key=java%3AS1656'>S1656</a> - Implements a check on <code>=</code>. </li>\n</ul>",MAJOR,READY,false,,cert,java,Java,[],BUG,false,ALL,false,"[{""key"":""default"",""content"":""<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( a == a ) { // always true\n  doZ();\n}\nif ( a != a ) { // always false\n  doY();\n}\nif ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too\n  doX();\n}\nif ( a == b || a == b ) { // if the first one is true, the second one is too\n  doW();\n}\n\nint j = 5 / 5; //always 1\nint k = 5 - 5; //always 0\n\nc.equals(c); //always true\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </li>\n  <li> The specific case of testing a floating point value against itself is a valid test for <code>NaN</code> and is therefore ignored. </li>\n  <li> Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored. </li>\n</ul>\n<pre>\nfloat f;\nif(f != f) { //test for NaN value\n  System.out.println(\""f is NaN\"");\n}\n\nint i = 1 &lt;&lt; 1; // Compliant\nint j = a &lt;&lt; a; // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\""https://wiki.sei.cmu.edu/confluence/x/5dUxBQ\"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n  </li>\n  <li> <a href='/coding_rules#rule_key=java%3AS1656'>S1656</a> - Implements a check on <code>=</code>. </li>\n</ul>""}]",[]
AYeTkVLrf3tdOjSTH2wm,java-gradle-sonar-local,main,src/main/java/fr/parisnanterre/pascalpoizat/templates/javaproject/Principal.java,54,Replace this use of System.out or System.err by a logger.,OPEN,,2023-04-18T08:52:51+0000,2023-06-28T10:04:01+0000,java:S106,[object Object],CODE_SMELL,MAJOR,10,"bad-practice,cert,owasp-a3",,,java:S106,java,Standard outputs should not be used directly to log anything,2023-02-21T15:21:12+0000,"<p>When logging a message there are several important requirements which must be fulfilled:</p>\n<ul>\n  <li> The user must be able to easily retrieve the logs </li>\n  <li> The format of all logged message must be uniform to allow the user to easily read the log </li>\n  <li> Logged data must actually be recorded </li>\n  <li> Sensitive data must only be logged securely </li>\n</ul>\n<p>If a program directly writes to the standard outputs, there is absolutely no way to comply with those requirements. That’s why defining and using a\ndedicated logger is highly recommended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSystem.out.println(""My Message"");  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlogger.log(""My Message"");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/"">OWASP Top 10 2021 Category A9</a> - Security Logging and\n  Monitoring Failures </li>\n  <li> <a href=""https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure"">OWASP Top 10 2017 Category A3</a> - Sensitive Data\n  Exposure </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/nzdGBQ"">CERT, ERR02-J.</a> - Prevent exceptions while logging data </li>\n</ul>","<p>When logging a message there are several important requirements which must be fulfilled:</p>\n<ul>\n  <li> The user must be able to easily retrieve the logs </li>\n  <li> The format of all logged message must be uniform to allow the user to easily read the log </li>\n  <li> Logged data must actually be recorded </li>\n  <li> Sensitive data must only be logged securely </li>\n</ul>\n<p>If a program directly writes to the standard outputs, there is absolutely no way to comply with those requirements. That’s why defining and using a\ndedicated logger is highly recommended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSystem.out.println(""My Message"");  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlogger.log(""My Message"");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/"">OWASP Top 10 2021 Category A9</a> - Security Logging and\n  Monitoring Failures </li>\n  <li> <a href=""https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure"">OWASP Top 10 2017 Category A3</a> - Sensitive Data\n  Exposure </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/nzdGBQ"">CERT, ERR02-J.</a> - Prevent exceptions while logging data </li>\n</ul>",MAJOR,READY,false,,"bad-practice,cert,owasp-a3",java,Java,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>When logging a message there are several important requirements which must be fulfilled:</p>\n<ul>\n  <li> The user must be able to easily retrieve the logs </li>\n  <li> The format of all logged message must be uniform to allow the user to easily read the log </li>\n  <li> Logged data must actually be recorded </li>\n  <li> Sensitive data must only be logged securely </li>\n</ul>\n<p>If a program directly writes to the standard outputs, there is absolutely no way to comply with those requirements. That’s why defining and using a\ndedicated logger is highly recommended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSystem.out.println(\""My Message\"");  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlogger.log(\""My Message\"");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\""https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\"">OWASP Top 10 2021 Category A9</a> - Security Logging and\n  Monitoring Failures </li>\n  <li> <a href=\""https://www.owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure\"">OWASP Top 10 2017 Category A3</a> - Sensitive Data\n  Exposure </li>\n  <li> <a href=\""https://wiki.sei.cmu.edu/confluence/x/nzdGBQ\"">CERT, ERR02-J.</a> - Prevent exceptions while logging data </li>\n</ul>""}]",[]
AYbrSM6trCZoby-g10wW,sonarsource-cfamily-examples_linux-cmake-gitlab-ci-sq,main,src/main.cpp,8,"Use the init-statement to declare ""num"" inside the if statement.",OPEN,joshua.quek.fullstack@gmail.com,2023-03-16T16:15:23+0000,2023-06-29T13:17:07+0000,cpp:S6004,[object Object],CODE_SMELL,MINOR,2,"clumsy,since-c++17",,,cpp:S6004,cpp,"""if"",""switch"", and range-based for loop initializer should be used to reduce scope of variables",2023-02-21T15:21:18+0000,"<p>C++17 introduced a construct to create and initialize a variable within the condition of <code>if</code> and <code>switch</code> statements and\nC++20 added this construct to range-based <code>for</code> loops. Using this new feature simplifies common code patterns and helps in giving variables\nthe right scope.</p>\n<p>Previously, variables were either declared before the statement, hence leaked into the ambient scope, or an explicit scope was used to keep the\nscope tight, especially when using RAII objects. This was inconvenient as it would lead to error-prone patterns.</p>\n<p>For example, this verbose error-prone initialization:</p>\n<pre>\nbool error_prone_init() {\n  { // explicit scope\n    std::unique_lock&lt;std::mutex&gt; lock(mtx, std::try_to_lock);\n    if (lock.owns_lock()) {\n       //...\n     }\n  } // mutex unlock\n  // ... code\n  return true;\n}\n</pre>\n<p>can now be replaced by the following code, which is safer and more readable:</p>\n<pre>\nbool better_init() {\n  if (std::unique_lock&lt;std::mutex&gt; lock(mtx, std::try_to_lock); lock.owns_lock()) {\n     //...\n  } // mutex unlock\n  // ... code\n  return true;\n}\n</pre>\n<p>This rule raises an issue when:</p>\n<ul>\n  <li> a variable is declared just before a statement that allows variable declaration (<code>if</code>, <code>switch</code>, or, starting C++20,\n  range-based <code>for</code> loop), </li>\n  <li> this variable is used in the statement header, </li>\n  <li> there are other statements after this statement where this variable might be used, </li>\n  <li> yet, it is never used after the statement. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid handle(std::string_view s);\nvoid ifStatement() {\n  std::map&lt;int, std::string&gt; m;\n  int key = 1;\n  std::string value = ""str1"";\n  auto [it, inserted] = m.try_emplace(key, value); // Noncompliant\n  if (!inserted) {\n    std::cout &lt;&lt; ""Already registered"";\n  } else {\n    handle(it-&gt;second);\n  }\n  process(m);\n}\n</pre>\n<pre>\nenum class State { True, False, Maybe, MaybeNot };\nstd::pair&lt;std::string, State&gt; getStatePair();\nvoid switchStatement() {\n  auto state = getStatePair(); // Noncompliant\n  switch (state.second) {\n    case State::True:\n    case State::Maybe:\n      std::cout &lt;&lt; state.first;\n      break;\n    case State::False:\n    case State::MaybeNot:\n      std::cout &lt;&lt; ""No"";\n      break;\n  }\n  std::cout &lt;&lt; ""\n"";\n}\n</pre>\n<pre>\nstd::vector&lt;std::vector&lt;int&gt;&gt; getTable();\nvoid printHeadersBad() {\n  auto rows = getTable(); // Noncompliant in C++20: rows is accessible outside of the loop\n  for (int x : rows[0]) {\n    std::cout &lt;&lt; x &lt;&lt;' ';\n  }\n  std::cout &lt;&lt; ""\n"";\n}\n</pre>\n<p>Using a temporary to avoid leaking of the variable into the ambient scope creates a bigger problem: an undefined behavior. Even though the lifetime\nof a temporary returned by the range expression is extended, the life of a temporary within the range expression terminates before the loop begins to\nexecute.</p>\n<pre>\nstd::vector&lt;std::vector&lt;int&gt;&gt; getTable();\nvoid printHeadersWorse() {\n  for (int x : getTable()[0]) { // Undefined behavior: return value of getTable() no longer exists in the loop body\n    std::cout &lt;&lt; x &lt;&lt;' ';\n  }\n  std::cout &lt;&lt; ""\n"";\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid handle(std::string_view s);\nvoid ifStatement() {\n  std::map&lt;int, std::string&gt; m;\n  int key = 1;\n  std::string value = ""str1"";\n  if (auto [it, inserted] = m.try_emplace(key, value); !inserted) { // Compliant\n    std::cout &lt;&lt; ""Already registered"";\n  } else {\n    handle(it-&gt;second);\n  }\n  process(m);\n}\nenum class State { True, False, Maybe, MaybeNot };\nstd::pair&lt;std::string, State&gt; getStatePair();\nvoid switchStatement() {\n  switch (auto state = getStatePair(); state.second) { // Compliant\n    case State::True:\n    case State::Maybe:\n      std::cout &lt;&lt; state.first;\n      break;\n    case State::False:\n    case State::MaybeNot:\n      std::cout &lt;&lt; ""No"";\n      break;\n  }\n  std::cout &lt;&lt; ""\n"";\n}\nstd::vector&lt;std::vector&lt;int&gt;&gt; getTable();\nvoid printHeadersGood() {\n  // Compliant: rows is accessible only inside the loop (this code requires at least C++20)\n  for (auto rows = getTable(); int x : table[0]) {\n    std::cout &lt;&lt; x &lt;&lt;' ';\n  }\n  std::cout &lt;&lt; ""\n"";\n}\n</pre>\n<h2>Exceptions</h2>\n<p>While an <code>if</code> with both an initializer and a condition variable is valid, it is confusing. The rule does not raise an issue if the\n<code>if</code> statement already has a condition variable:</p>\n<pre>\nvoid confusing() {\n  if (int a = 42; std::optional&lt;int&gt; b = lookup(a)) { // Valid but confusing\n    // ...\n  }\n}\nvoid exception() {\n  int a = 42; // Compliant by exception\n  if (std::optional&lt;int&gt; b = lookup(a)) {\n    // ...\n  }\n}\n</pre>","<p>C++17 introduced a construct to create and initialize a variable within the condition of <code>if</code> and <code>switch</code> statements and\nC++20 added this construct to range-based <code>for</code> loops. Using this new feature simplifies common code patterns and helps in giving variables\nthe right scope.</p>\n<p>Previously, variables were either declared before the statement, hence leaked into the ambient scope, or an explicit scope was used to keep the\nscope tight, especially when using RAII objects. This was inconvenient as it would lead to error-prone patterns.</p>\n<p>For example, this verbose error-prone initialization:</p>\n<pre>\nbool error_prone_init() {\n  { // explicit scope\n    std::unique_lock&lt;std::mutex&gt; lock(mtx, std::try_to_lock);\n    if (lock.owns_lock()) {\n       //...\n     }\n  } // mutex unlock\n  // ... code\n  return true;\n}\n</pre>\n<p>can now be replaced by the following code, which is safer and more readable:</p>\n<pre>\nbool better_init() {\n  if (std::unique_lock&lt;std::mutex&gt; lock(mtx, std::try_to_lock); lock.owns_lock()) {\n     //...\n  } // mutex unlock\n  // ... code\n  return true;\n}\n</pre>\n<p>This rule raises an issue when:</p>\n<ul>\n  <li> a variable is declared just before a statement that allows variable declaration (<code>if</code>, <code>switch</code>, or, starting C++20,\n  range-based <code>for</code> loop), </li>\n  <li> this variable is used in the statement header, </li>\n  <li> there are other statements after this statement where this variable might be used, </li>\n  <li> yet, it is never used after the statement. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid handle(std::string_view s);\nvoid ifStatement() {\n  std::map&lt;int, std::string&gt; m;\n  int key = 1;\n  std::string value = ""str1"";\n  auto [it, inserted] = m.try_emplace(key, value); // Noncompliant\n  if (!inserted) {\n    std::cout &lt;&lt; ""Already registered"";\n  } else {\n    handle(it-&gt;second);\n  }\n  process(m);\n}\n</pre>\n<pre>\nenum class State { True, False, Maybe, MaybeNot };\nstd::pair&lt;std::string, State&gt; getStatePair();\nvoid switchStatement() {\n  auto state = getStatePair(); // Noncompliant\n  switch (state.second) {\n    case State::True:\n    case State::Maybe:\n      std::cout &lt;&lt; state.first;\n      break;\n    case State::False:\n    case State::MaybeNot:\n      std::cout &lt;&lt; ""No"";\n      break;\n  }\n  std::cout &lt;&lt; ""\n"";\n}\n</pre>\n<pre>\nstd::vector&lt;std::vector&lt;int&gt;&gt; getTable();\nvoid printHeadersBad() {\n  auto rows = getTable(); // Noncompliant in C++20: rows is accessible outside of the loop\n  for (int x : rows[0]) {\n    std::cout &lt;&lt; x &lt;&lt;' ';\n  }\n  std::cout &lt;&lt; ""\n"";\n}\n</pre>\n<p>Using a temporary to avoid leaking of the variable into the ambient scope creates a bigger problem: an undefined behavior. Even though the lifetime\nof a temporary returned by the range expression is extended, the life of a temporary within the range expression terminates before the loop begins to\nexecute.</p>\n<pre>\nstd::vector&lt;std::vector&lt;int&gt;&gt; getTable();\nvoid printHeadersWorse() {\n  for (int x : getTable()[0]) { // Undefined behavior: return value of getTable() no longer exists in the loop body\n    std::cout &lt;&lt; x &lt;&lt;' ';\n  }\n  std::cout &lt;&lt; ""\n"";\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid handle(std::string_view s);\nvoid ifStatement() {\n  std::map&lt;int, std::string&gt; m;\n  int key = 1;\n  std::string value = ""str1"";\n  if (auto [it, inserted] = m.try_emplace(key, value); !inserted) { // Compliant\n    std::cout &lt;&lt; ""Already registered"";\n  } else {\n    handle(it-&gt;second);\n  }\n  process(m);\n}\nenum class State { True, False, Maybe, MaybeNot };\nstd::pair&lt;std::string, State&gt; getStatePair();\nvoid switchStatement() {\n  switch (auto state = getStatePair(); state.second) { // Compliant\n    case State::True:\n    case State::Maybe:\n      std::cout &lt;&lt; state.first;\n      break;\n    case State::False:\n    case State::MaybeNot:\n      std::cout &lt;&lt; ""No"";\n      break;\n  }\n  std::cout &lt;&lt; ""\n"";\n}\nstd::vector&lt;std::vector&lt;int&gt;&gt; getTable();\nvoid printHeadersGood() {\n  // Compliant: rows is accessible only inside the loop (this code requires at least C++20)\n  for (auto rows = getTable(); int x : table[0]) {\n    std::cout &lt;&lt; x &lt;&lt;' ';\n  }\n  std::cout &lt;&lt; ""\n"";\n}\n</pre>\n<h2>Exceptions</h2>\n<p>While an <code>if</code> with both an initializer and a condition variable is valid, it is confusing. The rule does not raise an issue if the\n<code>if</code> statement already has a condition variable:</p>\n<pre>\nvoid confusing() {\n  if (int a = 42; std::optional&lt;int&gt; b = lookup(a)) { // Valid but confusing\n    // ...\n  }\n}\nvoid exception() {\n  int a = 42; // Compliant by exception\n  if (std::optional&lt;int&gt; b = lookup(a)) {\n    // ...\n  }\n}\n</pre>",MINOR,READY,false,,"clumsy,since-c++17",cpp,C++,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>C++17 introduced a construct to create and initialize a variable within the condition of <code>if</code> and <code>switch</code> statements and\nC++20 added this construct to range-based <code>for</code> loops. Using this new feature simplifies common code patterns and helps in giving variables\nthe right scope.</p>\n<p>Previously, variables were either declared before the statement, hence leaked into the ambient scope, or an explicit scope was used to keep the\nscope tight, especially when using RAII objects. This was inconvenient as it would lead to error-prone patterns.</p>\n<p>For example, this verbose error-prone initialization:</p>\n<pre>\nbool error_prone_init() {\n  { // explicit scope\n    std::unique_lock&lt;std::mutex&gt; lock(mtx, std::try_to_lock);\n    if (lock.owns_lock()) {\n       //...\n     }\n  } // mutex unlock\n  // ... code\n  return true;\n}\n</pre>\n<p>can now be replaced by the following code, which is safer and more readable:</p>\n<pre>\nbool better_init() {\n  if (std::unique_lock&lt;std::mutex&gt; lock(mtx, std::try_to_lock); lock.owns_lock()) {\n     //...\n  } // mutex unlock\n  // ... code\n  return true;\n}\n</pre>\n<p>This rule raises an issue when:</p>\n<ul>\n  <li> a variable is declared just before a statement that allows variable declaration (<code>if</code>, <code>switch</code>, or, starting C++20,\n  range-based <code>for</code> loop), </li>\n  <li> this variable is used in the statement header, </li>\n  <li> there are other statements after this statement where this variable might be used, </li>\n  <li> yet, it is never used after the statement. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid handle(std::string_view s);\nvoid ifStatement() {\n  std::map&lt;int, std::string&gt; m;\n  int key = 1;\n  std::string value = \""str1\"";\n  auto [it, inserted] = m.try_emplace(key, value); // Noncompliant\n  if (!inserted) {\n    std::cout &lt;&lt; \""Already registered\"";\n  } else {\n    handle(it-&gt;second);\n  }\n  process(m);\n}\n</pre>\n<pre>\nenum class State { True, False, Maybe, MaybeNot };\nstd::pair&lt;std::string, State&gt; getStatePair();\n\nvoid switchStatement() {\n  auto state = getStatePair(); // Noncompliant\n  switch (state.second) {\n    case State::True:\n    case State::Maybe:\n      std::cout &lt;&lt; state.first;\n      break;\n    case State::False:\n    case State::MaybeNot:\n      std::cout &lt;&lt; \""No\"";\n      break;\n  }\n  std::cout &lt;&lt; \""\\n\"";\n}\n</pre>\n<pre>\nstd::vector&lt;std::vector&lt;int&gt;&gt; getTable();\nvoid printHeadersBad() {\n  auto rows = getTable(); // Noncompliant in C++20: rows is accessible outside of the loop\n  for (int x : rows[0]) {\n    std::cout &lt;&lt; x &lt;&lt;' ';\n  }\n  std::cout &lt;&lt; \""\\n\"";\n}\n</pre>\n<p>Using a temporary to avoid leaking of the variable into the ambient scope creates a bigger problem: an undefined behavior. Even though the lifetime\nof a temporary returned by the range expression is extended, the life of a temporary within the range expression terminates before the loop begins to\nexecute.</p>\n<pre>\nstd::vector&lt;std::vector&lt;int&gt;&gt; getTable();\nvoid printHeadersWorse() {\n  for (int x : getTable()[0]) { // Undefined behavior: return value of getTable() no longer exists in the loop body\n    std::cout &lt;&lt; x &lt;&lt;' ';\n  }\n  std::cout &lt;&lt; \""\\n\"";\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid handle(std::string_view s);\nvoid ifStatement() {\n  std::map&lt;int, std::string&gt; m;\n  int key = 1;\n  std::string value = \""str1\"";\n  if (auto [it, inserted] = m.try_emplace(key, value); !inserted) { // Compliant\n    std::cout &lt;&lt; \""Already registered\"";\n  } else {\n    handle(it-&gt;second);\n  }\n  process(m);\n}\n\nenum class State { True, False, Maybe, MaybeNot };\nstd::pair&lt;std::string, State&gt; getStatePair();\n\nvoid switchStatement() {\n  switch (auto state = getStatePair(); state.second) { // Compliant\n    case State::True:\n    case State::Maybe:\n      std::cout &lt;&lt; state.first;\n      break;\n    case State::False:\n    case State::MaybeNot:\n      std::cout &lt;&lt; \""No\"";\n      break;\n  }\n  std::cout &lt;&lt; \""\\n\"";\n}\n\nstd::vector&lt;std::vector&lt;int&gt;&gt; getTable();\nvoid printHeadersGood() {\n  // Compliant: rows is accessible only inside the loop (this code requires at least C++20)\n  for (auto rows = getTable(); int x : table[0]) {\n    std::cout &lt;&lt; x &lt;&lt;' ';\n  }\n  std::cout &lt;&lt; \""\\n\"";\n}\n</pre>\n<h2>Exceptions</h2>\n<p>While an <code>if</code> with both an initializer and a condition variable is valid, it is confusing. The rule does not raise an issue if the\n<code>if</code> statement already has a condition variable:</p>\n<pre>\nvoid confusing() {\n  if (int a = 42; std::optional&lt;int&gt; b = lookup(a)) { // Valid but confusing\n    // ...\n  }\n}\n\nvoid exception() {\n  int a = 42; // Compliant by exception\n  if (std::optional&lt;int&gt; b = lookup(a)) {\n    // ...\n  }\n}\n</pre>""}]",[]
AYbrSM6trCZoby-g10wX,sonarsource-cfamily-examples_linux-cmake-gitlab-ci-sq,main,src/main.cpp,10,"This branch can not be reached because the condition duplicates a previous condition in the same sequence of ""if/else if"" statements",OPEN,joshua.quek.fullstack@gmail.com,2023-03-16T16:15:23+0000,2023-06-29T13:17:24+0000,cpp:S1862,[object Object],BUG,MAJOR,10,"cert,pitfall,unused",,,cpp:S1862,cpp,"Related ""if/else if"" statements should not have the same condition",2023-02-21T15:21:18+0000,"<p>A chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first\none with a condition that evaluates to <code>true</code>.</p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it’s simply dead code and\nat worst, it’s a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 1)  // Noncompliant\n  moveWindowToTheBackground();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 3)\n  moveWindowToTheBackground();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/5dUxBQ"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n  </li>\n</ul>","<p>A chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first\none with a condition that evaluates to <code>true</code>.</p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it’s simply dead code and\nat worst, it’s a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 1)  // Noncompliant\n  moveWindowToTheBackground();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 3)\n  moveWindowToTheBackground();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/5dUxBQ"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n  </li>\n</ul>",MAJOR,READY,false,,"cert,pitfall,unused",cpp,C++,[],BUG,false,MAIN,false,"[{""key"":""default"",""content"":""<p>A chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first\none with a condition that evaluates to <code>true</code>.</p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it’s simply dead code and\nat worst, it’s a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 1)  // Noncompliant\n  moveWindowToTheBackground();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 3)\n  moveWindowToTheBackground();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\""https://wiki.sei.cmu.edu/confluence/x/5dUxBQ\"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n  </li>\n</ul>""}]",[]
AYbrSM6trCZoby-g10wY,sonarsource-cfamily-examples_linux-cmake-gitlab-ci-sq,main,src/main.cpp,17,"Use the ""nullptr"" literal.",OPEN,joshua.quek.fullstack@gmail.com,2023-03-16T16:15:23+0000,2023-06-29T13:17:41+0000,cpp:S4962,[object Object],CODE_SMELL,CRITICAL,1,"bad-practice,cppcoreguidelines,since-c++11",,,cpp:S4962,cpp,"""nullptr"" should be used to denote the null pointer",2023-02-21T15:21:19+0000,"<p>Before C++11, the only way to refer to a null pointer was by using the integer literal <code>0</code>, which created ambiguity with regard to\nwhether a pointer or an integer was intended. Even with the <code>NULL</code> macro, the underlying value is still <code>0</code>.</p>\n<p>C++11 introduced the keyword <code>nullptr</code>, which is unambiguous and should be used systematically.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid f(char *c);\nvoid g(int i);\nvoid h()\n{\n    f(0); // Noncompliant\n    f(NULL); // Noncompliant\n    g(0); // Compliant, a real integer\n    g(NULL); // Noncompliant, NULL should not be used for a real integer\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid f(char *c);\nvoid g(int i);\nvoid h()\n{\n    f(nullptr); // Compliant\n    g(0);  // Compliant, a real integer\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://github.com/isocpp/CppCoreGuidelines/blob/036324/CppCoreGuidelines.md#es47-use-nullptr-rather-than-0-or-null"">C++ Core\n  Guidelines ES.47</a> - Use nullptr rather than 0 or NULL </li>\n</ul>","<p>Before C++11, the only way to refer to a null pointer was by using the integer literal <code>0</code>, which created ambiguity with regard to\nwhether a pointer or an integer was intended. Even with the <code>NULL</code> macro, the underlying value is still <code>0</code>.</p>\n<p>C++11 introduced the keyword <code>nullptr</code>, which is unambiguous and should be used systematically.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid f(char *c);\nvoid g(int i);\nvoid h()\n{\n    f(0); // Noncompliant\n    f(NULL); // Noncompliant\n    g(0); // Compliant, a real integer\n    g(NULL); // Noncompliant, NULL should not be used for a real integer\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid f(char *c);\nvoid g(int i);\nvoid h()\n{\n    f(nullptr); // Compliant\n    g(0);  // Compliant, a real integer\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://github.com/isocpp/CppCoreGuidelines/blob/036324/CppCoreGuidelines.md#es47-use-nullptr-rather-than-0-or-null"">C++ Core\n  Guidelines ES.47</a> - Use nullptr rather than 0 or NULL </li>\n</ul>",CRITICAL,READY,false,,"bad-practice,cppcoreguidelines,since-c++11",cpp,C++,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>Before C++11, the only way to refer to a null pointer was by using the integer literal <code>0</code>, which created ambiguity with regard to\nwhether a pointer or an integer was intended. Even with the <code>NULL</code> macro, the underlying value is still <code>0</code>.</p>\n<p>C++11 introduced the keyword <code>nullptr</code>, which is unambiguous and should be used systematically.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid f(char *c);\nvoid g(int i);\nvoid h()\n{\n    f(0); // Noncompliant\n    f(NULL); // Noncompliant\n    g(0); // Compliant, a real integer\n    g(NULL); // Noncompliant, NULL should not be used for a real integer\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid f(char *c);\nvoid g(int i);\nvoid h()\n{\n    f(nullptr); // Compliant\n    g(0);  // Compliant, a real integer\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\""https://github.com/isocpp/CppCoreGuidelines/blob/036324/CppCoreGuidelines.md#es47-use-nullptr-rather-than-0-or-null\"">C++ Core\n  Guidelines ES.47</a> - Use nullptr rather than 0 or NULL </li>\n</ul>""}]",[]
AYbrSM6trCZoby-g10wZ,sonarsource-cfamily-examples_linux-cmake-gitlab-ci-sq,main,src/main.cpp,18,Remove this empty statement.,OPEN,joshua.quek.fullstack@gmail.com,2023-03-16T16:15:23+0000,2023-06-29T13:18:00+0000,cpp:S1116,[object Object],CODE_SMELL,MINOR,2,"based-on-misra,cert,unused",,,cpp:S1116,cpp,Empty statements should be removed,2023-02-21T15:21:19+0000,"<p>Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:</p>\n<ul>\n  <li> It was meant to be replaced by an actual statement, but this was forgotten. </li>\n  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid doSomething() {\n  ;                // Noncompliant - was used as a kind of TODO marker\n}\n#define A(x) x;    // Noncompliant - macro definitions should not end with a semi-colon when they are used as functions\nvoid fun() {\n  A(5);            // Noncompliant - after expansion, there are 2 consecutive semi-colons\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid doSomething() {\n}\n#define A(x) x\nvoid fun() {\n  A(5);\n}\n</pre>\n<h2>Exceptions</h2>\n<p>In the case of an empty expanded macro, the issue is not raised.</p>\n<p>Example:</p>\n<pre>\n#define LOG(x)\nvoid fun() {\n  LOG(X);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that\n  the first character following the null statement is a white-space character. </li>\n  <li> MISRA C++:2008, 6-2-3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided\n  that the first character following the null statement is a white-space character. </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/5dUxBQ"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n  </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/IDZGBQ"">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for, or while\n  condition </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/WtYxBQ"">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for, or while\n  statement </li>\n</ul>","<p>Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:</p>\n<ul>\n  <li> It was meant to be replaced by an actual statement, but this was forgotten. </li>\n  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid doSomething() {\n  ;                // Noncompliant - was used as a kind of TODO marker\n}\n#define A(x) x;    // Noncompliant - macro definitions should not end with a semi-colon when they are used as functions\nvoid fun() {\n  A(5);            // Noncompliant - after expansion, there are 2 consecutive semi-colons\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid doSomething() {\n}\n#define A(x) x\nvoid fun() {\n  A(5);\n}\n</pre>\n<h2>Exceptions</h2>\n<p>In the case of an empty expanded macro, the issue is not raised.</p>\n<p>Example:</p>\n<pre>\n#define LOG(x)\nvoid fun() {\n  LOG(X);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that\n  the first character following the null statement is a white-space character. </li>\n  <li> MISRA C++:2008, 6-2-3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided\n  that the first character following the null statement is a white-space character. </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/5dUxBQ"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n  </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/IDZGBQ"">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for, or while\n  condition </li>\n  <li> <a href=""https://wiki.sei.cmu.edu/confluence/x/WtYxBQ"">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for, or while\n  statement </li>\n</ul>",MINOR,READY,false,,"based-on-misra,cert,unused",cpp,C++,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:</p>\n<ul>\n  <li> It was meant to be replaced by an actual statement, but this was forgotten. </li>\n  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid doSomething() {\n  ;                // Noncompliant - was used as a kind of TODO marker\n}\n\n#define A(x) x;    // Noncompliant - macro definitions should not end with a semi-colon when they are used as functions\n\nvoid fun() {\n  A(5);            // Noncompliant - after expansion, there are 2 consecutive semi-colons\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid doSomething() {\n}\n\n#define A(x) x\n\nvoid fun() {\n  A(5);\n}\n</pre>\n<h2>Exceptions</h2>\n<p>In the case of an empty expanded macro, the issue is not raised.</p>\n<p>Example:</p>\n<pre>\n#define LOG(x)\n\nvoid fun() {\n  LOG(X);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that\n  the first character following the null statement is a white-space character. </li>\n  <li> MISRA C++:2008, 6-2-3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided\n  that the first character following the null statement is a white-space character. </li>\n  <li> <a href=\""https://wiki.sei.cmu.edu/confluence/x/5dUxBQ\"">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n  </li>\n  <li> <a href=\""https://wiki.sei.cmu.edu/confluence/x/IDZGBQ\"">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for, or while\n  condition </li>\n  <li> <a href=\""https://wiki.sei.cmu.edu/confluence/x/WtYxBQ\"">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for, or while\n  statement </li>\n</ul>""}]",[]
AYaoGdhV_dtLGUU1PCnK,joshua-quek-sonarsource_joshua-quek-sonarsource_AYaiptbyAu8T8ZieRld0,main,server/app/routes/authentication/postgres-user-pass/register-user/validator.js,33,Use concise character class syntax '\d' instead of '[0-9]'.,OPEN,,2023-03-03T15:31:16+0000,2023-07-01T11:02:54+0000,javascript:S6353,[object Object],CODE_SMELL,MINOR,5,regex,,,javascript:S6353,javascript,Regular expression quantifiers and character classes should be used concisely,2023-02-21T15:21:21+0000,"<p>With regular expressions syntax, it’s possible to express the same thing in many ways. For example, to match a two-digit number, one could write\n<code>[0-9]{2,2}</code> or <code>\d{2}</code>. Latter is not only shorter in terms of expression length, but also easier to read and thus to maintain.\nThis rule recommends to replace some bulky quantifiers and character classes with more concise equivalents:</p>\n<ul>\n  <li> <code>\d</code> for <code>[0-9]</code> and <code>\D</code> for <code>[^0-9]</code> </li>\n  <li> <code>\w</code> for <code>[A-Za-z0-9_]</code> and <code>\W</code> for <code>[^A-Za-z0-9_]</code> </li>\n  <li> <code>.</code> for character classes matching everything (e.g. <code>[\w\W]</code>, <code>[\d\D]</code>, or <code>[\s\S]</code> with\n  <code>s</code> flag) </li>\n  <li> <code>x?</code> for <code>x{0,1}</code>, <code>x*</code> for <code>x{0,}</code>, <code>x+</code> for <code>x{1,}</code>, <code>x{N}</code> for\n  <code>x{N,N}</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/a{1,}/; // Noncompliant, '{1,}' quantifier is the same as '+'\n/[A-Za-z0-9_]/; // Noncompliant, '\w' is equivalent\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/a+/;\n/\w/;\n</pre>","<p>With regular expressions syntax, it’s possible to express the same thing in many ways. For example, to match a two-digit number, one could write\n<code>[0-9]{2,2}</code> or <code>\d{2}</code>. Latter is not only shorter in terms of expression length, but also easier to read and thus to maintain.\nThis rule recommends to replace some bulky quantifiers and character classes with more concise equivalents:</p>\n<ul>\n  <li> <code>\d</code> for <code>[0-9]</code> and <code>\D</code> for <code>[^0-9]</code> </li>\n  <li> <code>\w</code> for <code>[A-Za-z0-9_]</code> and <code>\W</code> for <code>[^A-Za-z0-9_]</code> </li>\n  <li> <code>.</code> for character classes matching everything (e.g. <code>[\w\W]</code>, <code>[\d\D]</code>, or <code>[\s\S]</code> with\n  <code>s</code> flag) </li>\n  <li> <code>x?</code> for <code>x{0,1}</code>, <code>x*</code> for <code>x{0,}</code>, <code>x+</code> for <code>x{1,}</code>, <code>x{N}</code> for\n  <code>x{N,N}</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/a{1,}/; // Noncompliant, '{1,}' quantifier is the same as '+'\n/[A-Za-z0-9_]/; // Noncompliant, '\w' is equivalent\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/a+/;\n/\w/;\n</pre>",MINOR,READY,false,,regex,js,JavaScript,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>With regular expressions syntax, it’s possible to express the same thing in many ways. For example, to match a two-digit number, one could write\n<code>[0-9]{2,2}</code> or <code>\\d{2}</code>. Latter is not only shorter in terms of expression length, but also easier to read and thus to maintain.\nThis rule recommends to replace some bulky quantifiers and character classes with more concise equivalents:</p>\n<ul>\n  <li> <code>\\d</code> for <code>[0-9]</code> and <code>\\D</code> for <code>[^0-9]</code> </li>\n  <li> <code>\\w</code> for <code>[A-Za-z0-9_]</code> and <code>\\W</code> for <code>[^A-Za-z0-9_]</code> </li>\n  <li> <code>.</code> for character classes matching everything (e.g. <code>[\\w\\W]</code>, <code>[\\d\\D]</code>, or <code>[\\s\\S]</code> with\n  <code>s</code> flag) </li>\n  <li> <code>x?</code> for <code>x{0,1}</code>, <code>x*</code> for <code>x{0,}</code>, <code>x+</code> for <code>x{1,}</code>, <code>x{N}</code> for\n  <code>x{N,N}</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/a{1,}/; // Noncompliant, '{1,}' quantifier is the same as '+'\n/[A-Za-z0-9_]/; // Noncompliant, '\\w' is equivalent\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/a+/;\n/\\w/;\n</pre>""}]",[]
AYaoGdhm_dtLGUU1PCnL,joshua-quek-sonarsource_joshua-quek-sonarsource_AYaiptbyAu8T8ZieRld0,main,server/app/routes/authentication/postgres-user-pass/login-user/validator.js,33,Use concise character class syntax '\d' instead of '[0-9]'.,OPEN,,2023-03-03T15:31:16+0000,2023-07-01T11:02:47+0000,javascript:S6353,[object Object],CODE_SMELL,MINOR,5,regex,,,javascript:S6353,javascript,Regular expression quantifiers and character classes should be used concisely,2023-02-21T15:21:21+0000,"<p>With regular expressions syntax, it’s possible to express the same thing in many ways. For example, to match a two-digit number, one could write\n<code>[0-9]{2,2}</code> or <code>\d{2}</code>. Latter is not only shorter in terms of expression length, but also easier to read and thus to maintain.\nThis rule recommends to replace some bulky quantifiers and character classes with more concise equivalents:</p>\n<ul>\n  <li> <code>\d</code> for <code>[0-9]</code> and <code>\D</code> for <code>[^0-9]</code> </li>\n  <li> <code>\w</code> for <code>[A-Za-z0-9_]</code> and <code>\W</code> for <code>[^A-Za-z0-9_]</code> </li>\n  <li> <code>.</code> for character classes matching everything (e.g. <code>[\w\W]</code>, <code>[\d\D]</code>, or <code>[\s\S]</code> with\n  <code>s</code> flag) </li>\n  <li> <code>x?</code> for <code>x{0,1}</code>, <code>x*</code> for <code>x{0,}</code>, <code>x+</code> for <code>x{1,}</code>, <code>x{N}</code> for\n  <code>x{N,N}</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/a{1,}/; // Noncompliant, '{1,}' quantifier is the same as '+'\n/[A-Za-z0-9_]/; // Noncompliant, '\w' is equivalent\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/a+/;\n/\w/;\n</pre>","<p>With regular expressions syntax, it’s possible to express the same thing in many ways. For example, to match a two-digit number, one could write\n<code>[0-9]{2,2}</code> or <code>\d{2}</code>. Latter is not only shorter in terms of expression length, but also easier to read and thus to maintain.\nThis rule recommends to replace some bulky quantifiers and character classes with more concise equivalents:</p>\n<ul>\n  <li> <code>\d</code> for <code>[0-9]</code> and <code>\D</code> for <code>[^0-9]</code> </li>\n  <li> <code>\w</code> for <code>[A-Za-z0-9_]</code> and <code>\W</code> for <code>[^A-Za-z0-9_]</code> </li>\n  <li> <code>.</code> for character classes matching everything (e.g. <code>[\w\W]</code>, <code>[\d\D]</code>, or <code>[\s\S]</code> with\n  <code>s</code> flag) </li>\n  <li> <code>x?</code> for <code>x{0,1}</code>, <code>x*</code> for <code>x{0,}</code>, <code>x+</code> for <code>x{1,}</code>, <code>x{N}</code> for\n  <code>x{N,N}</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/a{1,}/; // Noncompliant, '{1,}' quantifier is the same as '+'\n/[A-Za-z0-9_]/; // Noncompliant, '\w' is equivalent\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/a+/;\n/\w/;\n</pre>",MINOR,READY,false,,regex,js,JavaScript,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>With regular expressions syntax, it’s possible to express the same thing in many ways. For example, to match a two-digit number, one could write\n<code>[0-9]{2,2}</code> or <code>\\d{2}</code>. Latter is not only shorter in terms of expression length, but also easier to read and thus to maintain.\nThis rule recommends to replace some bulky quantifiers and character classes with more concise equivalents:</p>\n<ul>\n  <li> <code>\\d</code> for <code>[0-9]</code> and <code>\\D</code> for <code>[^0-9]</code> </li>\n  <li> <code>\\w</code> for <code>[A-Za-z0-9_]</code> and <code>\\W</code> for <code>[^A-Za-z0-9_]</code> </li>\n  <li> <code>.</code> for character classes matching everything (e.g. <code>[\\w\\W]</code>, <code>[\\d\\D]</code>, or <code>[\\s\\S]</code> with\n  <code>s</code> flag) </li>\n  <li> <code>x?</code> for <code>x{0,1}</code>, <code>x*</code> for <code>x{0,}</code>, <code>x+</code> for <code>x{1,}</code>, <code>x{N}</code> for\n  <code>x{N,N}</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/a{1,}/; // Noncompliant, '{1,}' quantifier is the same as '+'\n/[A-Za-z0-9_]/; // Noncompliant, '\\w' is equivalent\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/a+/;\n/\\w/;\n</pre>""}]",[]
AYaoGdh4_dtLGUU1PCnM,joshua-quek-sonarsource_joshua-quek-sonarsource_AYaiptbyAu8T8ZieRld0,main,server/libs/utils/response-util/index.js,10,Refactor this function to reduce its Cognitive Complexity from 16 to the 15 allowed.,OPEN,,2023-03-03T15:31:16+0000,2023-07-01T11:03:22+0000,javascript:S3776,[object Object],CODE_SMELL,CRITICAL,6,brain-overload,,,javascript:S3776,javascript,Cognitive Complexity of functions should not be too high,2023-02-21T15:21:22+0000,"<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be\ndifficult to maintain.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://www.sonarsource.com/docs/CognitiveComplexity.pdf"">Cognitive Complexity</a> </li>\n</ul>","<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be\ndifficult to maintain.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://www.sonarsource.com/docs/CognitiveComplexity.pdf"">Cognitive Complexity</a> </li>\n</ul>",CRITICAL,READY,false,,brain-overload,js,JavaScript,"[{""key"":""threshold"",""htmlDesc"":""The maximum authorized complexity."",""defaultValue"":""15"",""type"":""INTEGER""}]",CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be\ndifficult to maintain.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\""https://www.sonarsource.com/docs/CognitiveComplexity.pdf\"">Cognitive Complexity</a> </li>\n</ul>""}]",[]
AYaoGdiF_dtLGUU1PCnO,joshua-quek-sonarsource_joshua-quek-sonarsource_AYaiptbyAu8T8ZieRld0,main,server/libs/utils/passport-util/index.js,8,Remove this commented out code.,OPEN,,2023-03-03T15:31:16+0000,2023-07-01T11:03:08+0000,javascript:S125,[object Object],CODE_SMELL,MAJOR,5,unused,,,javascript:S125,javascript,Sections of code should not be commented out,2023-02-21T15:21:22+0000,<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>,<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>,MAJOR,READY,false,,unused,js,JavaScript,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>""}]",[]
AYaoGdiF_dtLGUU1PCnN,joshua-quek-sonarsource_joshua-quek-sonarsource_AYaiptbyAu8T8ZieRld0,main,server/libs/utils/passport-util/index.js,3,Remove this commented out code.,OPEN,,2023-03-03T15:31:16+0000,2023-07-01T11:03:01+0000,javascript:S125,[object Object],CODE_SMELL,MAJOR,5,unused,,,javascript:S125,javascript,Sections of code should not be commented out,2023-02-21T15:21:22+0000,<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>,<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>,MAJOR,READY,false,,unused,js,JavaScript,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>""}]",[]
AYaoGdiL_dtLGUU1PCnP,joshua-quek-sonarsource_joshua-quek-sonarsource_AYaiptbyAu8T8ZieRld0,main,server/libs/utils/passport-util/user-object.js,7,Review this potentially hardcoded credential.,TO_REVIEW,,2023-03-03T15:31:16+0000,2023-03-03T15:31:16+0000,javascript:S2068,,SECURITY_HOTSPOT,,,,auth,HIGH,javascript:S2068,javascript,Hard-coded credentials are security-sensitive,2023-02-21T15:21:22+0000,"<p>Because it is easy to extract strings from an application source code or binary, credentials should not be hard-coded. This is particularly true\nfor applications that are distributed or that are open-source.</p>\n<p>In the past, it has led to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13466"">CVE-2019-13466</a> </li>\n  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-15389"">CVE-2018-15389</a> </li>\n</ul>\n<p>Credentials should be stored outside of the code in a configuration file, a database, or a management service for secrets.</p>\n<p>This rule flags instances of hard-coded credentials used in database and LDAP connections. It looks for hard-coded credentials in connection\nstrings, and for variable names that match any of the patterns from the provided list.</p>\n<p>It’s recommended to customize the configuration of this rule with additional credential words such as ""oauthToken"", ""secret"", …​</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Credentials allow access to a sensitive component like a database, a file storage, an API or a service. </li>\n  <li> Credentials are used in production environments. </li>\n  <li> Application re-distribution is required before updating the credentials. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Store the credentials in a configuration file that is not pushed to the code repository. </li>\n  <li> Store the credentials in a database. </li>\n  <li> Use your cloud provider’s service for managing secrets. </li>\n  <li> If a password has been disclosed through the source code: change it. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nvar mysql = require('mysql');\nvar connection = mysql.createConnection(\n{\n  host:'localhost',\n  user: ""admin"",\n  database: ""project"",\n  password: ""mypassword"", // sensitive\n  multipleStatements: true\n});\nconnection.connect();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar mysql = require('mysql');\nvar connection = mysql.createConnection({\n  host: process.env.MYSQL_URL,\n  user: process.env.MYSQL_USERNAME,\n  password: process.env.MYSQL_PASSWORD,\n  database: process.env.MYSQL_DATABASE\n});\nconnection.connect();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/"">OWASP Top 10 2021 Category A7</a> - Identification and\n  Authentication Failures </li>\n  <li> <a href=""https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication"">OWASP Top 10 2017 Category A2</a> - Broken Authentication\n  </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/798"">MITRE, CWE-798</a> - Use of Hard-coded Credentials </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/259"">MITRE, CWE-259</a> - Use of Hard-coded Password </li>\n  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>\n  <li> Derived from FindSecBugs rule <a href=""https://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD"">Hard Coded Password</a> </li>\n</ul>","<p>Because it is easy to extract strings from an application source code or binary, credentials should not be hard-coded. This is particularly true\nfor applications that are distributed or that are open-source.</p>\n<p>In the past, it has led to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13466"">CVE-2019-13466</a> </li>\n  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-15389"">CVE-2018-15389</a> </li>\n</ul>\n<p>Credentials should be stored outside of the code in a configuration file, a database, or a management service for secrets.</p>\n<p>This rule flags instances of hard-coded credentials used in database and LDAP connections. It looks for hard-coded credentials in connection\nstrings, and for variable names that match any of the patterns from the provided list.</p>\n<p>It’s recommended to customize the configuration of this rule with additional credential words such as ""oauthToken"", ""secret"", …​</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Credentials allow access to a sensitive component like a database, a file storage, an API or a service. </li>\n  <li> Credentials are used in production environments. </li>\n  <li> Application re-distribution is required before updating the credentials. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Store the credentials in a configuration file that is not pushed to the code repository. </li>\n  <li> Store the credentials in a database. </li>\n  <li> Use your cloud provider’s service for managing secrets. </li>\n  <li> If a password has been disclosed through the source code: change it. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nvar mysql = require('mysql');\nvar connection = mysql.createConnection(\n{\n  host:'localhost',\n  user: ""admin"",\n  database: ""project"",\n  password: ""mypassword"", // sensitive\n  multipleStatements: true\n});\nconnection.connect();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar mysql = require('mysql');\nvar connection = mysql.createConnection({\n  host: process.env.MYSQL_URL,\n  user: process.env.MYSQL_USERNAME,\n  password: process.env.MYSQL_PASSWORD,\n  database: process.env.MYSQL_DATABASE\n});\nconnection.connect();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/"">OWASP Top 10 2021 Category A7</a> - Identification and\n  Authentication Failures </li>\n  <li> <a href=""https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication"">OWASP Top 10 2017 Category A2</a> - Broken Authentication\n  </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/798"">MITRE, CWE-798</a> - Use of Hard-coded Credentials </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/259"">MITRE, CWE-259</a> - Use of Hard-coded Password </li>\n  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>\n  <li> Derived from FindSecBugs rule <a href=""https://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD"">Hard Coded Password</a> </li>\n</ul>",BLOCKER,READY,false,,"cwe,sans-top25-porous",js,JavaScript,"[{""key"":""credentialWords"",""htmlDesc"":""Comma separated list of words identifying potential credentials."",""defaultValue"":""password, pwd, passwd"",""type"":""STRING""}]",SECURITY_HOTSPOT,false,MAIN,false,"[{""key"":""how_to_fix"",""content"":""<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Store the credentials in a configuration file that is not pushed to the code repository. </li>\n  <li> Store the credentials in a database. </li>\n  <li> Use your cloud provider’s service for managing secrets. </li>\n  <li> If a password has been disclosed through the source code: change it. </li>\n</ul>\n<h2>Compliant Solution</h2>\n<pre>\nvar mysql = require('mysql');\n\nvar connection = mysql.createConnection({\n  host: process.env.MYSQL_URL,\n  user: process.env.MYSQL_USERNAME,\n  password: process.env.MYSQL_PASSWORD,\n  database: process.env.MYSQL_DATABASE\n});\nconnection.connect();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\""https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"">OWASP Top 10 2021 Category A7</a> - Identification and\n  Authentication Failures </li>\n  <li> <a href=\""https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\"">OWASP Top 10 2017 Category A2</a> - Broken Authentication\n  </li>\n  <li> <a href=\""https://cwe.mitre.org/data/definitions/798\"">MITRE, CWE-798</a> - Use of Hard-coded Credentials </li>\n  <li> <a href=\""https://cwe.mitre.org/data/definitions/259\"">MITRE, CWE-259</a> - Use of Hard-coded Password </li>\n  <li> <a href=\""https://www.sans.org/top25-software-errors/#cat3\"">SANS Top 25</a> - Porous Defenses </li>\n  <li> Derived from FindSecBugs rule <a href=\""https://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD\"">Hard Coded Password</a> </li>\n</ul>""},{""key"":""root_cause"",""content"":""<p>Because it is easy to extract strings from an application source code or binary, credentials should not be hard-coded. This is particularly true\nfor applications that are distributed or that are open-source.</p>\n<p>In the past, it has led to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13466\"">CVE-2019-13466</a> </li>\n  <li> <a href=\""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-15389\"">CVE-2018-15389</a> </li>\n</ul>\n<p>Credentials should be stored outside of the code in a configuration file, a database, or a management service for secrets.</p>\n<p>This rule flags instances of hard-coded credentials used in database and LDAP connections. It looks for hard-coded credentials in connection\nstrings, and for variable names that match any of the patterns from the provided list.</p>\n<p>It’s recommended to customize the configuration of this rule with additional credential words such as \""oauthToken\"", \""secret\"", …​</p>\n""},{""key"":""assess_the_problem"",""content"":""<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Credentials allow access to a sensitive component like a database, a file storage, an API or a service. </li>\n  <li> Credentials are used in production environments. </li>\n  <li> Application re-distribution is required before updating the credentials. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nvar mysql = require('mysql');\n\nvar connection = mysql.createConnection(\n{\n  host:'localhost',\n  user: \""admin\"",\n  database: \""project\"",\n  password: \""mypassword\"", // sensitive\n  multipleStatements: true\n});\n\nconnection.connect();\n</pre>\n""}]",[]
AYaoGdiZ_dtLGUU1PCnQ,joshua-quek-sonarsource_joshua-quek-sonarsource_AYaiptbyAu8T8ZieRld0,main,server/libs/services/express-service/index.js,18,Make sure that enabling CORS is safe here.,TO_REVIEW,,2023-03-03T15:31:16+0000,2023-03-03T15:31:16+0000,javascript:S5122,,SECURITY_HOTSPOT,,,,insecure-conf,LOW,javascript:S5122,javascript,Having a permissive Cross-Origin Resource Sharing policy is security-sensitive,2023-02-21T15:21:21+0000,"<p>Having a permissive Cross-Origin Resource Sharing policy is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0269"">CVE-2018-0269</a> </li>\n  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14460"">CVE-2017-14460</a> </li>\n</ul>\n<p><a href=""https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy"">Same origin policy</a> in browsers prevents, by default and for\nsecurity-reasons, a javascript frontend to perform a cross-origin HTTP request to a resource that has a different origin (domain, protocol, or port)\nfrom its own. The requested target can append additional HTTP headers in response, called <a\nhref=""https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"">CORS</a>, that act like directives for the browser and change the access control policy\n/ relax the same origin policy.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> You don’t trust the origin specified, example: <code>Access-Control-Allow-Origin: untrustedwebsite.com</code>. </li>\n  <li> Access control policy is entirely disabled: <code>Access-Control-Allow-Origin: *</code> </li>\n  <li> Your access control policy is dynamically defined by a user-controlled input like <a\n  href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin""><code>origin</code></a> header. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> The <code>Access-Control-Allow-Origin</code> header should be set only for a trusted origin and for specific resources. </li>\n  <li> Allow only selected, trusted domains in the <code>Access-Control-Allow-Origin</code> header. Prefer whitelisting domains over blacklisting or\n  allowing any domain (do not use * wildcard nor blindly return the <code>Origin</code> header content without any checks). </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p><a href=""https://nodejs.org/api/http.html"">nodejs http</a> built-in module:</p>\n<pre>\nconst http = require('http');\nconst srv = http.createServer((req, res) =&gt; {\n  res.writeHead(200, { 'Access-Control-Allow-Origin': '*' }); // Sensitive\n  res.end('ok');\n});\nsrv.listen(3000);\n</pre>\n<p><a href=""https://www.npmjs.com/package/express"">Express.js</a> framework with <a href=""https://www.npmjs.com/package/cors"">cors middleware</a>:</p>\n<pre>\nconst cors = require('cors');\nlet app1 = express();\napp1.use(cors()); // Sensitive: by default origin is set to *\nlet corsOptions = {\n  origin: '*' // Sensitive\n};\nlet app2 = express();\napp2.use(cors(corsOptions));\n</pre>\n<p>User-controlled origin:</p>\n<pre>\nfunction (req, res) {\n  const origin = req.header('Origin');\n  res.setHeader('Access-Control-Allow-Origin', origin); // Sensitive\n};\n</pre>\n<h2>Compliant Solution</h2>\n<p><a href=""https://nodejs.org/api/http.html"">nodejs http</a> built-in module:</p>\n<pre>\nconst http = require('http');\nconst srv = http.createServer((req, res) =&gt; {\n  res.writeHead(200, { 'Access-Control-Allow-Origin': 'trustedwebsite.com' }); // Compliant\n  res.end('ok');\n});\nsrv.listen(3000);\n</pre>\n<p><a href=""https://www.npmjs.com/package/express"">Express.js</a> framework with <a href=""https://www.npmjs.com/package/cors"">cors middleware</a>:</p>\n<pre>\nconst cors = require('cors');\nlet corsOptions = {\n  origin: 'trustedwebsite.com' // Compliant\n};\nlet app = express();\napp.use(cors(corsOptions));\n</pre>\n<p>User-controlled origin validated with an allow-list:</p>\n<pre>\nfunction (req, res) {\n  const origin = req.header('Origin');\n  if (trustedOrigins.indexOf(origin) &gt;= 0) {\n    res.setHeader('Access-Control-Allow-Origin', origin);\n  }\n};\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://owasp.org/Top10/A05_2021-Security_Misconfiguration/"">OWASP Top 10 2021 Category A5</a> - Security Misconfiguration </li>\n  <li> <a href=""https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/"">OWASP Top 10 2021 Category A7</a> - Identification and\n  Authentication Failures </li>\n  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"">developer.mozilla.org</a> - CORS </li>\n  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy"">developer.mozilla.org</a> - Same origin policy </li>\n  <li> <a href=""https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration"">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=""https://cheatsheetseries.owasp.org/cheatsheets/HTML5_Security_Cheat_Sheet.html#cross-origin-resource-sharing"">OWASP HTML5 Security\n  Cheat Sheet</a> - Cross Origin Resource Sharing </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/346"">MITRE, CWE-346</a> - Origin Validation Error </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/942"">MITRE, CWE-942</a> - Overly Permissive Cross-domain Whitelist </li>\n  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>\n</ul>","<p>Having a permissive Cross-Origin Resource Sharing policy is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0269"">CVE-2018-0269</a> </li>\n  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14460"">CVE-2017-14460</a> </li>\n</ul>\n<p><a href=""https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy"">Same origin policy</a> in browsers prevents, by default and for\nsecurity-reasons, a javascript frontend to perform a cross-origin HTTP request to a resource that has a different origin (domain, protocol, or port)\nfrom its own. The requested target can append additional HTTP headers in response, called <a\nhref=""https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"">CORS</a>, that act like directives for the browser and change the access control policy\n/ relax the same origin policy.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> You don’t trust the origin specified, example: <code>Access-Control-Allow-Origin: untrustedwebsite.com</code>. </li>\n  <li> Access control policy is entirely disabled: <code>Access-Control-Allow-Origin: *</code> </li>\n  <li> Your access control policy is dynamically defined by a user-controlled input like <a\n  href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin""><code>origin</code></a> header. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> The <code>Access-Control-Allow-Origin</code> header should be set only for a trusted origin and for specific resources. </li>\n  <li> Allow only selected, trusted domains in the <code>Access-Control-Allow-Origin</code> header. Prefer whitelisting domains over blacklisting or\n  allowing any domain (do not use * wildcard nor blindly return the <code>Origin</code> header content without any checks). </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p><a href=""https://nodejs.org/api/http.html"">nodejs http</a> built-in module:</p>\n<pre>\nconst http = require('http');\nconst srv = http.createServer((req, res) =&gt; {\n  res.writeHead(200, { 'Access-Control-Allow-Origin': '*' }); // Sensitive\n  res.end('ok');\n});\nsrv.listen(3000);\n</pre>\n<p><a href=""https://www.npmjs.com/package/express"">Express.js</a> framework with <a href=""https://www.npmjs.com/package/cors"">cors middleware</a>:</p>\n<pre>\nconst cors = require('cors');\nlet app1 = express();\napp1.use(cors()); // Sensitive: by default origin is set to *\nlet corsOptions = {\n  origin: '*' // Sensitive\n};\nlet app2 = express();\napp2.use(cors(corsOptions));\n</pre>\n<p>User-controlled origin:</p>\n<pre>\nfunction (req, res) {\n  const origin = req.header('Origin');\n  res.setHeader('Access-Control-Allow-Origin', origin); // Sensitive\n};\n</pre>\n<h2>Compliant Solution</h2>\n<p><a href=""https://nodejs.org/api/http.html"">nodejs http</a> built-in module:</p>\n<pre>\nconst http = require('http');\nconst srv = http.createServer((req, res) =&gt; {\n  res.writeHead(200, { 'Access-Control-Allow-Origin': 'trustedwebsite.com' }); // Compliant\n  res.end('ok');\n});\nsrv.listen(3000);\n</pre>\n<p><a href=""https://www.npmjs.com/package/express"">Express.js</a> framework with <a href=""https://www.npmjs.com/package/cors"">cors middleware</a>:</p>\n<pre>\nconst cors = require('cors');\nlet corsOptions = {\n  origin: 'trustedwebsite.com' // Compliant\n};\nlet app = express();\napp.use(cors(corsOptions));\n</pre>\n<p>User-controlled origin validated with an allow-list:</p>\n<pre>\nfunction (req, res) {\n  const origin = req.header('Origin');\n  if (trustedOrigins.indexOf(origin) &gt;= 0) {\n    res.setHeader('Access-Control-Allow-Origin', origin);\n  }\n};\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://owasp.org/Top10/A05_2021-Security_Misconfiguration/"">OWASP Top 10 2021 Category A5</a> - Security Misconfiguration </li>\n  <li> <a href=""https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/"">OWASP Top 10 2021 Category A7</a> - Identification and\n  Authentication Failures </li>\n  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"">developer.mozilla.org</a> - CORS </li>\n  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy"">developer.mozilla.org</a> - Same origin policy </li>\n  <li> <a href=""https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration"">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=""https://cheatsheetseries.owasp.org/cheatsheets/HTML5_Security_Cheat_Sheet.html#cross-origin-resource-sharing"">OWASP HTML5 Security\n  Cheat Sheet</a> - Cross Origin Resource Sharing </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/346"">MITRE, CWE-346</a> - Origin Validation Error </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/942"">MITRE, CWE-942</a> - Overly Permissive Cross-domain Whitelist </li>\n  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>\n</ul>",MINOR,READY,false,,"cwe,express.js,sans-top25-porous",js,JavaScript,[],SECURITY_HOTSPOT,false,MAIN,false,"[{""key"":""how_to_fix"",""content"":""<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> The <code>Access-Control-Allow-Origin</code> header should be set only for a trusted origin and for specific resources. </li>\n  <li> Allow only selected, trusted domains in the <code>Access-Control-Allow-Origin</code> header. Prefer whitelisting domains over blacklisting or\n  allowing any domain (do not use * wildcard nor blindly return the <code>Origin</code> header content without any checks). </li>\n</ul>\n<h2>Compliant Solution</h2>\n<p><a href=\""https://nodejs.org/api/http.html\"">nodejs http</a> built-in module:</p>\n<pre>\nconst http = require('http');\nconst srv = http.createServer((req, res) =&gt; {\n  res.writeHead(200, { 'Access-Control-Allow-Origin': 'trustedwebsite.com' }); // Compliant\n  res.end('ok');\n});\nsrv.listen(3000);\n</pre>\n<p><a href=\""https://www.npmjs.com/package/express\"">Express.js</a> framework with <a href=\""https://www.npmjs.com/package/cors\"">cors middleware</a>:</p>\n<pre>\nconst cors = require('cors');\n\nlet corsOptions = {\n  origin: 'trustedwebsite.com' // Compliant\n};\n\nlet app = express();\napp.use(cors(corsOptions));\n</pre>\n<p>User-controlled origin validated with an allow-list:</p>\n<pre>\nfunction (req, res) {\n  const origin = req.header('Origin');\n\n  if (trustedOrigins.indexOf(origin) &gt;= 0) {\n    res.setHeader('Access-Control-Allow-Origin', origin);\n  }\n};\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\""https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"">OWASP Top 10 2021 Category A5</a> - Security Misconfiguration </li>\n  <li> <a href=\""https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"">OWASP Top 10 2021 Category A7</a> - Identification and\n  Authentication Failures </li>\n  <li> <a href=\""https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\"">developer.mozilla.org</a> - CORS </li>\n  <li> <a href=\""https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\"">developer.mozilla.org</a> - Same origin policy </li>\n  <li> <a href=\""https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\""https://cheatsheetseries.owasp.org/cheatsheets/HTML5_Security_Cheat_Sheet.html#cross-origin-resource-sharing\"">OWASP HTML5 Security\n  Cheat Sheet</a> - Cross Origin Resource Sharing </li>\n  <li> <a href=\""https://cwe.mitre.org/data/definitions/346\"">MITRE, CWE-346</a> - Origin Validation Error </li>\n  <li> <a href=\""https://cwe.mitre.org/data/definitions/942\"">MITRE, CWE-942</a> - Overly Permissive Cross-domain Whitelist </li>\n  <li> <a href=\""https://www.sans.org/top25-software-errors/#cat3\"">SANS Top 25</a> - Porous Defenses </li>\n</ul>""},{""key"":""root_cause"",""content"":""<p>Having a permissive Cross-Origin Resource Sharing policy is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0269\"">CVE-2018-0269</a> </li>\n  <li> <a href=\""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14460\"">CVE-2017-14460</a> </li>\n</ul>\n<p><a href=\""https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\"">Same origin policy</a> in browsers prevents, by default and for\nsecurity-reasons, a javascript frontend to perform a cross-origin HTTP request to a resource that has a different origin (domain, protocol, or port)\nfrom its own. The requested target can append additional HTTP headers in response, called <a\nhref=\""https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\"">CORS</a>, that act like directives for the browser and change the access control policy\n/ relax the same origin policy.</p>\n""},{""key"":""assess_the_problem"",""content"":""<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> You don’t trust the origin specified, example: <code>Access-Control-Allow-Origin: untrustedwebsite.com</code>. </li>\n  <li> Access control policy is entirely disabled: <code>Access-Control-Allow-Origin: *</code> </li>\n  <li> Your access control policy is dynamically defined by a user-controlled input like <a\n  href=\""https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin\""><code>origin</code></a> header. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Sensitive Code Example</h2>\n<p><a href=\""https://nodejs.org/api/http.html\"">nodejs http</a> built-in module:</p>\n<pre>\nconst http = require('http');\nconst srv = http.createServer((req, res) =&gt; {\n  res.writeHead(200, { 'Access-Control-Allow-Origin': '*' }); // Sensitive\n  res.end('ok');\n});\nsrv.listen(3000);\n</pre>\n<p><a href=\""https://www.npmjs.com/package/express\"">Express.js</a> framework with <a href=\""https://www.npmjs.com/package/cors\"">cors middleware</a>:</p>\n<pre>\nconst cors = require('cors');\n\nlet app1 = express();\napp1.use(cors()); // Sensitive: by default origin is set to *\n\nlet corsOptions = {\n  origin: '*' // Sensitive\n};\n\nlet app2 = express();\napp2.use(cors(corsOptions));\n</pre>\n<p>User-controlled origin:</p>\n<pre>\nfunction (req, res) {\n  const origin = req.header('Origin');\n  res.setHeader('Access-Control-Allow-Origin', origin); // Sensitive\n};\n</pre>\n""}]",[]
AYaoGdil_dtLGUU1PCnR,joshua-quek-sonarsource_joshua-quek-sonarsource_AYaiptbyAu8T8ZieRld0,main,server/start.js,20,Refactor this code to not use nested template literals.,OPEN,,2023-03-03T15:31:16+0000,2023-07-02T13:55:29+0000,javascript:S4624,[object Object],CODE_SMELL,MAJOR,10,"brain-overload,confusing",,,javascript:S4624,javascript,Template literals should not be nested,2023-02-21T15:21:22+0000,"<p>Template literals (previously named ""template strings"") are an elegant way to build a string without using the <code>+</code> operator to make\nstrings concatenation more readable.</p>\n<p>However, it’s possible to build complex string literals by nesting together multiple template literals, and therefore lose readability and\nmaintainability.</p>\n<p>In such situations, it’s preferable to move the nested template into a separate statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet color = ""red"";\nlet count = 3;\nlet message = `I have ${color ? `${count} ${color}` : count} apples`; // Noncompliant; nested template strings not easy to read\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet color = ""red"";\nlet count = 3;\nlet apples = color ? `${count} ${color}` : count;\nlet message = `I have ${apples} apples`;\n</pre>","<p>Template literals (previously named ""template strings"") are an elegant way to build a string without using the <code>+</code> operator to make\nstrings concatenation more readable.</p>\n<p>However, it’s possible to build complex string literals by nesting together multiple template literals, and therefore lose readability and\nmaintainability.</p>\n<p>In such situations, it’s preferable to move the nested template into a separate statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet color = ""red"";\nlet count = 3;\nlet message = `I have ${color ? `${count} ${color}` : count} apples`; // Noncompliant; nested template strings not easy to read\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet color = ""red"";\nlet count = 3;\nlet apples = color ? `${count} ${color}` : count;\nlet message = `I have ${apples} apples`;\n</pre>",MAJOR,READY,false,,"brain-overload,confusing",js,JavaScript,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>Template literals (previously named \""template strings\"") are an elegant way to build a string without using the <code>+</code> operator to make\nstrings concatenation more readable.</p>\n<p>However, it’s possible to build complex string literals by nesting together multiple template literals, and therefore lose readability and\nmaintainability.</p>\n<p>In such situations, it’s preferable to move the nested template into a separate statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet color = \""red\"";\nlet count = 3;\nlet message = `I have ${color ? `${count} ${color}` : count} apples`; // Noncompliant; nested template strings not easy to read\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet color = \""red\"";\nlet count = 3;\nlet apples = color ? `${count} ${color}` : count;\nlet message = `I have ${apples} apples`;\n</pre>""}]",[]
AYZ9hRjB_dtLGUU1O__b,joshua-quek-sonarsource_nodejs-sonar-bitbucket_AYZ8_EMPAu8T8ZieRlaH,main,server/libs/services/express-service/index.js,18,Make sure that enabling CORS is safe here.,TO_REVIEW,joshua.quek.fullstack@gmail.com,2022-12-19T02:16:04+0000,2023-04-20T05:15:55+0000,javascript:S5122,[object Object],SECURITY_HOTSPOT,,,,insecure-conf,LOW,javascript:S5122,javascript,Having a permissive Cross-Origin Resource Sharing policy is security-sensitive,2023-02-21T15:21:21+0000,"<p>Having a permissive Cross-Origin Resource Sharing policy is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0269"">CVE-2018-0269</a> </li>\n  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14460"">CVE-2017-14460</a> </li>\n</ul>\n<p><a href=""https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy"">Same origin policy</a> in browsers prevents, by default and for\nsecurity-reasons, a javascript frontend to perform a cross-origin HTTP request to a resource that has a different origin (domain, protocol, or port)\nfrom its own. The requested target can append additional HTTP headers in response, called <a\nhref=""https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"">CORS</a>, that act like directives for the browser and change the access control policy\n/ relax the same origin policy.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> You don’t trust the origin specified, example: <code>Access-Control-Allow-Origin: untrustedwebsite.com</code>. </li>\n  <li> Access control policy is entirely disabled: <code>Access-Control-Allow-Origin: *</code> </li>\n  <li> Your access control policy is dynamically defined by a user-controlled input like <a\n  href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin""><code>origin</code></a> header. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> The <code>Access-Control-Allow-Origin</code> header should be set only for a trusted origin and for specific resources. </li>\n  <li> Allow only selected, trusted domains in the <code>Access-Control-Allow-Origin</code> header. Prefer whitelisting domains over blacklisting or\n  allowing any domain (do not use * wildcard nor blindly return the <code>Origin</code> header content without any checks). </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p><a href=""https://nodejs.org/api/http.html"">nodejs http</a> built-in module:</p>\n<pre>\nconst http = require('http');\nconst srv = http.createServer((req, res) =&gt; {\n  res.writeHead(200, { 'Access-Control-Allow-Origin': '*' }); // Sensitive\n  res.end('ok');\n});\nsrv.listen(3000);\n</pre>\n<p><a href=""https://www.npmjs.com/package/express"">Express.js</a> framework with <a href=""https://www.npmjs.com/package/cors"">cors middleware</a>:</p>\n<pre>\nconst cors = require('cors');\nlet app1 = express();\napp1.use(cors()); // Sensitive: by default origin is set to *\nlet corsOptions = {\n  origin: '*' // Sensitive\n};\nlet app2 = express();\napp2.use(cors(corsOptions));\n</pre>\n<p>User-controlled origin:</p>\n<pre>\nfunction (req, res) {\n  const origin = req.header('Origin');\n  res.setHeader('Access-Control-Allow-Origin', origin); // Sensitive\n};\n</pre>\n<h2>Compliant Solution</h2>\n<p><a href=""https://nodejs.org/api/http.html"">nodejs http</a> built-in module:</p>\n<pre>\nconst http = require('http');\nconst srv = http.createServer((req, res) =&gt; {\n  res.writeHead(200, { 'Access-Control-Allow-Origin': 'trustedwebsite.com' }); // Compliant\n  res.end('ok');\n});\nsrv.listen(3000);\n</pre>\n<p><a href=""https://www.npmjs.com/package/express"">Express.js</a> framework with <a href=""https://www.npmjs.com/package/cors"">cors middleware</a>:</p>\n<pre>\nconst cors = require('cors');\nlet corsOptions = {\n  origin: 'trustedwebsite.com' // Compliant\n};\nlet app = express();\napp.use(cors(corsOptions));\n</pre>\n<p>User-controlled origin validated with an allow-list:</p>\n<pre>\nfunction (req, res) {\n  const origin = req.header('Origin');\n  if (trustedOrigins.indexOf(origin) &gt;= 0) {\n    res.setHeader('Access-Control-Allow-Origin', origin);\n  }\n};\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://owasp.org/Top10/A05_2021-Security_Misconfiguration/"">OWASP Top 10 2021 Category A5</a> - Security Misconfiguration </li>\n  <li> <a href=""https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/"">OWASP Top 10 2021 Category A7</a> - Identification and\n  Authentication Failures </li>\n  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"">developer.mozilla.org</a> - CORS </li>\n  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy"">developer.mozilla.org</a> - Same origin policy </li>\n  <li> <a href=""https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration"">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=""https://cheatsheetseries.owasp.org/cheatsheets/HTML5_Security_Cheat_Sheet.html#cross-origin-resource-sharing"">OWASP HTML5 Security\n  Cheat Sheet</a> - Cross Origin Resource Sharing </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/346"">MITRE, CWE-346</a> - Origin Validation Error </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/942"">MITRE, CWE-942</a> - Overly Permissive Cross-domain Whitelist </li>\n  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>\n</ul>","<p>Having a permissive Cross-Origin Resource Sharing policy is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0269"">CVE-2018-0269</a> </li>\n  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14460"">CVE-2017-14460</a> </li>\n</ul>\n<p><a href=""https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy"">Same origin policy</a> in browsers prevents, by default and for\nsecurity-reasons, a javascript frontend to perform a cross-origin HTTP request to a resource that has a different origin (domain, protocol, or port)\nfrom its own. The requested target can append additional HTTP headers in response, called <a\nhref=""https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"">CORS</a>, that act like directives for the browser and change the access control policy\n/ relax the same origin policy.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> You don’t trust the origin specified, example: <code>Access-Control-Allow-Origin: untrustedwebsite.com</code>. </li>\n  <li> Access control policy is entirely disabled: <code>Access-Control-Allow-Origin: *</code> </li>\n  <li> Your access control policy is dynamically defined by a user-controlled input like <a\n  href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin""><code>origin</code></a> header. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> The <code>Access-Control-Allow-Origin</code> header should be set only for a trusted origin and for specific resources. </li>\n  <li> Allow only selected, trusted domains in the <code>Access-Control-Allow-Origin</code> header. Prefer whitelisting domains over blacklisting or\n  allowing any domain (do not use * wildcard nor blindly return the <code>Origin</code> header content without any checks). </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p><a href=""https://nodejs.org/api/http.html"">nodejs http</a> built-in module:</p>\n<pre>\nconst http = require('http');\nconst srv = http.createServer((req, res) =&gt; {\n  res.writeHead(200, { 'Access-Control-Allow-Origin': '*' }); // Sensitive\n  res.end('ok');\n});\nsrv.listen(3000);\n</pre>\n<p><a href=""https://www.npmjs.com/package/express"">Express.js</a> framework with <a href=""https://www.npmjs.com/package/cors"">cors middleware</a>:</p>\n<pre>\nconst cors = require('cors');\nlet app1 = express();\napp1.use(cors()); // Sensitive: by default origin is set to *\nlet corsOptions = {\n  origin: '*' // Sensitive\n};\nlet app2 = express();\napp2.use(cors(corsOptions));\n</pre>\n<p>User-controlled origin:</p>\n<pre>\nfunction (req, res) {\n  const origin = req.header('Origin');\n  res.setHeader('Access-Control-Allow-Origin', origin); // Sensitive\n};\n</pre>\n<h2>Compliant Solution</h2>\n<p><a href=""https://nodejs.org/api/http.html"">nodejs http</a> built-in module:</p>\n<pre>\nconst http = require('http');\nconst srv = http.createServer((req, res) =&gt; {\n  res.writeHead(200, { 'Access-Control-Allow-Origin': 'trustedwebsite.com' }); // Compliant\n  res.end('ok');\n});\nsrv.listen(3000);\n</pre>\n<p><a href=""https://www.npmjs.com/package/express"">Express.js</a> framework with <a href=""https://www.npmjs.com/package/cors"">cors middleware</a>:</p>\n<pre>\nconst cors = require('cors');\nlet corsOptions = {\n  origin: 'trustedwebsite.com' // Compliant\n};\nlet app = express();\napp.use(cors(corsOptions));\n</pre>\n<p>User-controlled origin validated with an allow-list:</p>\n<pre>\nfunction (req, res) {\n  const origin = req.header('Origin');\n  if (trustedOrigins.indexOf(origin) &gt;= 0) {\n    res.setHeader('Access-Control-Allow-Origin', origin);\n  }\n};\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://owasp.org/Top10/A05_2021-Security_Misconfiguration/"">OWASP Top 10 2021 Category A5</a> - Security Misconfiguration </li>\n  <li> <a href=""https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/"">OWASP Top 10 2021 Category A7</a> - Identification and\n  Authentication Failures </li>\n  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"">developer.mozilla.org</a> - CORS </li>\n  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy"">developer.mozilla.org</a> - Same origin policy </li>\n  <li> <a href=""https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration"">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=""https://cheatsheetseries.owasp.org/cheatsheets/HTML5_Security_Cheat_Sheet.html#cross-origin-resource-sharing"">OWASP HTML5 Security\n  Cheat Sheet</a> - Cross Origin Resource Sharing </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/346"">MITRE, CWE-346</a> - Origin Validation Error </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/942"">MITRE, CWE-942</a> - Overly Permissive Cross-domain Whitelist </li>\n  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>\n</ul>",MINOR,READY,false,,"cwe,express.js,sans-top25-porous",js,JavaScript,[],SECURITY_HOTSPOT,false,MAIN,false,"[{""key"":""how_to_fix"",""content"":""<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> The <code>Access-Control-Allow-Origin</code> header should be set only for a trusted origin and for specific resources. </li>\n  <li> Allow only selected, trusted domains in the <code>Access-Control-Allow-Origin</code> header. Prefer whitelisting domains over blacklisting or\n  allowing any domain (do not use * wildcard nor blindly return the <code>Origin</code> header content without any checks). </li>\n</ul>\n<h2>Compliant Solution</h2>\n<p><a href=\""https://nodejs.org/api/http.html\"">nodejs http</a> built-in module:</p>\n<pre>\nconst http = require('http');\nconst srv = http.createServer((req, res) =&gt; {\n  res.writeHead(200, { 'Access-Control-Allow-Origin': 'trustedwebsite.com' }); // Compliant\n  res.end('ok');\n});\nsrv.listen(3000);\n</pre>\n<p><a href=\""https://www.npmjs.com/package/express\"">Express.js</a> framework with <a href=\""https://www.npmjs.com/package/cors\"">cors middleware</a>:</p>\n<pre>\nconst cors = require('cors');\n\nlet corsOptions = {\n  origin: 'trustedwebsite.com' // Compliant\n};\n\nlet app = express();\napp.use(cors(corsOptions));\n</pre>\n<p>User-controlled origin validated with an allow-list:</p>\n<pre>\nfunction (req, res) {\n  const origin = req.header('Origin');\n\n  if (trustedOrigins.indexOf(origin) &gt;= 0) {\n    res.setHeader('Access-Control-Allow-Origin', origin);\n  }\n};\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\""https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"">OWASP Top 10 2021 Category A5</a> - Security Misconfiguration </li>\n  <li> <a href=\""https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"">OWASP Top 10 2021 Category A7</a> - Identification and\n  Authentication Failures </li>\n  <li> <a href=\""https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\"">developer.mozilla.org</a> - CORS </li>\n  <li> <a href=\""https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\"">developer.mozilla.org</a> - Same origin policy </li>\n  <li> <a href=\""https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\""https://cheatsheetseries.owasp.org/cheatsheets/HTML5_Security_Cheat_Sheet.html#cross-origin-resource-sharing\"">OWASP HTML5 Security\n  Cheat Sheet</a> - Cross Origin Resource Sharing </li>\n  <li> <a href=\""https://cwe.mitre.org/data/definitions/346\"">MITRE, CWE-346</a> - Origin Validation Error </li>\n  <li> <a href=\""https://cwe.mitre.org/data/definitions/942\"">MITRE, CWE-942</a> - Overly Permissive Cross-domain Whitelist </li>\n  <li> <a href=\""https://www.sans.org/top25-software-errors/#cat3\"">SANS Top 25</a> - Porous Defenses </li>\n</ul>""},{""key"":""root_cause"",""content"":""<p>Having a permissive Cross-Origin Resource Sharing policy is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0269\"">CVE-2018-0269</a> </li>\n  <li> <a href=\""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14460\"">CVE-2017-14460</a> </li>\n</ul>\n<p><a href=\""https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\"">Same origin policy</a> in browsers prevents, by default and for\nsecurity-reasons, a javascript frontend to perform a cross-origin HTTP request to a resource that has a different origin (domain, protocol, or port)\nfrom its own. The requested target can append additional HTTP headers in response, called <a\nhref=\""https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\"">CORS</a>, that act like directives for the browser and change the access control policy\n/ relax the same origin policy.</p>\n""},{""key"":""assess_the_problem"",""content"":""<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> You don’t trust the origin specified, example: <code>Access-Control-Allow-Origin: untrustedwebsite.com</code>. </li>\n  <li> Access control policy is entirely disabled: <code>Access-Control-Allow-Origin: *</code> </li>\n  <li> Your access control policy is dynamically defined by a user-controlled input like <a\n  href=\""https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin\""><code>origin</code></a> header. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Sensitive Code Example</h2>\n<p><a href=\""https://nodejs.org/api/http.html\"">nodejs http</a> built-in module:</p>\n<pre>\nconst http = require('http');\nconst srv = http.createServer((req, res) =&gt; {\n  res.writeHead(200, { 'Access-Control-Allow-Origin': '*' }); // Sensitive\n  res.end('ok');\n});\nsrv.listen(3000);\n</pre>\n<p><a href=\""https://www.npmjs.com/package/express\"">Express.js</a> framework with <a href=\""https://www.npmjs.com/package/cors\"">cors middleware</a>:</p>\n<pre>\nconst cors = require('cors');\n\nlet app1 = express();\napp1.use(cors()); // Sensitive: by default origin is set to *\n\nlet corsOptions = {\n  origin: '*' // Sensitive\n};\n\nlet app2 = express();\napp2.use(cors(corsOptions));\n</pre>\n<p>User-controlled origin:</p>\n<pre>\nfunction (req, res) {\n  const origin = req.header('Origin');\n  res.setHeader('Access-Control-Allow-Origin', origin); // Sensitive\n};\n</pre>\n""}]",[]
AYZ9hRgf_dtLGUU1O__V,joshua-quek-sonarsource_nodejs-sonar-bitbucket_AYZ8_EMPAu8T8ZieRlaH,main,server/app/routes/authentication/postgres-user-pass/register-user/validator.js,33,Use concise character class syntax '\d' instead of '[0-9]'.,OPEN,joshua.quek.fullstack@gmail.com,2022-12-19T02:16:04+0000,2023-07-05T06:47:50+0000,javascript:S6353,[object Object],CODE_SMELL,MINOR,5,regex,,,javascript:S6353,javascript,Regular expression quantifiers and character classes should be used concisely,2023-02-21T15:21:21+0000,"<p>With regular expressions syntax, it’s possible to express the same thing in many ways. For example, to match a two-digit number, one could write\n<code>[0-9]{2,2}</code> or <code>\d{2}</code>. Latter is not only shorter in terms of expression length, but also easier to read and thus to maintain.\nThis rule recommends to replace some bulky quantifiers and character classes with more concise equivalents:</p>\n<ul>\n  <li> <code>\d</code> for <code>[0-9]</code> and <code>\D</code> for <code>[^0-9]</code> </li>\n  <li> <code>\w</code> for <code>[A-Za-z0-9_]</code> and <code>\W</code> for <code>[^A-Za-z0-9_]</code> </li>\n  <li> <code>.</code> for character classes matching everything (e.g. <code>[\w\W]</code>, <code>[\d\D]</code>, or <code>[\s\S]</code> with\n  <code>s</code> flag) </li>\n  <li> <code>x?</code> for <code>x{0,1}</code>, <code>x*</code> for <code>x{0,}</code>, <code>x+</code> for <code>x{1,}</code>, <code>x{N}</code> for\n  <code>x{N,N}</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/a{1,}/; // Noncompliant, '{1,}' quantifier is the same as '+'\n/[A-Za-z0-9_]/; // Noncompliant, '\w' is equivalent\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/a+/;\n/\w/;\n</pre>","<p>With regular expressions syntax, it’s possible to express the same thing in many ways. For example, to match a two-digit number, one could write\n<code>[0-9]{2,2}</code> or <code>\d{2}</code>. Latter is not only shorter in terms of expression length, but also easier to read and thus to maintain.\nThis rule recommends to replace some bulky quantifiers and character classes with more concise equivalents:</p>\n<ul>\n  <li> <code>\d</code> for <code>[0-9]</code> and <code>\D</code> for <code>[^0-9]</code> </li>\n  <li> <code>\w</code> for <code>[A-Za-z0-9_]</code> and <code>\W</code> for <code>[^A-Za-z0-9_]</code> </li>\n  <li> <code>.</code> for character classes matching everything (e.g. <code>[\w\W]</code>, <code>[\d\D]</code>, or <code>[\s\S]</code> with\n  <code>s</code> flag) </li>\n  <li> <code>x?</code> for <code>x{0,1}</code>, <code>x*</code> for <code>x{0,}</code>, <code>x+</code> for <code>x{1,}</code>, <code>x{N}</code> for\n  <code>x{N,N}</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/a{1,}/; // Noncompliant, '{1,}' quantifier is the same as '+'\n/[A-Za-z0-9_]/; // Noncompliant, '\w' is equivalent\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/a+/;\n/\w/;\n</pre>",MINOR,READY,false,,regex,js,JavaScript,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>With regular expressions syntax, it’s possible to express the same thing in many ways. For example, to match a two-digit number, one could write\n<code>[0-9]{2,2}</code> or <code>\\d{2}</code>. Latter is not only shorter in terms of expression length, but also easier to read and thus to maintain.\nThis rule recommends to replace some bulky quantifiers and character classes with more concise equivalents:</p>\n<ul>\n  <li> <code>\\d</code> for <code>[0-9]</code> and <code>\\D</code> for <code>[^0-9]</code> </li>\n  <li> <code>\\w</code> for <code>[A-Za-z0-9_]</code> and <code>\\W</code> for <code>[^A-Za-z0-9_]</code> </li>\n  <li> <code>.</code> for character classes matching everything (e.g. <code>[\\w\\W]</code>, <code>[\\d\\D]</code>, or <code>[\\s\\S]</code> with\n  <code>s</code> flag) </li>\n  <li> <code>x?</code> for <code>x{0,1}</code>, <code>x*</code> for <code>x{0,}</code>, <code>x+</code> for <code>x{1,}</code>, <code>x{N}</code> for\n  <code>x{N,N}</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/a{1,}/; // Noncompliant, '{1,}' quantifier is the same as '+'\n/[A-Za-z0-9_]/; // Noncompliant, '\\w' is equivalent\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/a+/;\n/\\w/;\n</pre>""}]",[]
AYZ9hRh3_dtLGUU1O__W,joshua-quek-sonarsource_nodejs-sonar-bitbucket_AYZ8_EMPAu8T8ZieRlaH,main,server/app/routes/authentication/postgres-user-pass/login-user/validator.js,33,Use concise character class syntax '\d' instead of '[0-9]'.,OPEN,joshua.quek.fullstack@gmail.com,2022-12-19T02:16:04+0000,2023-07-05T06:47:42+0000,javascript:S6353,[object Object],CODE_SMELL,MINOR,5,regex,,,javascript:S6353,javascript,Regular expression quantifiers and character classes should be used concisely,2023-02-21T15:21:21+0000,"<p>With regular expressions syntax, it’s possible to express the same thing in many ways. For example, to match a two-digit number, one could write\n<code>[0-9]{2,2}</code> or <code>\d{2}</code>. Latter is not only shorter in terms of expression length, but also easier to read and thus to maintain.\nThis rule recommends to replace some bulky quantifiers and character classes with more concise equivalents:</p>\n<ul>\n  <li> <code>\d</code> for <code>[0-9]</code> and <code>\D</code> for <code>[^0-9]</code> </li>\n  <li> <code>\w</code> for <code>[A-Za-z0-9_]</code> and <code>\W</code> for <code>[^A-Za-z0-9_]</code> </li>\n  <li> <code>.</code> for character classes matching everything (e.g. <code>[\w\W]</code>, <code>[\d\D]</code>, or <code>[\s\S]</code> with\n  <code>s</code> flag) </li>\n  <li> <code>x?</code> for <code>x{0,1}</code>, <code>x*</code> for <code>x{0,}</code>, <code>x+</code> for <code>x{1,}</code>, <code>x{N}</code> for\n  <code>x{N,N}</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/a{1,}/; // Noncompliant, '{1,}' quantifier is the same as '+'\n/[A-Za-z0-9_]/; // Noncompliant, '\w' is equivalent\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/a+/;\n/\w/;\n</pre>","<p>With regular expressions syntax, it’s possible to express the same thing in many ways. For example, to match a two-digit number, one could write\n<code>[0-9]{2,2}</code> or <code>\d{2}</code>. Latter is not only shorter in terms of expression length, but also easier to read and thus to maintain.\nThis rule recommends to replace some bulky quantifiers and character classes with more concise equivalents:</p>\n<ul>\n  <li> <code>\d</code> for <code>[0-9]</code> and <code>\D</code> for <code>[^0-9]</code> </li>\n  <li> <code>\w</code> for <code>[A-Za-z0-9_]</code> and <code>\W</code> for <code>[^A-Za-z0-9_]</code> </li>\n  <li> <code>.</code> for character classes matching everything (e.g. <code>[\w\W]</code>, <code>[\d\D]</code>, or <code>[\s\S]</code> with\n  <code>s</code> flag) </li>\n  <li> <code>x?</code> for <code>x{0,1}</code>, <code>x*</code> for <code>x{0,}</code>, <code>x+</code> for <code>x{1,}</code>, <code>x{N}</code> for\n  <code>x{N,N}</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/a{1,}/; // Noncompliant, '{1,}' quantifier is the same as '+'\n/[A-Za-z0-9_]/; // Noncompliant, '\w' is equivalent\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/a+/;\n/\w/;\n</pre>",MINOR,READY,false,,regex,js,JavaScript,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>With regular expressions syntax, it’s possible to express the same thing in many ways. For example, to match a two-digit number, one could write\n<code>[0-9]{2,2}</code> or <code>\\d{2}</code>. Latter is not only shorter in terms of expression length, but also easier to read and thus to maintain.\nThis rule recommends to replace some bulky quantifiers and character classes with more concise equivalents:</p>\n<ul>\n  <li> <code>\\d</code> for <code>[0-9]</code> and <code>\\D</code> for <code>[^0-9]</code> </li>\n  <li> <code>\\w</code> for <code>[A-Za-z0-9_]</code> and <code>\\W</code> for <code>[^A-Za-z0-9_]</code> </li>\n  <li> <code>.</code> for character classes matching everything (e.g. <code>[\\w\\W]</code>, <code>[\\d\\D]</code>, or <code>[\\s\\S]</code> with\n  <code>s</code> flag) </li>\n  <li> <code>x?</code> for <code>x{0,1}</code>, <code>x*</code> for <code>x{0,}</code>, <code>x+</code> for <code>x{1,}</code>, <code>x{N}</code> for\n  <code>x{N,N}</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/a{1,}/; // Noncompliant, '{1,}' quantifier is the same as '+'\n/[A-Za-z0-9_]/; // Noncompliant, '\\w' is equivalent\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/a+/;\n/\\w/;\n</pre>""}]",[]
AYZ9hRiX_dtLGUU1O__X,joshua-quek-sonarsource_nodejs-sonar-bitbucket_AYZ8_EMPAu8T8ZieRlaH,main,server/libs/utils/response-util/index.js,10,Refactor this function to reduce its Cognitive Complexity from 16 to the 15 allowed.,OPEN,joshua.quek.fullstack@gmail.com,2022-12-19T02:16:04+0000,2023-07-05T06:48:00+0000,javascript:S3776,[object Object],CODE_SMELL,CRITICAL,6,brain-overload,,,javascript:S3776,javascript,Cognitive Complexity of functions should not be too high,2023-02-21T15:21:22+0000,"<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be\ndifficult to maintain.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://www.sonarsource.com/docs/CognitiveComplexity.pdf"">Cognitive Complexity</a> </li>\n</ul>","<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be\ndifficult to maintain.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://www.sonarsource.com/docs/CognitiveComplexity.pdf"">Cognitive Complexity</a> </li>\n</ul>",CRITICAL,READY,false,,brain-overload,js,JavaScript,"[{""key"":""threshold"",""htmlDesc"":""The maximum authorized complexity."",""defaultValue"":""15"",""type"":""INTEGER""}]",CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be\ndifficult to maintain.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\""https://www.sonarsource.com/docs/CognitiveComplexity.pdf\"">Cognitive Complexity</a> </li>\n</ul>""}]",[]
AYZ9hRiv_dtLGUU1O__a,joshua-quek-sonarsource_nodejs-sonar-bitbucket_AYZ8_EMPAu8T8ZieRlaH,main,server/libs/utils/passport-util/user-object.js,7,Review this potentially hardcoded credential.,TO_REVIEW,joshua.quek.fullstack@gmail.com,2022-12-19T02:16:04+0000,2023-04-20T05:15:38+0000,javascript:S2068,[object Object],SECURITY_HOTSPOT,,,,auth,HIGH,javascript:S2068,javascript,Hard-coded credentials are security-sensitive,2023-02-21T15:21:22+0000,"<p>Because it is easy to extract strings from an application source code or binary, credentials should not be hard-coded. This is particularly true\nfor applications that are distributed or that are open-source.</p>\n<p>In the past, it has led to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13466"">CVE-2019-13466</a> </li>\n  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-15389"">CVE-2018-15389</a> </li>\n</ul>\n<p>Credentials should be stored outside of the code in a configuration file, a database, or a management service for secrets.</p>\n<p>This rule flags instances of hard-coded credentials used in database and LDAP connections. It looks for hard-coded credentials in connection\nstrings, and for variable names that match any of the patterns from the provided list.</p>\n<p>It’s recommended to customize the configuration of this rule with additional credential words such as ""oauthToken"", ""secret"", …​</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Credentials allow access to a sensitive component like a database, a file storage, an API or a service. </li>\n  <li> Credentials are used in production environments. </li>\n  <li> Application re-distribution is required before updating the credentials. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Store the credentials in a configuration file that is not pushed to the code repository. </li>\n  <li> Store the credentials in a database. </li>\n  <li> Use your cloud provider’s service for managing secrets. </li>\n  <li> If a password has been disclosed through the source code: change it. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nvar mysql = require('mysql');\nvar connection = mysql.createConnection(\n{\n  host:'localhost',\n  user: ""admin"",\n  database: ""project"",\n  password: ""mypassword"", // sensitive\n  multipleStatements: true\n});\nconnection.connect();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar mysql = require('mysql');\nvar connection = mysql.createConnection({\n  host: process.env.MYSQL_URL,\n  user: process.env.MYSQL_USERNAME,\n  password: process.env.MYSQL_PASSWORD,\n  database: process.env.MYSQL_DATABASE\n});\nconnection.connect();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/"">OWASP Top 10 2021 Category A7</a> - Identification and\n  Authentication Failures </li>\n  <li> <a href=""https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication"">OWASP Top 10 2017 Category A2</a> - Broken Authentication\n  </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/798"">MITRE, CWE-798</a> - Use of Hard-coded Credentials </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/259"">MITRE, CWE-259</a> - Use of Hard-coded Password </li>\n  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>\n  <li> Derived from FindSecBugs rule <a href=""https://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD"">Hard Coded Password</a> </li>\n</ul>","<p>Because it is easy to extract strings from an application source code or binary, credentials should not be hard-coded. This is particularly true\nfor applications that are distributed or that are open-source.</p>\n<p>In the past, it has led to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13466"">CVE-2019-13466</a> </li>\n  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-15389"">CVE-2018-15389</a> </li>\n</ul>\n<p>Credentials should be stored outside of the code in a configuration file, a database, or a management service for secrets.</p>\n<p>This rule flags instances of hard-coded credentials used in database and LDAP connections. It looks for hard-coded credentials in connection\nstrings, and for variable names that match any of the patterns from the provided list.</p>\n<p>It’s recommended to customize the configuration of this rule with additional credential words such as ""oauthToken"", ""secret"", …​</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Credentials allow access to a sensitive component like a database, a file storage, an API or a service. </li>\n  <li> Credentials are used in production environments. </li>\n  <li> Application re-distribution is required before updating the credentials. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Store the credentials in a configuration file that is not pushed to the code repository. </li>\n  <li> Store the credentials in a database. </li>\n  <li> Use your cloud provider’s service for managing secrets. </li>\n  <li> If a password has been disclosed through the source code: change it. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nvar mysql = require('mysql');\nvar connection = mysql.createConnection(\n{\n  host:'localhost',\n  user: ""admin"",\n  database: ""project"",\n  password: ""mypassword"", // sensitive\n  multipleStatements: true\n});\nconnection.connect();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar mysql = require('mysql');\nvar connection = mysql.createConnection({\n  host: process.env.MYSQL_URL,\n  user: process.env.MYSQL_USERNAME,\n  password: process.env.MYSQL_PASSWORD,\n  database: process.env.MYSQL_DATABASE\n});\nconnection.connect();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/"">OWASP Top 10 2021 Category A7</a> - Identification and\n  Authentication Failures </li>\n  <li> <a href=""https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication"">OWASP Top 10 2017 Category A2</a> - Broken Authentication\n  </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/798"">MITRE, CWE-798</a> - Use of Hard-coded Credentials </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/259"">MITRE, CWE-259</a> - Use of Hard-coded Password </li>\n  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>\n  <li> Derived from FindSecBugs rule <a href=""https://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD"">Hard Coded Password</a> </li>\n</ul>",BLOCKER,READY,false,,"cwe,sans-top25-porous",js,JavaScript,"[{""key"":""credentialWords"",""htmlDesc"":""Comma separated list of words identifying potential credentials."",""defaultValue"":""password, pwd, passwd"",""type"":""STRING""}]",SECURITY_HOTSPOT,false,MAIN,false,"[{""key"":""how_to_fix"",""content"":""<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Store the credentials in a configuration file that is not pushed to the code repository. </li>\n  <li> Store the credentials in a database. </li>\n  <li> Use your cloud provider’s service for managing secrets. </li>\n  <li> If a password has been disclosed through the source code: change it. </li>\n</ul>\n<h2>Compliant Solution</h2>\n<pre>\nvar mysql = require('mysql');\n\nvar connection = mysql.createConnection({\n  host: process.env.MYSQL_URL,\n  user: process.env.MYSQL_USERNAME,\n  password: process.env.MYSQL_PASSWORD,\n  database: process.env.MYSQL_DATABASE\n});\nconnection.connect();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\""https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"">OWASP Top 10 2021 Category A7</a> - Identification and\n  Authentication Failures </li>\n  <li> <a href=\""https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\"">OWASP Top 10 2017 Category A2</a> - Broken Authentication\n  </li>\n  <li> <a href=\""https://cwe.mitre.org/data/definitions/798\"">MITRE, CWE-798</a> - Use of Hard-coded Credentials </li>\n  <li> <a href=\""https://cwe.mitre.org/data/definitions/259\"">MITRE, CWE-259</a> - Use of Hard-coded Password </li>\n  <li> <a href=\""https://www.sans.org/top25-software-errors/#cat3\"">SANS Top 25</a> - Porous Defenses </li>\n  <li> Derived from FindSecBugs rule <a href=\""https://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD\"">Hard Coded Password</a> </li>\n</ul>""},{""key"":""root_cause"",""content"":""<p>Because it is easy to extract strings from an application source code or binary, credentials should not be hard-coded. This is particularly true\nfor applications that are distributed or that are open-source.</p>\n<p>In the past, it has led to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13466\"">CVE-2019-13466</a> </li>\n  <li> <a href=\""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-15389\"">CVE-2018-15389</a> </li>\n</ul>\n<p>Credentials should be stored outside of the code in a configuration file, a database, or a management service for secrets.</p>\n<p>This rule flags instances of hard-coded credentials used in database and LDAP connections. It looks for hard-coded credentials in connection\nstrings, and for variable names that match any of the patterns from the provided list.</p>\n<p>It’s recommended to customize the configuration of this rule with additional credential words such as \""oauthToken\"", \""secret\"", …​</p>\n""},{""key"":""assess_the_problem"",""content"":""<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Credentials allow access to a sensitive component like a database, a file storage, an API or a service. </li>\n  <li> Credentials are used in production environments. </li>\n  <li> Application re-distribution is required before updating the credentials. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nvar mysql = require('mysql');\n\nvar connection = mysql.createConnection(\n{\n  host:'localhost',\n  user: \""admin\"",\n  database: \""project\"",\n  password: \""mypassword\"", // sensitive\n  multipleStatements: true\n});\n\nconnection.connect();\n</pre>\n""}]",[]
AYZ9hRjR_dtLGUU1O__c,joshua-quek-sonarsource_nodejs-sonar-bitbucket_AYZ8_EMPAu8T8ZieRlaH,main,server/start.js,20,Refactor this code to not use nested template literals.,OPEN,joshua.quek.fullstack@gmail.com,2022-12-19T02:16:04+0000,2023-07-05T06:48:08+0000,javascript:S4624,[object Object],CODE_SMELL,MAJOR,10,"brain-overload,confusing",,,javascript:S4624,javascript,Template literals should not be nested,2023-02-21T15:21:22+0000,"<p>Template literals (previously named ""template strings"") are an elegant way to build a string without using the <code>+</code> operator to make\nstrings concatenation more readable.</p>\n<p>However, it’s possible to build complex string literals by nesting together multiple template literals, and therefore lose readability and\nmaintainability.</p>\n<p>In such situations, it’s preferable to move the nested template into a separate statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet color = ""red"";\nlet count = 3;\nlet message = `I have ${color ? `${count} ${color}` : count} apples`; // Noncompliant; nested template strings not easy to read\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet color = ""red"";\nlet count = 3;\nlet apples = color ? `${count} ${color}` : count;\nlet message = `I have ${apples} apples`;\n</pre>","<p>Template literals (previously named ""template strings"") are an elegant way to build a string without using the <code>+</code> operator to make\nstrings concatenation more readable.</p>\n<p>However, it’s possible to build complex string literals by nesting together multiple template literals, and therefore lose readability and\nmaintainability.</p>\n<p>In such situations, it’s preferable to move the nested template into a separate statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet color = ""red"";\nlet count = 3;\nlet message = `I have ${color ? `${count} ${color}` : count} apples`; // Noncompliant; nested template strings not easy to read\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet color = ""red"";\nlet count = 3;\nlet apples = color ? `${count} ${color}` : count;\nlet message = `I have ${apples} apples`;\n</pre>",MAJOR,READY,false,,"brain-overload,confusing",js,JavaScript,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>Template literals (previously named \""template strings\"") are an elegant way to build a string without using the <code>+</code> operator to make\nstrings concatenation more readable.</p>\n<p>However, it’s possible to build complex string literals by nesting together multiple template literals, and therefore lose readability and\nmaintainability.</p>\n<p>In such situations, it’s preferable to move the nested template into a separate statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet color = \""red\"";\nlet count = 3;\nlet message = `I have ${color ? `${count} ${color}` : count} apples`; // Noncompliant; nested template strings not easy to read\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet color = \""red\"";\nlet count = 3;\nlet apples = color ? `${count} ${color}` : count;\nlet message = `I have ${apples} apples`;\n</pre>""}]",[]
AYZ9hRin_dtLGUU1O__Z,joshua-quek-sonarsource_nodejs-sonar-bitbucket_AYZ8_EMPAu8T8ZieRlaH,main,server/libs/utils/passport-util/index.js,8,Remove this commented out code.,OPEN,joshua.quek.fullstack@gmail.com,2023-02-09T22:13:19+0000,2023-07-05T06:47:35+0000,javascript:S125,[object Object],CODE_SMELL,MAJOR,5,unused,,,javascript:S125,javascript,Sections of code should not be commented out,2023-02-21T15:21:22+0000,<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>,<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>,MAJOR,READY,false,,unused,js,JavaScript,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>""}]",[]
AYZ9hRin_dtLGUU1O__Y,joshua-quek-sonarsource_nodejs-sonar-bitbucket_AYZ8_EMPAu8T8ZieRlaH,main,server/libs/utils/passport-util/index.js,3,Remove this commented out code.,OPEN,joshua.quek.fullstack@gmail.com,2023-02-09T22:13:19+0000,2023-07-05T06:47:30+0000,javascript:S125,[object Object],CODE_SMELL,MAJOR,5,unused,,,javascript:S125,javascript,Sections of code should not be commented out,2023-02-21T15:21:22+0000,<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>,<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>,MAJOR,READY,false,,unused,js,JavaScript,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>""}]",[]
AYZ3RCMLfPd1PQzl2K__,Open-Digital-Society_nodejs-sonar-github_AYZWSSb-cj38u-p-bzH_,main,server/app/routes/authentication/postgres-user-pass/register-user/validator.js,33,Use concise character class syntax '\d' instead of '[0-9]'.,OPEN,joshua.quek.fullstack@gmail.com,2022-12-19T02:16:04+0000,2023-02-22T03:55:57+0000,javascript:S6353,,CODE_SMELL,MINOR,5,regex,,,javascript:S6353,javascript,Regular expression quantifiers and character classes should be used concisely,2023-02-21T15:21:21+0000,"<p>With regular expressions syntax, it’s possible to express the same thing in many ways. For example, to match a two-digit number, one could write\n<code>[0-9]{2,2}</code> or <code>\d{2}</code>. Latter is not only shorter in terms of expression length, but also easier to read and thus to maintain.\nThis rule recommends to replace some bulky quantifiers and character classes with more concise equivalents:</p>\n<ul>\n  <li> <code>\d</code> for <code>[0-9]</code> and <code>\D</code> for <code>[^0-9]</code> </li>\n  <li> <code>\w</code> for <code>[A-Za-z0-9_]</code> and <code>\W</code> for <code>[^A-Za-z0-9_]</code> </li>\n  <li> <code>.</code> for character classes matching everything (e.g. <code>[\w\W]</code>, <code>[\d\D]</code>, or <code>[\s\S]</code> with\n  <code>s</code> flag) </li>\n  <li> <code>x?</code> for <code>x{0,1}</code>, <code>x*</code> for <code>x{0,}</code>, <code>x+</code> for <code>x{1,}</code>, <code>x{N}</code> for\n  <code>x{N,N}</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/a{1,}/; // Noncompliant, '{1,}' quantifier is the same as '+'\n/[A-Za-z0-9_]/; // Noncompliant, '\w' is equivalent\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/a+/;\n/\w/;\n</pre>","<p>With regular expressions syntax, it’s possible to express the same thing in many ways. For example, to match a two-digit number, one could write\n<code>[0-9]{2,2}</code> or <code>\d{2}</code>. Latter is not only shorter in terms of expression length, but also easier to read and thus to maintain.\nThis rule recommends to replace some bulky quantifiers and character classes with more concise equivalents:</p>\n<ul>\n  <li> <code>\d</code> for <code>[0-9]</code> and <code>\D</code> for <code>[^0-9]</code> </li>\n  <li> <code>\w</code> for <code>[A-Za-z0-9_]</code> and <code>\W</code> for <code>[^A-Za-z0-9_]</code> </li>\n  <li> <code>.</code> for character classes matching everything (e.g. <code>[\w\W]</code>, <code>[\d\D]</code>, or <code>[\s\S]</code> with\n  <code>s</code> flag) </li>\n  <li> <code>x?</code> for <code>x{0,1}</code>, <code>x*</code> for <code>x{0,}</code>, <code>x+</code> for <code>x{1,}</code>, <code>x{N}</code> for\n  <code>x{N,N}</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/a{1,}/; // Noncompliant, '{1,}' quantifier is the same as '+'\n/[A-Za-z0-9_]/; // Noncompliant, '\w' is equivalent\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/a+/;\n/\w/;\n</pre>",MINOR,READY,false,,regex,js,JavaScript,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>With regular expressions syntax, it’s possible to express the same thing in many ways. For example, to match a two-digit number, one could write\n<code>[0-9]{2,2}</code> or <code>\\d{2}</code>. Latter is not only shorter in terms of expression length, but also easier to read and thus to maintain.\nThis rule recommends to replace some bulky quantifiers and character classes with more concise equivalents:</p>\n<ul>\n  <li> <code>\\d</code> for <code>[0-9]</code> and <code>\\D</code> for <code>[^0-9]</code> </li>\n  <li> <code>\\w</code> for <code>[A-Za-z0-9_]</code> and <code>\\W</code> for <code>[^A-Za-z0-9_]</code> </li>\n  <li> <code>.</code> for character classes matching everything (e.g. <code>[\\w\\W]</code>, <code>[\\d\\D]</code>, or <code>[\\s\\S]</code> with\n  <code>s</code> flag) </li>\n  <li> <code>x?</code> for <code>x{0,1}</code>, <code>x*</code> for <code>x{0,}</code>, <code>x+</code> for <code>x{1,}</code>, <code>x{N}</code> for\n  <code>x{N,N}</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/a{1,}/; // Noncompliant, '{1,}' quantifier is the same as '+'\n/[A-Za-z0-9_]/; // Noncompliant, '\\w' is equivalent\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/a+/;\n/\\w/;\n</pre>""}]",[]
AYZ3RCMrfPd1PQzl2LAA,Open-Digital-Society_nodejs-sonar-github_AYZWSSb-cj38u-p-bzH_,main,server/app/routes/authentication/postgres-user-pass/login-user/validator.js,33,Use concise character class syntax '\d' instead of '[0-9]'.,OPEN,joshua.quek.fullstack@gmail.com,2022-12-19T02:16:04+0000,2023-02-22T03:55:57+0000,javascript:S6353,,CODE_SMELL,MINOR,5,regex,,,javascript:S6353,javascript,Regular expression quantifiers and character classes should be used concisely,2023-02-21T15:21:21+0000,"<p>With regular expressions syntax, it’s possible to express the same thing in many ways. For example, to match a two-digit number, one could write\n<code>[0-9]{2,2}</code> or <code>\d{2}</code>. Latter is not only shorter in terms of expression length, but also easier to read and thus to maintain.\nThis rule recommends to replace some bulky quantifiers and character classes with more concise equivalents:</p>\n<ul>\n  <li> <code>\d</code> for <code>[0-9]</code> and <code>\D</code> for <code>[^0-9]</code> </li>\n  <li> <code>\w</code> for <code>[A-Za-z0-9_]</code> and <code>\W</code> for <code>[^A-Za-z0-9_]</code> </li>\n  <li> <code>.</code> for character classes matching everything (e.g. <code>[\w\W]</code>, <code>[\d\D]</code>, or <code>[\s\S]</code> with\n  <code>s</code> flag) </li>\n  <li> <code>x?</code> for <code>x{0,1}</code>, <code>x*</code> for <code>x{0,}</code>, <code>x+</code> for <code>x{1,}</code>, <code>x{N}</code> for\n  <code>x{N,N}</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/a{1,}/; // Noncompliant, '{1,}' quantifier is the same as '+'\n/[A-Za-z0-9_]/; // Noncompliant, '\w' is equivalent\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/a+/;\n/\w/;\n</pre>","<p>With regular expressions syntax, it’s possible to express the same thing in many ways. For example, to match a two-digit number, one could write\n<code>[0-9]{2,2}</code> or <code>\d{2}</code>. Latter is not only shorter in terms of expression length, but also easier to read and thus to maintain.\nThis rule recommends to replace some bulky quantifiers and character classes with more concise equivalents:</p>\n<ul>\n  <li> <code>\d</code> for <code>[0-9]</code> and <code>\D</code> for <code>[^0-9]</code> </li>\n  <li> <code>\w</code> for <code>[A-Za-z0-9_]</code> and <code>\W</code> for <code>[^A-Za-z0-9_]</code> </li>\n  <li> <code>.</code> for character classes matching everything (e.g. <code>[\w\W]</code>, <code>[\d\D]</code>, or <code>[\s\S]</code> with\n  <code>s</code> flag) </li>\n  <li> <code>x?</code> for <code>x{0,1}</code>, <code>x*</code> for <code>x{0,}</code>, <code>x+</code> for <code>x{1,}</code>, <code>x{N}</code> for\n  <code>x{N,N}</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/a{1,}/; // Noncompliant, '{1,}' quantifier is the same as '+'\n/[A-Za-z0-9_]/; // Noncompliant, '\w' is equivalent\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/a+/;\n/\w/;\n</pre>",MINOR,READY,false,,regex,js,JavaScript,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>With regular expressions syntax, it’s possible to express the same thing in many ways. For example, to match a two-digit number, one could write\n<code>[0-9]{2,2}</code> or <code>\\d{2}</code>. Latter is not only shorter in terms of expression length, but also easier to read and thus to maintain.\nThis rule recommends to replace some bulky quantifiers and character classes with more concise equivalents:</p>\n<ul>\n  <li> <code>\\d</code> for <code>[0-9]</code> and <code>\\D</code> for <code>[^0-9]</code> </li>\n  <li> <code>\\w</code> for <code>[A-Za-z0-9_]</code> and <code>\\W</code> for <code>[^A-Za-z0-9_]</code> </li>\n  <li> <code>.</code> for character classes matching everything (e.g. <code>[\\w\\W]</code>, <code>[\\d\\D]</code>, or <code>[\\s\\S]</code> with\n  <code>s</code> flag) </li>\n  <li> <code>x?</code> for <code>x{0,1}</code>, <code>x*</code> for <code>x{0,}</code>, <code>x+</code> for <code>x{1,}</code>, <code>x{N}</code> for\n  <code>x{N,N}</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/a{1,}/; // Noncompliant, '{1,}' quantifier is the same as '+'\n/[A-Za-z0-9_]/; // Noncompliant, '\\w' is equivalent\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/a+/;\n/\\w/;\n</pre>""}]",[]
AYZ3RCNFfPd1PQzl2LAC,Open-Digital-Society_nodejs-sonar-github_AYZWSSb-cj38u-p-bzH_,main,server/libs/utils/response-util/index.js,10,Refactor this function to reduce its Cognitive Complexity from 16 to the 15 allowed.,OPEN,joshua.quek.fullstack@gmail.com,2022-12-19T02:16:04+0000,2023-02-22T03:55:57+0000,javascript:S3776,,CODE_SMELL,CRITICAL,6,brain-overload,,,javascript:S3776,javascript,Cognitive Complexity of functions should not be too high,2023-02-21T15:21:22+0000,"<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be\ndifficult to maintain.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://www.sonarsource.com/docs/CognitiveComplexity.pdf"">Cognitive Complexity</a> </li>\n</ul>","<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be\ndifficult to maintain.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://www.sonarsource.com/docs/CognitiveComplexity.pdf"">Cognitive Complexity</a> </li>\n</ul>",CRITICAL,READY,false,,brain-overload,js,JavaScript,"[{""key"":""threshold"",""htmlDesc"":""The maximum authorized complexity."",""defaultValue"":""15"",""type"":""INTEGER""}]",CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be\ndifficult to maintain.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\""https://www.sonarsource.com/docs/CognitiveComplexity.pdf\"">Cognitive Complexity</a> </li>\n</ul>""}]",[]
AYZ3RCNgfPd1PQzl2LAF,Open-Digital-Society_nodejs-sonar-github_AYZWSSb-cj38u-p-bzH_,main,server/libs/utils/passport-util/user-object.js,7,Review this potentially hardcoded credential.,TO_REVIEW,joshua.quek.fullstack@gmail.com,2022-12-19T02:16:04+0000,2023-02-22T03:55:57+0000,javascript:S2068,,SECURITY_HOTSPOT,,,,auth,HIGH,javascript:S2068,javascript,Hard-coded credentials are security-sensitive,2023-02-21T15:21:22+0000,"<p>Because it is easy to extract strings from an application source code or binary, credentials should not be hard-coded. This is particularly true\nfor applications that are distributed or that are open-source.</p>\n<p>In the past, it has led to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13466"">CVE-2019-13466</a> </li>\n  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-15389"">CVE-2018-15389</a> </li>\n</ul>\n<p>Credentials should be stored outside of the code in a configuration file, a database, or a management service for secrets.</p>\n<p>This rule flags instances of hard-coded credentials used in database and LDAP connections. It looks for hard-coded credentials in connection\nstrings, and for variable names that match any of the patterns from the provided list.</p>\n<p>It’s recommended to customize the configuration of this rule with additional credential words such as ""oauthToken"", ""secret"", …​</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Credentials allow access to a sensitive component like a database, a file storage, an API or a service. </li>\n  <li> Credentials are used in production environments. </li>\n  <li> Application re-distribution is required before updating the credentials. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Store the credentials in a configuration file that is not pushed to the code repository. </li>\n  <li> Store the credentials in a database. </li>\n  <li> Use your cloud provider’s service for managing secrets. </li>\n  <li> If a password has been disclosed through the source code: change it. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nvar mysql = require('mysql');\nvar connection = mysql.createConnection(\n{\n  host:'localhost',\n  user: ""admin"",\n  database: ""project"",\n  password: ""mypassword"", // sensitive\n  multipleStatements: true\n});\nconnection.connect();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar mysql = require('mysql');\nvar connection = mysql.createConnection({\n  host: process.env.MYSQL_URL,\n  user: process.env.MYSQL_USERNAME,\n  password: process.env.MYSQL_PASSWORD,\n  database: process.env.MYSQL_DATABASE\n});\nconnection.connect();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/"">OWASP Top 10 2021 Category A7</a> - Identification and\n  Authentication Failures </li>\n  <li> <a href=""https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication"">OWASP Top 10 2017 Category A2</a> - Broken Authentication\n  </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/798"">MITRE, CWE-798</a> - Use of Hard-coded Credentials </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/259"">MITRE, CWE-259</a> - Use of Hard-coded Password </li>\n  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>\n  <li> Derived from FindSecBugs rule <a href=""https://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD"">Hard Coded Password</a> </li>\n</ul>","<p>Because it is easy to extract strings from an application source code or binary, credentials should not be hard-coded. This is particularly true\nfor applications that are distributed or that are open-source.</p>\n<p>In the past, it has led to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13466"">CVE-2019-13466</a> </li>\n  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-15389"">CVE-2018-15389</a> </li>\n</ul>\n<p>Credentials should be stored outside of the code in a configuration file, a database, or a management service for secrets.</p>\n<p>This rule flags instances of hard-coded credentials used in database and LDAP connections. It looks for hard-coded credentials in connection\nstrings, and for variable names that match any of the patterns from the provided list.</p>\n<p>It’s recommended to customize the configuration of this rule with additional credential words such as ""oauthToken"", ""secret"", …​</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Credentials allow access to a sensitive component like a database, a file storage, an API or a service. </li>\n  <li> Credentials are used in production environments. </li>\n  <li> Application re-distribution is required before updating the credentials. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Store the credentials in a configuration file that is not pushed to the code repository. </li>\n  <li> Store the credentials in a database. </li>\n  <li> Use your cloud provider’s service for managing secrets. </li>\n  <li> If a password has been disclosed through the source code: change it. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nvar mysql = require('mysql');\nvar connection = mysql.createConnection(\n{\n  host:'localhost',\n  user: ""admin"",\n  database: ""project"",\n  password: ""mypassword"", // sensitive\n  multipleStatements: true\n});\nconnection.connect();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar mysql = require('mysql');\nvar connection = mysql.createConnection({\n  host: process.env.MYSQL_URL,\n  user: process.env.MYSQL_USERNAME,\n  password: process.env.MYSQL_PASSWORD,\n  database: process.env.MYSQL_DATABASE\n});\nconnection.connect();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/"">OWASP Top 10 2021 Category A7</a> - Identification and\n  Authentication Failures </li>\n  <li> <a href=""https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication"">OWASP Top 10 2017 Category A2</a> - Broken Authentication\n  </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/798"">MITRE, CWE-798</a> - Use of Hard-coded Credentials </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/259"">MITRE, CWE-259</a> - Use of Hard-coded Password </li>\n  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>\n  <li> Derived from FindSecBugs rule <a href=""https://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD"">Hard Coded Password</a> </li>\n</ul>",BLOCKER,READY,false,,"cwe,sans-top25-porous",js,JavaScript,"[{""key"":""credentialWords"",""htmlDesc"":""Comma separated list of words identifying potential credentials."",""defaultValue"":""password, pwd, passwd"",""type"":""STRING""}]",SECURITY_HOTSPOT,false,MAIN,false,"[{""key"":""how_to_fix"",""content"":""<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Store the credentials in a configuration file that is not pushed to the code repository. </li>\n  <li> Store the credentials in a database. </li>\n  <li> Use your cloud provider’s service for managing secrets. </li>\n  <li> If a password has been disclosed through the source code: change it. </li>\n</ul>\n<h2>Compliant Solution</h2>\n<pre>\nvar mysql = require('mysql');\n\nvar connection = mysql.createConnection({\n  host: process.env.MYSQL_URL,\n  user: process.env.MYSQL_USERNAME,\n  password: process.env.MYSQL_PASSWORD,\n  database: process.env.MYSQL_DATABASE\n});\nconnection.connect();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\""https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"">OWASP Top 10 2021 Category A7</a> - Identification and\n  Authentication Failures </li>\n  <li> <a href=\""https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\"">OWASP Top 10 2017 Category A2</a> - Broken Authentication\n  </li>\n  <li> <a href=\""https://cwe.mitre.org/data/definitions/798\"">MITRE, CWE-798</a> - Use of Hard-coded Credentials </li>\n  <li> <a href=\""https://cwe.mitre.org/data/definitions/259\"">MITRE, CWE-259</a> - Use of Hard-coded Password </li>\n  <li> <a href=\""https://www.sans.org/top25-software-errors/#cat3\"">SANS Top 25</a> - Porous Defenses </li>\n  <li> Derived from FindSecBugs rule <a href=\""https://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD\"">Hard Coded Password</a> </li>\n</ul>""},{""key"":""root_cause"",""content"":""<p>Because it is easy to extract strings from an application source code or binary, credentials should not be hard-coded. This is particularly true\nfor applications that are distributed or that are open-source.</p>\n<p>In the past, it has led to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13466\"">CVE-2019-13466</a> </li>\n  <li> <a href=\""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-15389\"">CVE-2018-15389</a> </li>\n</ul>\n<p>Credentials should be stored outside of the code in a configuration file, a database, or a management service for secrets.</p>\n<p>This rule flags instances of hard-coded credentials used in database and LDAP connections. It looks for hard-coded credentials in connection\nstrings, and for variable names that match any of the patterns from the provided list.</p>\n<p>It’s recommended to customize the configuration of this rule with additional credential words such as \""oauthToken\"", \""secret\"", …​</p>\n""},{""key"":""assess_the_problem"",""content"":""<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Credentials allow access to a sensitive component like a database, a file storage, an API or a service. </li>\n  <li> Credentials are used in production environments. </li>\n  <li> Application re-distribution is required before updating the credentials. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nvar mysql = require('mysql');\n\nvar connection = mysql.createConnection(\n{\n  host:'localhost',\n  user: \""admin\"",\n  database: \""project\"",\n  password: \""mypassword\"", // sensitive\n  multipleStatements: true\n});\n\nconnection.connect();\n</pre>\n""}]",[]
AYZ3RCNwfPd1PQzl2LAG,Open-Digital-Society_nodejs-sonar-github_AYZWSSb-cj38u-p-bzH_,main,server/libs/services/express-service/index.js,18,Make sure that enabling CORS is safe here.,TO_REVIEW,joshua.quek.fullstack@gmail.com,2022-12-19T02:16:04+0000,2023-02-22T03:55:57+0000,javascript:S5122,,SECURITY_HOTSPOT,,,,insecure-conf,LOW,javascript:S5122,javascript,Having a permissive Cross-Origin Resource Sharing policy is security-sensitive,2023-02-21T15:21:21+0000,"<p>Having a permissive Cross-Origin Resource Sharing policy is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0269"">CVE-2018-0269</a> </li>\n  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14460"">CVE-2017-14460</a> </li>\n</ul>\n<p><a href=""https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy"">Same origin policy</a> in browsers prevents, by default and for\nsecurity-reasons, a javascript frontend to perform a cross-origin HTTP request to a resource that has a different origin (domain, protocol, or port)\nfrom its own. The requested target can append additional HTTP headers in response, called <a\nhref=""https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"">CORS</a>, that act like directives for the browser and change the access control policy\n/ relax the same origin policy.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> You don’t trust the origin specified, example: <code>Access-Control-Allow-Origin: untrustedwebsite.com</code>. </li>\n  <li> Access control policy is entirely disabled: <code>Access-Control-Allow-Origin: *</code> </li>\n  <li> Your access control policy is dynamically defined by a user-controlled input like <a\n  href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin""><code>origin</code></a> header. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> The <code>Access-Control-Allow-Origin</code> header should be set only for a trusted origin and for specific resources. </li>\n  <li> Allow only selected, trusted domains in the <code>Access-Control-Allow-Origin</code> header. Prefer whitelisting domains over blacklisting or\n  allowing any domain (do not use * wildcard nor blindly return the <code>Origin</code> header content without any checks). </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p><a href=""https://nodejs.org/api/http.html"">nodejs http</a> built-in module:</p>\n<pre>\nconst http = require('http');\nconst srv = http.createServer((req, res) =&gt; {\n  res.writeHead(200, { 'Access-Control-Allow-Origin': '*' }); // Sensitive\n  res.end('ok');\n});\nsrv.listen(3000);\n</pre>\n<p><a href=""https://www.npmjs.com/package/express"">Express.js</a> framework with <a href=""https://www.npmjs.com/package/cors"">cors middleware</a>:</p>\n<pre>\nconst cors = require('cors');\nlet app1 = express();\napp1.use(cors()); // Sensitive: by default origin is set to *\nlet corsOptions = {\n  origin: '*' // Sensitive\n};\nlet app2 = express();\napp2.use(cors(corsOptions));\n</pre>\n<p>User-controlled origin:</p>\n<pre>\nfunction (req, res) {\n  const origin = req.header('Origin');\n  res.setHeader('Access-Control-Allow-Origin', origin); // Sensitive\n};\n</pre>\n<h2>Compliant Solution</h2>\n<p><a href=""https://nodejs.org/api/http.html"">nodejs http</a> built-in module:</p>\n<pre>\nconst http = require('http');\nconst srv = http.createServer((req, res) =&gt; {\n  res.writeHead(200, { 'Access-Control-Allow-Origin': 'trustedwebsite.com' }); // Compliant\n  res.end('ok');\n});\nsrv.listen(3000);\n</pre>\n<p><a href=""https://www.npmjs.com/package/express"">Express.js</a> framework with <a href=""https://www.npmjs.com/package/cors"">cors middleware</a>:</p>\n<pre>\nconst cors = require('cors');\nlet corsOptions = {\n  origin: 'trustedwebsite.com' // Compliant\n};\nlet app = express();\napp.use(cors(corsOptions));\n</pre>\n<p>User-controlled origin validated with an allow-list:</p>\n<pre>\nfunction (req, res) {\n  const origin = req.header('Origin');\n  if (trustedOrigins.indexOf(origin) &gt;= 0) {\n    res.setHeader('Access-Control-Allow-Origin', origin);\n  }\n};\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://owasp.org/Top10/A05_2021-Security_Misconfiguration/"">OWASP Top 10 2021 Category A5</a> - Security Misconfiguration </li>\n  <li> <a href=""https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/"">OWASP Top 10 2021 Category A7</a> - Identification and\n  Authentication Failures </li>\n  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"">developer.mozilla.org</a> - CORS </li>\n  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy"">developer.mozilla.org</a> - Same origin policy </li>\n  <li> <a href=""https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration"">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=""https://cheatsheetseries.owasp.org/cheatsheets/HTML5_Security_Cheat_Sheet.html#cross-origin-resource-sharing"">OWASP HTML5 Security\n  Cheat Sheet</a> - Cross Origin Resource Sharing </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/346"">MITRE, CWE-346</a> - Origin Validation Error </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/942"">MITRE, CWE-942</a> - Overly Permissive Cross-domain Whitelist </li>\n  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>\n</ul>","<p>Having a permissive Cross-Origin Resource Sharing policy is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0269"">CVE-2018-0269</a> </li>\n  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14460"">CVE-2017-14460</a> </li>\n</ul>\n<p><a href=""https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy"">Same origin policy</a> in browsers prevents, by default and for\nsecurity-reasons, a javascript frontend to perform a cross-origin HTTP request to a resource that has a different origin (domain, protocol, or port)\nfrom its own. The requested target can append additional HTTP headers in response, called <a\nhref=""https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"">CORS</a>, that act like directives for the browser and change the access control policy\n/ relax the same origin policy.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> You don’t trust the origin specified, example: <code>Access-Control-Allow-Origin: untrustedwebsite.com</code>. </li>\n  <li> Access control policy is entirely disabled: <code>Access-Control-Allow-Origin: *</code> </li>\n  <li> Your access control policy is dynamically defined by a user-controlled input like <a\n  href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin""><code>origin</code></a> header. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> The <code>Access-Control-Allow-Origin</code> header should be set only for a trusted origin and for specific resources. </li>\n  <li> Allow only selected, trusted domains in the <code>Access-Control-Allow-Origin</code> header. Prefer whitelisting domains over blacklisting or\n  allowing any domain (do not use * wildcard nor blindly return the <code>Origin</code> header content without any checks). </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p><a href=""https://nodejs.org/api/http.html"">nodejs http</a> built-in module:</p>\n<pre>\nconst http = require('http');\nconst srv = http.createServer((req, res) =&gt; {\n  res.writeHead(200, { 'Access-Control-Allow-Origin': '*' }); // Sensitive\n  res.end('ok');\n});\nsrv.listen(3000);\n</pre>\n<p><a href=""https://www.npmjs.com/package/express"">Express.js</a> framework with <a href=""https://www.npmjs.com/package/cors"">cors middleware</a>:</p>\n<pre>\nconst cors = require('cors');\nlet app1 = express();\napp1.use(cors()); // Sensitive: by default origin is set to *\nlet corsOptions = {\n  origin: '*' // Sensitive\n};\nlet app2 = express();\napp2.use(cors(corsOptions));\n</pre>\n<p>User-controlled origin:</p>\n<pre>\nfunction (req, res) {\n  const origin = req.header('Origin');\n  res.setHeader('Access-Control-Allow-Origin', origin); // Sensitive\n};\n</pre>\n<h2>Compliant Solution</h2>\n<p><a href=""https://nodejs.org/api/http.html"">nodejs http</a> built-in module:</p>\n<pre>\nconst http = require('http');\nconst srv = http.createServer((req, res) =&gt; {\n  res.writeHead(200, { 'Access-Control-Allow-Origin': 'trustedwebsite.com' }); // Compliant\n  res.end('ok');\n});\nsrv.listen(3000);\n</pre>\n<p><a href=""https://www.npmjs.com/package/express"">Express.js</a> framework with <a href=""https://www.npmjs.com/package/cors"">cors middleware</a>:</p>\n<pre>\nconst cors = require('cors');\nlet corsOptions = {\n  origin: 'trustedwebsite.com' // Compliant\n};\nlet app = express();\napp.use(cors(corsOptions));\n</pre>\n<p>User-controlled origin validated with an allow-list:</p>\n<pre>\nfunction (req, res) {\n  const origin = req.header('Origin');\n  if (trustedOrigins.indexOf(origin) &gt;= 0) {\n    res.setHeader('Access-Control-Allow-Origin', origin);\n  }\n};\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://owasp.org/Top10/A05_2021-Security_Misconfiguration/"">OWASP Top 10 2021 Category A5</a> - Security Misconfiguration </li>\n  <li> <a href=""https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/"">OWASP Top 10 2021 Category A7</a> - Identification and\n  Authentication Failures </li>\n  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"">developer.mozilla.org</a> - CORS </li>\n  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy"">developer.mozilla.org</a> - Same origin policy </li>\n  <li> <a href=""https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration"">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=""https://cheatsheetseries.owasp.org/cheatsheets/HTML5_Security_Cheat_Sheet.html#cross-origin-resource-sharing"">OWASP HTML5 Security\n  Cheat Sheet</a> - Cross Origin Resource Sharing </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/346"">MITRE, CWE-346</a> - Origin Validation Error </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/942"">MITRE, CWE-942</a> - Overly Permissive Cross-domain Whitelist </li>\n  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>\n</ul>",MINOR,READY,false,,"cwe,express.js,sans-top25-porous",js,JavaScript,[],SECURITY_HOTSPOT,false,MAIN,false,"[{""key"":""how_to_fix"",""content"":""<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> The <code>Access-Control-Allow-Origin</code> header should be set only for a trusted origin and for specific resources. </li>\n  <li> Allow only selected, trusted domains in the <code>Access-Control-Allow-Origin</code> header. Prefer whitelisting domains over blacklisting or\n  allowing any domain (do not use * wildcard nor blindly return the <code>Origin</code> header content without any checks). </li>\n</ul>\n<h2>Compliant Solution</h2>\n<p><a href=\""https://nodejs.org/api/http.html\"">nodejs http</a> built-in module:</p>\n<pre>\nconst http = require('http');\nconst srv = http.createServer((req, res) =&gt; {\n  res.writeHead(200, { 'Access-Control-Allow-Origin': 'trustedwebsite.com' }); // Compliant\n  res.end('ok');\n});\nsrv.listen(3000);\n</pre>\n<p><a href=\""https://www.npmjs.com/package/express\"">Express.js</a> framework with <a href=\""https://www.npmjs.com/package/cors\"">cors middleware</a>:</p>\n<pre>\nconst cors = require('cors');\n\nlet corsOptions = {\n  origin: 'trustedwebsite.com' // Compliant\n};\n\nlet app = express();\napp.use(cors(corsOptions));\n</pre>\n<p>User-controlled origin validated with an allow-list:</p>\n<pre>\nfunction (req, res) {\n  const origin = req.header('Origin');\n\n  if (trustedOrigins.indexOf(origin) &gt;= 0) {\n    res.setHeader('Access-Control-Allow-Origin', origin);\n  }\n};\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\""https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"">OWASP Top 10 2021 Category A5</a> - Security Misconfiguration </li>\n  <li> <a href=\""https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"">OWASP Top 10 2021 Category A7</a> - Identification and\n  Authentication Failures </li>\n  <li> <a href=\""https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\"">developer.mozilla.org</a> - CORS </li>\n  <li> <a href=\""https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\"">developer.mozilla.org</a> - Same origin policy </li>\n  <li> <a href=\""https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\""https://cheatsheetseries.owasp.org/cheatsheets/HTML5_Security_Cheat_Sheet.html#cross-origin-resource-sharing\"">OWASP HTML5 Security\n  Cheat Sheet</a> - Cross Origin Resource Sharing </li>\n  <li> <a href=\""https://cwe.mitre.org/data/definitions/346\"">MITRE, CWE-346</a> - Origin Validation Error </li>\n  <li> <a href=\""https://cwe.mitre.org/data/definitions/942\"">MITRE, CWE-942</a> - Overly Permissive Cross-domain Whitelist </li>\n  <li> <a href=\""https://www.sans.org/top25-software-errors/#cat3\"">SANS Top 25</a> - Porous Defenses </li>\n</ul>""},{""key"":""root_cause"",""content"":""<p>Having a permissive Cross-Origin Resource Sharing policy is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0269\"">CVE-2018-0269</a> </li>\n  <li> <a href=\""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14460\"">CVE-2017-14460</a> </li>\n</ul>\n<p><a href=\""https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\"">Same origin policy</a> in browsers prevents, by default and for\nsecurity-reasons, a javascript frontend to perform a cross-origin HTTP request to a resource that has a different origin (domain, protocol, or port)\nfrom its own. The requested target can append additional HTTP headers in response, called <a\nhref=\""https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\"">CORS</a>, that act like directives for the browser and change the access control policy\n/ relax the same origin policy.</p>\n""},{""key"":""assess_the_problem"",""content"":""<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> You don’t trust the origin specified, example: <code>Access-Control-Allow-Origin: untrustedwebsite.com</code>. </li>\n  <li> Access control policy is entirely disabled: <code>Access-Control-Allow-Origin: *</code> </li>\n  <li> Your access control policy is dynamically defined by a user-controlled input like <a\n  href=\""https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin\""><code>origin</code></a> header. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Sensitive Code Example</h2>\n<p><a href=\""https://nodejs.org/api/http.html\"">nodejs http</a> built-in module:</p>\n<pre>\nconst http = require('http');\nconst srv = http.createServer((req, res) =&gt; {\n  res.writeHead(200, { 'Access-Control-Allow-Origin': '*' }); // Sensitive\n  res.end('ok');\n});\nsrv.listen(3000);\n</pre>\n<p><a href=\""https://www.npmjs.com/package/express\"">Express.js</a> framework with <a href=\""https://www.npmjs.com/package/cors\"">cors middleware</a>:</p>\n<pre>\nconst cors = require('cors');\n\nlet app1 = express();\napp1.use(cors()); // Sensitive: by default origin is set to *\n\nlet corsOptions = {\n  origin: '*' // Sensitive\n};\n\nlet app2 = express();\napp2.use(cors(corsOptions));\n</pre>\n<p>User-controlled origin:</p>\n<pre>\nfunction (req, res) {\n  const origin = req.header('Origin');\n  res.setHeader('Access-Control-Allow-Origin', origin); // Sensitive\n};\n</pre>\n""}]",[]
AYZ3RCN8fPd1PQzl2LAH,Open-Digital-Society_nodejs-sonar-github_AYZWSSb-cj38u-p-bzH_,main,server/start.js,20,Refactor this code to not use nested template literals.,OPEN,joshua.quek.fullstack@gmail.com,2022-12-19T02:16:04+0000,2023-02-22T03:55:57+0000,javascript:S4624,,CODE_SMELL,MAJOR,10,"brain-overload,confusing",,,javascript:S4624,javascript,Template literals should not be nested,2023-02-21T15:21:22+0000,"<p>Template literals (previously named ""template strings"") are an elegant way to build a string without using the <code>+</code> operator to make\nstrings concatenation more readable.</p>\n<p>However, it’s possible to build complex string literals by nesting together multiple template literals, and therefore lose readability and\nmaintainability.</p>\n<p>In such situations, it’s preferable to move the nested template into a separate statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet color = ""red"";\nlet count = 3;\nlet message = `I have ${color ? `${count} ${color}` : count} apples`; // Noncompliant; nested template strings not easy to read\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet color = ""red"";\nlet count = 3;\nlet apples = color ? `${count} ${color}` : count;\nlet message = `I have ${apples} apples`;\n</pre>","<p>Template literals (previously named ""template strings"") are an elegant way to build a string without using the <code>+</code> operator to make\nstrings concatenation more readable.</p>\n<p>However, it’s possible to build complex string literals by nesting together multiple template literals, and therefore lose readability and\nmaintainability.</p>\n<p>In such situations, it’s preferable to move the nested template into a separate statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet color = ""red"";\nlet count = 3;\nlet message = `I have ${color ? `${count} ${color}` : count} apples`; // Noncompliant; nested template strings not easy to read\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet color = ""red"";\nlet count = 3;\nlet apples = color ? `${count} ${color}` : count;\nlet message = `I have ${apples} apples`;\n</pre>",MAJOR,READY,false,,"brain-overload,confusing",js,JavaScript,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>Template literals (previously named \""template strings\"") are an elegant way to build a string without using the <code>+</code> operator to make\nstrings concatenation more readable.</p>\n<p>However, it’s possible to build complex string literals by nesting together multiple template literals, and therefore lose readability and\nmaintainability.</p>\n<p>In such situations, it’s preferable to move the nested template into a separate statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet color = \""red\"";\nlet count = 3;\nlet message = `I have ${color ? `${count} ${color}` : count} apples`; // Noncompliant; nested template strings not easy to read\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet color = \""red\"";\nlet count = 3;\nlet apples = color ? `${count} ${color}` : count;\nlet message = `I have ${apples} apples`;\n</pre>""}]",[]
AYZ3RCNafPd1PQzl2LAD,Open-Digital-Society_nodejs-sonar-github_AYZWSSb-cj38u-p-bzH_,main,server/libs/utils/passport-util/index.js,3,Remove this commented out code.,OPEN,joshua.quek.fullstack@gmail.com,2023-02-09T22:13:19+0000,2023-02-22T03:55:57+0000,javascript:S125,,CODE_SMELL,MAJOR,5,unused,,,javascript:S125,javascript,Sections of code should not be commented out,2023-02-21T15:21:22+0000,<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>,<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>,MAJOR,READY,false,,unused,js,JavaScript,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>""}]",[]
AYZ3RCNafPd1PQzl2LAE,Open-Digital-Society_nodejs-sonar-github_AYZWSSb-cj38u-p-bzH_,main,server/libs/utils/passport-util/index.js,8,Remove this commented out code.,OPEN,joshua.quek.fullstack@gmail.com,2023-02-09T22:13:19+0000,2023-02-22T03:55:57+0000,javascript:S125,,CODE_SMELL,MAJOR,5,unused,,,javascript:S125,javascript,Sections of code should not be commented out,2023-02-21T15:21:22+0000,<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>,<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>,MAJOR,READY,false,,unused,js,JavaScript,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>""}]",[]
AYZ3RYbWfPd1PQzl2L0q,joshuaquek_nodejs-sonar_AYYy5lp7jcm0OeKe8voF,main,server/app/routes/authentication/postgres-user-pass/register-user/validator.js,33,Use concise character class syntax '\d' instead of '[0-9]'.,OPEN,joshua.quek.fullstack@gmail.com,2022-12-19T02:16:04+0000,2023-02-22T03:57:04+0000,javascript:S6353,,CODE_SMELL,MINOR,5,regex,,,javascript:S6353,javascript,Regular expression quantifiers and character classes should be used concisely,2023-02-21T15:21:21+0000,"<p>With regular expressions syntax, it’s possible to express the same thing in many ways. For example, to match a two-digit number, one could write\n<code>[0-9]{2,2}</code> or <code>\d{2}</code>. Latter is not only shorter in terms of expression length, but also easier to read and thus to maintain.\nThis rule recommends to replace some bulky quantifiers and character classes with more concise equivalents:</p>\n<ul>\n  <li> <code>\d</code> for <code>[0-9]</code> and <code>\D</code> for <code>[^0-9]</code> </li>\n  <li> <code>\w</code> for <code>[A-Za-z0-9_]</code> and <code>\W</code> for <code>[^A-Za-z0-9_]</code> </li>\n  <li> <code>.</code> for character classes matching everything (e.g. <code>[\w\W]</code>, <code>[\d\D]</code>, or <code>[\s\S]</code> with\n  <code>s</code> flag) </li>\n  <li> <code>x?</code> for <code>x{0,1}</code>, <code>x*</code> for <code>x{0,}</code>, <code>x+</code> for <code>x{1,}</code>, <code>x{N}</code> for\n  <code>x{N,N}</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/a{1,}/; // Noncompliant, '{1,}' quantifier is the same as '+'\n/[A-Za-z0-9_]/; // Noncompliant, '\w' is equivalent\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/a+/;\n/\w/;\n</pre>","<p>With regular expressions syntax, it’s possible to express the same thing in many ways. For example, to match a two-digit number, one could write\n<code>[0-9]{2,2}</code> or <code>\d{2}</code>. Latter is not only shorter in terms of expression length, but also easier to read and thus to maintain.\nThis rule recommends to replace some bulky quantifiers and character classes with more concise equivalents:</p>\n<ul>\n  <li> <code>\d</code> for <code>[0-9]</code> and <code>\D</code> for <code>[^0-9]</code> </li>\n  <li> <code>\w</code> for <code>[A-Za-z0-9_]</code> and <code>\W</code> for <code>[^A-Za-z0-9_]</code> </li>\n  <li> <code>.</code> for character classes matching everything (e.g. <code>[\w\W]</code>, <code>[\d\D]</code>, or <code>[\s\S]</code> with\n  <code>s</code> flag) </li>\n  <li> <code>x?</code> for <code>x{0,1}</code>, <code>x*</code> for <code>x{0,}</code>, <code>x+</code> for <code>x{1,}</code>, <code>x{N}</code> for\n  <code>x{N,N}</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/a{1,}/; // Noncompliant, '{1,}' quantifier is the same as '+'\n/[A-Za-z0-9_]/; // Noncompliant, '\w' is equivalent\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/a+/;\n/\w/;\n</pre>",MINOR,READY,false,,regex,js,JavaScript,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>With regular expressions syntax, it’s possible to express the same thing in many ways. For example, to match a two-digit number, one could write\n<code>[0-9]{2,2}</code> or <code>\\d{2}</code>. Latter is not only shorter in terms of expression length, but also easier to read and thus to maintain.\nThis rule recommends to replace some bulky quantifiers and character classes with more concise equivalents:</p>\n<ul>\n  <li> <code>\\d</code> for <code>[0-9]</code> and <code>\\D</code> for <code>[^0-9]</code> </li>\n  <li> <code>\\w</code> for <code>[A-Za-z0-9_]</code> and <code>\\W</code> for <code>[^A-Za-z0-9_]</code> </li>\n  <li> <code>.</code> for character classes matching everything (e.g. <code>[\\w\\W]</code>, <code>[\\d\\D]</code>, or <code>[\\s\\S]</code> with\n  <code>s</code> flag) </li>\n  <li> <code>x?</code> for <code>x{0,1}</code>, <code>x*</code> for <code>x{0,}</code>, <code>x+</code> for <code>x{1,}</code>, <code>x{N}</code> for\n  <code>x{N,N}</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/a{1,}/; // Noncompliant, '{1,}' quantifier is the same as '+'\n/[A-Za-z0-9_]/; // Noncompliant, '\\w' is equivalent\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/a+/;\n/\\w/;\n</pre>""}]",[]
AYZ3RYbvfPd1PQzl2L0r,joshuaquek_nodejs-sonar_AYYy5lp7jcm0OeKe8voF,main,server/app/routes/authentication/postgres-user-pass/login-user/validator.js,33,Use concise character class syntax '\d' instead of '[0-9]'.,OPEN,joshua.quek.fullstack@gmail.com,2022-12-19T02:16:04+0000,2023-02-22T03:57:04+0000,javascript:S6353,,CODE_SMELL,MINOR,5,regex,,,javascript:S6353,javascript,Regular expression quantifiers and character classes should be used concisely,2023-02-21T15:21:21+0000,"<p>With regular expressions syntax, it’s possible to express the same thing in many ways. For example, to match a two-digit number, one could write\n<code>[0-9]{2,2}</code> or <code>\d{2}</code>. Latter is not only shorter in terms of expression length, but also easier to read and thus to maintain.\nThis rule recommends to replace some bulky quantifiers and character classes with more concise equivalents:</p>\n<ul>\n  <li> <code>\d</code> for <code>[0-9]</code> and <code>\D</code> for <code>[^0-9]</code> </li>\n  <li> <code>\w</code> for <code>[A-Za-z0-9_]</code> and <code>\W</code> for <code>[^A-Za-z0-9_]</code> </li>\n  <li> <code>.</code> for character classes matching everything (e.g. <code>[\w\W]</code>, <code>[\d\D]</code>, or <code>[\s\S]</code> with\n  <code>s</code> flag) </li>\n  <li> <code>x?</code> for <code>x{0,1}</code>, <code>x*</code> for <code>x{0,}</code>, <code>x+</code> for <code>x{1,}</code>, <code>x{N}</code> for\n  <code>x{N,N}</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/a{1,}/; // Noncompliant, '{1,}' quantifier is the same as '+'\n/[A-Za-z0-9_]/; // Noncompliant, '\w' is equivalent\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/a+/;\n/\w/;\n</pre>","<p>With regular expressions syntax, it’s possible to express the same thing in many ways. For example, to match a two-digit number, one could write\n<code>[0-9]{2,2}</code> or <code>\d{2}</code>. Latter is not only shorter in terms of expression length, but also easier to read and thus to maintain.\nThis rule recommends to replace some bulky quantifiers and character classes with more concise equivalents:</p>\n<ul>\n  <li> <code>\d</code> for <code>[0-9]</code> and <code>\D</code> for <code>[^0-9]</code> </li>\n  <li> <code>\w</code> for <code>[A-Za-z0-9_]</code> and <code>\W</code> for <code>[^A-Za-z0-9_]</code> </li>\n  <li> <code>.</code> for character classes matching everything (e.g. <code>[\w\W]</code>, <code>[\d\D]</code>, or <code>[\s\S]</code> with\n  <code>s</code> flag) </li>\n  <li> <code>x?</code> for <code>x{0,1}</code>, <code>x*</code> for <code>x{0,}</code>, <code>x+</code> for <code>x{1,}</code>, <code>x{N}</code> for\n  <code>x{N,N}</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/a{1,}/; // Noncompliant, '{1,}' quantifier is the same as '+'\n/[A-Za-z0-9_]/; // Noncompliant, '\w' is equivalent\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/a+/;\n/\w/;\n</pre>",MINOR,READY,false,,regex,js,JavaScript,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>With regular expressions syntax, it’s possible to express the same thing in many ways. For example, to match a two-digit number, one could write\n<code>[0-9]{2,2}</code> or <code>\\d{2}</code>. Latter is not only shorter in terms of expression length, but also easier to read and thus to maintain.\nThis rule recommends to replace some bulky quantifiers and character classes with more concise equivalents:</p>\n<ul>\n  <li> <code>\\d</code> for <code>[0-9]</code> and <code>\\D</code> for <code>[^0-9]</code> </li>\n  <li> <code>\\w</code> for <code>[A-Za-z0-9_]</code> and <code>\\W</code> for <code>[^A-Za-z0-9_]</code> </li>\n  <li> <code>.</code> for character classes matching everything (e.g. <code>[\\w\\W]</code>, <code>[\\d\\D]</code>, or <code>[\\s\\S]</code> with\n  <code>s</code> flag) </li>\n  <li> <code>x?</code> for <code>x{0,1}</code>, <code>x*</code> for <code>x{0,}</code>, <code>x+</code> for <code>x{1,}</code>, <code>x{N}</code> for\n  <code>x{N,N}</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/a{1,}/; // Noncompliant, '{1,}' quantifier is the same as '+'\n/[A-Za-z0-9_]/; // Noncompliant, '\\w' is equivalent\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/a+/;\n/\\w/;\n</pre>""}]",[]
AYZ3RYccfPd1PQzl2L0w,joshuaquek_nodejs-sonar_AYYy5lp7jcm0OeKe8voF,main,server/libs/utils/passport-util/user-object.js,7,Review this potentially hardcoded credential.,TO_REVIEW,joshua.quek.fullstack@gmail.com,2022-12-19T02:16:04+0000,2023-02-22T03:57:04+0000,javascript:S2068,,SECURITY_HOTSPOT,,,,auth,HIGH,javascript:S2068,javascript,Hard-coded credentials are security-sensitive,2023-02-21T15:21:22+0000,"<p>Because it is easy to extract strings from an application source code or binary, credentials should not be hard-coded. This is particularly true\nfor applications that are distributed or that are open-source.</p>\n<p>In the past, it has led to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13466"">CVE-2019-13466</a> </li>\n  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-15389"">CVE-2018-15389</a> </li>\n</ul>\n<p>Credentials should be stored outside of the code in a configuration file, a database, or a management service for secrets.</p>\n<p>This rule flags instances of hard-coded credentials used in database and LDAP connections. It looks for hard-coded credentials in connection\nstrings, and for variable names that match any of the patterns from the provided list.</p>\n<p>It’s recommended to customize the configuration of this rule with additional credential words such as ""oauthToken"", ""secret"", …​</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Credentials allow access to a sensitive component like a database, a file storage, an API or a service. </li>\n  <li> Credentials are used in production environments. </li>\n  <li> Application re-distribution is required before updating the credentials. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Store the credentials in a configuration file that is not pushed to the code repository. </li>\n  <li> Store the credentials in a database. </li>\n  <li> Use your cloud provider’s service for managing secrets. </li>\n  <li> If a password has been disclosed through the source code: change it. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nvar mysql = require('mysql');\nvar connection = mysql.createConnection(\n{\n  host:'localhost',\n  user: ""admin"",\n  database: ""project"",\n  password: ""mypassword"", // sensitive\n  multipleStatements: true\n});\nconnection.connect();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar mysql = require('mysql');\nvar connection = mysql.createConnection({\n  host: process.env.MYSQL_URL,\n  user: process.env.MYSQL_USERNAME,\n  password: process.env.MYSQL_PASSWORD,\n  database: process.env.MYSQL_DATABASE\n});\nconnection.connect();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/"">OWASP Top 10 2021 Category A7</a> - Identification and\n  Authentication Failures </li>\n  <li> <a href=""https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication"">OWASP Top 10 2017 Category A2</a> - Broken Authentication\n  </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/798"">MITRE, CWE-798</a> - Use of Hard-coded Credentials </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/259"">MITRE, CWE-259</a> - Use of Hard-coded Password </li>\n  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>\n  <li> Derived from FindSecBugs rule <a href=""https://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD"">Hard Coded Password</a> </li>\n</ul>","<p>Because it is easy to extract strings from an application source code or binary, credentials should not be hard-coded. This is particularly true\nfor applications that are distributed or that are open-source.</p>\n<p>In the past, it has led to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13466"">CVE-2019-13466</a> </li>\n  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-15389"">CVE-2018-15389</a> </li>\n</ul>\n<p>Credentials should be stored outside of the code in a configuration file, a database, or a management service for secrets.</p>\n<p>This rule flags instances of hard-coded credentials used in database and LDAP connections. It looks for hard-coded credentials in connection\nstrings, and for variable names that match any of the patterns from the provided list.</p>\n<p>It’s recommended to customize the configuration of this rule with additional credential words such as ""oauthToken"", ""secret"", …​</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Credentials allow access to a sensitive component like a database, a file storage, an API or a service. </li>\n  <li> Credentials are used in production environments. </li>\n  <li> Application re-distribution is required before updating the credentials. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Store the credentials in a configuration file that is not pushed to the code repository. </li>\n  <li> Store the credentials in a database. </li>\n  <li> Use your cloud provider’s service for managing secrets. </li>\n  <li> If a password has been disclosed through the source code: change it. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nvar mysql = require('mysql');\nvar connection = mysql.createConnection(\n{\n  host:'localhost',\n  user: ""admin"",\n  database: ""project"",\n  password: ""mypassword"", // sensitive\n  multipleStatements: true\n});\nconnection.connect();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar mysql = require('mysql');\nvar connection = mysql.createConnection({\n  host: process.env.MYSQL_URL,\n  user: process.env.MYSQL_USERNAME,\n  password: process.env.MYSQL_PASSWORD,\n  database: process.env.MYSQL_DATABASE\n});\nconnection.connect();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/"">OWASP Top 10 2021 Category A7</a> - Identification and\n  Authentication Failures </li>\n  <li> <a href=""https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication"">OWASP Top 10 2017 Category A2</a> - Broken Authentication\n  </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/798"">MITRE, CWE-798</a> - Use of Hard-coded Credentials </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/259"">MITRE, CWE-259</a> - Use of Hard-coded Password </li>\n  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>\n  <li> Derived from FindSecBugs rule <a href=""https://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD"">Hard Coded Password</a> </li>\n</ul>",BLOCKER,READY,false,,"cwe,sans-top25-porous",js,JavaScript,"[{""key"":""credentialWords"",""htmlDesc"":""Comma separated list of words identifying potential credentials."",""defaultValue"":""password, pwd, passwd"",""type"":""STRING""}]",SECURITY_HOTSPOT,false,MAIN,false,"[{""key"":""how_to_fix"",""content"":""<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Store the credentials in a configuration file that is not pushed to the code repository. </li>\n  <li> Store the credentials in a database. </li>\n  <li> Use your cloud provider’s service for managing secrets. </li>\n  <li> If a password has been disclosed through the source code: change it. </li>\n</ul>\n<h2>Compliant Solution</h2>\n<pre>\nvar mysql = require('mysql');\n\nvar connection = mysql.createConnection({\n  host: process.env.MYSQL_URL,\n  user: process.env.MYSQL_USERNAME,\n  password: process.env.MYSQL_PASSWORD,\n  database: process.env.MYSQL_DATABASE\n});\nconnection.connect();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\""https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"">OWASP Top 10 2021 Category A7</a> - Identification and\n  Authentication Failures </li>\n  <li> <a href=\""https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\"">OWASP Top 10 2017 Category A2</a> - Broken Authentication\n  </li>\n  <li> <a href=\""https://cwe.mitre.org/data/definitions/798\"">MITRE, CWE-798</a> - Use of Hard-coded Credentials </li>\n  <li> <a href=\""https://cwe.mitre.org/data/definitions/259\"">MITRE, CWE-259</a> - Use of Hard-coded Password </li>\n  <li> <a href=\""https://www.sans.org/top25-software-errors/#cat3\"">SANS Top 25</a> - Porous Defenses </li>\n  <li> Derived from FindSecBugs rule <a href=\""https://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD\"">Hard Coded Password</a> </li>\n</ul>""},{""key"":""root_cause"",""content"":""<p>Because it is easy to extract strings from an application source code or binary, credentials should not be hard-coded. This is particularly true\nfor applications that are distributed or that are open-source.</p>\n<p>In the past, it has led to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13466\"">CVE-2019-13466</a> </li>\n  <li> <a href=\""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-15389\"">CVE-2018-15389</a> </li>\n</ul>\n<p>Credentials should be stored outside of the code in a configuration file, a database, or a management service for secrets.</p>\n<p>This rule flags instances of hard-coded credentials used in database and LDAP connections. It looks for hard-coded credentials in connection\nstrings, and for variable names that match any of the patterns from the provided list.</p>\n<p>It’s recommended to customize the configuration of this rule with additional credential words such as \""oauthToken\"", \""secret\"", …​</p>\n""},{""key"":""assess_the_problem"",""content"":""<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Credentials allow access to a sensitive component like a database, a file storage, an API or a service. </li>\n  <li> Credentials are used in production environments. </li>\n  <li> Application re-distribution is required before updating the credentials. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nvar mysql = require('mysql');\n\nvar connection = mysql.createConnection(\n{\n  host:'localhost',\n  user: \""admin\"",\n  database: \""project\"",\n  password: \""mypassword\"", // sensitive\n  multipleStatements: true\n});\n\nconnection.connect();\n</pre>\n""}]",[]
AYZ3RYcpfPd1PQzl2L0x,joshuaquek_nodejs-sonar_AYYy5lp7jcm0OeKe8voF,main,server/libs/services/express-service/index.js,18,Make sure that enabling CORS is safe here.,TO_REVIEW,joshua.quek.fullstack@gmail.com,2022-12-19T02:16:04+0000,2023-02-22T03:57:04+0000,javascript:S5122,,SECURITY_HOTSPOT,,,,insecure-conf,LOW,javascript:S5122,javascript,Having a permissive Cross-Origin Resource Sharing policy is security-sensitive,2023-02-21T15:21:21+0000,"<p>Having a permissive Cross-Origin Resource Sharing policy is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0269"">CVE-2018-0269</a> </li>\n  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14460"">CVE-2017-14460</a> </li>\n</ul>\n<p><a href=""https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy"">Same origin policy</a> in browsers prevents, by default and for\nsecurity-reasons, a javascript frontend to perform a cross-origin HTTP request to a resource that has a different origin (domain, protocol, or port)\nfrom its own. The requested target can append additional HTTP headers in response, called <a\nhref=""https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"">CORS</a>, that act like directives for the browser and change the access control policy\n/ relax the same origin policy.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> You don’t trust the origin specified, example: <code>Access-Control-Allow-Origin: untrustedwebsite.com</code>. </li>\n  <li> Access control policy is entirely disabled: <code>Access-Control-Allow-Origin: *</code> </li>\n  <li> Your access control policy is dynamically defined by a user-controlled input like <a\n  href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin""><code>origin</code></a> header. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> The <code>Access-Control-Allow-Origin</code> header should be set only for a trusted origin and for specific resources. </li>\n  <li> Allow only selected, trusted domains in the <code>Access-Control-Allow-Origin</code> header. Prefer whitelisting domains over blacklisting or\n  allowing any domain (do not use * wildcard nor blindly return the <code>Origin</code> header content without any checks). </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p><a href=""https://nodejs.org/api/http.html"">nodejs http</a> built-in module:</p>\n<pre>\nconst http = require('http');\nconst srv = http.createServer((req, res) =&gt; {\n  res.writeHead(200, { 'Access-Control-Allow-Origin': '*' }); // Sensitive\n  res.end('ok');\n});\nsrv.listen(3000);\n</pre>\n<p><a href=""https://www.npmjs.com/package/express"">Express.js</a> framework with <a href=""https://www.npmjs.com/package/cors"">cors middleware</a>:</p>\n<pre>\nconst cors = require('cors');\nlet app1 = express();\napp1.use(cors()); // Sensitive: by default origin is set to *\nlet corsOptions = {\n  origin: '*' // Sensitive\n};\nlet app2 = express();\napp2.use(cors(corsOptions));\n</pre>\n<p>User-controlled origin:</p>\n<pre>\nfunction (req, res) {\n  const origin = req.header('Origin');\n  res.setHeader('Access-Control-Allow-Origin', origin); // Sensitive\n};\n</pre>\n<h2>Compliant Solution</h2>\n<p><a href=""https://nodejs.org/api/http.html"">nodejs http</a> built-in module:</p>\n<pre>\nconst http = require('http');\nconst srv = http.createServer((req, res) =&gt; {\n  res.writeHead(200, { 'Access-Control-Allow-Origin': 'trustedwebsite.com' }); // Compliant\n  res.end('ok');\n});\nsrv.listen(3000);\n</pre>\n<p><a href=""https://www.npmjs.com/package/express"">Express.js</a> framework with <a href=""https://www.npmjs.com/package/cors"">cors middleware</a>:</p>\n<pre>\nconst cors = require('cors');\nlet corsOptions = {\n  origin: 'trustedwebsite.com' // Compliant\n};\nlet app = express();\napp.use(cors(corsOptions));\n</pre>\n<p>User-controlled origin validated with an allow-list:</p>\n<pre>\nfunction (req, res) {\n  const origin = req.header('Origin');\n  if (trustedOrigins.indexOf(origin) &gt;= 0) {\n    res.setHeader('Access-Control-Allow-Origin', origin);\n  }\n};\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://owasp.org/Top10/A05_2021-Security_Misconfiguration/"">OWASP Top 10 2021 Category A5</a> - Security Misconfiguration </li>\n  <li> <a href=""https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/"">OWASP Top 10 2021 Category A7</a> - Identification and\n  Authentication Failures </li>\n  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"">developer.mozilla.org</a> - CORS </li>\n  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy"">developer.mozilla.org</a> - Same origin policy </li>\n  <li> <a href=""https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration"">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=""https://cheatsheetseries.owasp.org/cheatsheets/HTML5_Security_Cheat_Sheet.html#cross-origin-resource-sharing"">OWASP HTML5 Security\n  Cheat Sheet</a> - Cross Origin Resource Sharing </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/346"">MITRE, CWE-346</a> - Origin Validation Error </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/942"">MITRE, CWE-942</a> - Overly Permissive Cross-domain Whitelist </li>\n  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>\n</ul>","<p>Having a permissive Cross-Origin Resource Sharing policy is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0269"">CVE-2018-0269</a> </li>\n  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14460"">CVE-2017-14460</a> </li>\n</ul>\n<p><a href=""https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy"">Same origin policy</a> in browsers prevents, by default and for\nsecurity-reasons, a javascript frontend to perform a cross-origin HTTP request to a resource that has a different origin (domain, protocol, or port)\nfrom its own. The requested target can append additional HTTP headers in response, called <a\nhref=""https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"">CORS</a>, that act like directives for the browser and change the access control policy\n/ relax the same origin policy.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> You don’t trust the origin specified, example: <code>Access-Control-Allow-Origin: untrustedwebsite.com</code>. </li>\n  <li> Access control policy is entirely disabled: <code>Access-Control-Allow-Origin: *</code> </li>\n  <li> Your access control policy is dynamically defined by a user-controlled input like <a\n  href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin""><code>origin</code></a> header. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> The <code>Access-Control-Allow-Origin</code> header should be set only for a trusted origin and for specific resources. </li>\n  <li> Allow only selected, trusted domains in the <code>Access-Control-Allow-Origin</code> header. Prefer whitelisting domains over blacklisting or\n  allowing any domain (do not use * wildcard nor blindly return the <code>Origin</code> header content without any checks). </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p><a href=""https://nodejs.org/api/http.html"">nodejs http</a> built-in module:</p>\n<pre>\nconst http = require('http');\nconst srv = http.createServer((req, res) =&gt; {\n  res.writeHead(200, { 'Access-Control-Allow-Origin': '*' }); // Sensitive\n  res.end('ok');\n});\nsrv.listen(3000);\n</pre>\n<p><a href=""https://www.npmjs.com/package/express"">Express.js</a> framework with <a href=""https://www.npmjs.com/package/cors"">cors middleware</a>:</p>\n<pre>\nconst cors = require('cors');\nlet app1 = express();\napp1.use(cors()); // Sensitive: by default origin is set to *\nlet corsOptions = {\n  origin: '*' // Sensitive\n};\nlet app2 = express();\napp2.use(cors(corsOptions));\n</pre>\n<p>User-controlled origin:</p>\n<pre>\nfunction (req, res) {\n  const origin = req.header('Origin');\n  res.setHeader('Access-Control-Allow-Origin', origin); // Sensitive\n};\n</pre>\n<h2>Compliant Solution</h2>\n<p><a href=""https://nodejs.org/api/http.html"">nodejs http</a> built-in module:</p>\n<pre>\nconst http = require('http');\nconst srv = http.createServer((req, res) =&gt; {\n  res.writeHead(200, { 'Access-Control-Allow-Origin': 'trustedwebsite.com' }); // Compliant\n  res.end('ok');\n});\nsrv.listen(3000);\n</pre>\n<p><a href=""https://www.npmjs.com/package/express"">Express.js</a> framework with <a href=""https://www.npmjs.com/package/cors"">cors middleware</a>:</p>\n<pre>\nconst cors = require('cors');\nlet corsOptions = {\n  origin: 'trustedwebsite.com' // Compliant\n};\nlet app = express();\napp.use(cors(corsOptions));\n</pre>\n<p>User-controlled origin validated with an allow-list:</p>\n<pre>\nfunction (req, res) {\n  const origin = req.header('Origin');\n  if (trustedOrigins.indexOf(origin) &gt;= 0) {\n    res.setHeader('Access-Control-Allow-Origin', origin);\n  }\n};\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://owasp.org/Top10/A05_2021-Security_Misconfiguration/"">OWASP Top 10 2021 Category A5</a> - Security Misconfiguration </li>\n  <li> <a href=""https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/"">OWASP Top 10 2021 Category A7</a> - Identification and\n  Authentication Failures </li>\n  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"">developer.mozilla.org</a> - CORS </li>\n  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy"">developer.mozilla.org</a> - Same origin policy </li>\n  <li> <a href=""https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration"">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=""https://cheatsheetseries.owasp.org/cheatsheets/HTML5_Security_Cheat_Sheet.html#cross-origin-resource-sharing"">OWASP HTML5 Security\n  Cheat Sheet</a> - Cross Origin Resource Sharing </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/346"">MITRE, CWE-346</a> - Origin Validation Error </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/942"">MITRE, CWE-942</a> - Overly Permissive Cross-domain Whitelist </li>\n  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>\n</ul>",MINOR,READY,false,,"cwe,express.js,sans-top25-porous",js,JavaScript,[],SECURITY_HOTSPOT,false,MAIN,false,"[{""key"":""how_to_fix"",""content"":""<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> The <code>Access-Control-Allow-Origin</code> header should be set only for a trusted origin and for specific resources. </li>\n  <li> Allow only selected, trusted domains in the <code>Access-Control-Allow-Origin</code> header. Prefer whitelisting domains over blacklisting or\n  allowing any domain (do not use * wildcard nor blindly return the <code>Origin</code> header content without any checks). </li>\n</ul>\n<h2>Compliant Solution</h2>\n<p><a href=\""https://nodejs.org/api/http.html\"">nodejs http</a> built-in module:</p>\n<pre>\nconst http = require('http');\nconst srv = http.createServer((req, res) =&gt; {\n  res.writeHead(200, { 'Access-Control-Allow-Origin': 'trustedwebsite.com' }); // Compliant\n  res.end('ok');\n});\nsrv.listen(3000);\n</pre>\n<p><a href=\""https://www.npmjs.com/package/express\"">Express.js</a> framework with <a href=\""https://www.npmjs.com/package/cors\"">cors middleware</a>:</p>\n<pre>\nconst cors = require('cors');\n\nlet corsOptions = {\n  origin: 'trustedwebsite.com' // Compliant\n};\n\nlet app = express();\napp.use(cors(corsOptions));\n</pre>\n<p>User-controlled origin validated with an allow-list:</p>\n<pre>\nfunction (req, res) {\n  const origin = req.header('Origin');\n\n  if (trustedOrigins.indexOf(origin) &gt;= 0) {\n    res.setHeader('Access-Control-Allow-Origin', origin);\n  }\n};\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\""https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"">OWASP Top 10 2021 Category A5</a> - Security Misconfiguration </li>\n  <li> <a href=\""https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"">OWASP Top 10 2021 Category A7</a> - Identification and\n  Authentication Failures </li>\n  <li> <a href=\""https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\"">developer.mozilla.org</a> - CORS </li>\n  <li> <a href=\""https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\"">developer.mozilla.org</a> - Same origin policy </li>\n  <li> <a href=\""https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\""https://cheatsheetseries.owasp.org/cheatsheets/HTML5_Security_Cheat_Sheet.html#cross-origin-resource-sharing\"">OWASP HTML5 Security\n  Cheat Sheet</a> - Cross Origin Resource Sharing </li>\n  <li> <a href=\""https://cwe.mitre.org/data/definitions/346\"">MITRE, CWE-346</a> - Origin Validation Error </li>\n  <li> <a href=\""https://cwe.mitre.org/data/definitions/942\"">MITRE, CWE-942</a> - Overly Permissive Cross-domain Whitelist </li>\n  <li> <a href=\""https://www.sans.org/top25-software-errors/#cat3\"">SANS Top 25</a> - Porous Defenses </li>\n</ul>""},{""key"":""root_cause"",""content"":""<p>Having a permissive Cross-Origin Resource Sharing policy is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0269\"">CVE-2018-0269</a> </li>\n  <li> <a href=\""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14460\"">CVE-2017-14460</a> </li>\n</ul>\n<p><a href=\""https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\"">Same origin policy</a> in browsers prevents, by default and for\nsecurity-reasons, a javascript frontend to perform a cross-origin HTTP request to a resource that has a different origin (domain, protocol, or port)\nfrom its own. The requested target can append additional HTTP headers in response, called <a\nhref=\""https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\"">CORS</a>, that act like directives for the browser and change the access control policy\n/ relax the same origin policy.</p>\n""},{""key"":""assess_the_problem"",""content"":""<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> You don’t trust the origin specified, example: <code>Access-Control-Allow-Origin: untrustedwebsite.com</code>. </li>\n  <li> Access control policy is entirely disabled: <code>Access-Control-Allow-Origin: *</code> </li>\n  <li> Your access control policy is dynamically defined by a user-controlled input like <a\n  href=\""https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin\""><code>origin</code></a> header. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Sensitive Code Example</h2>\n<p><a href=\""https://nodejs.org/api/http.html\"">nodejs http</a> built-in module:</p>\n<pre>\nconst http = require('http');\nconst srv = http.createServer((req, res) =&gt; {\n  res.writeHead(200, { 'Access-Control-Allow-Origin': '*' }); // Sensitive\n  res.end('ok');\n});\nsrv.listen(3000);\n</pre>\n<p><a href=\""https://www.npmjs.com/package/express\"">Express.js</a> framework with <a href=\""https://www.npmjs.com/package/cors\"">cors middleware</a>:</p>\n<pre>\nconst cors = require('cors');\n\nlet app1 = express();\napp1.use(cors()); // Sensitive: by default origin is set to *\n\nlet corsOptions = {\n  origin: '*' // Sensitive\n};\n\nlet app2 = express();\napp2.use(cors(corsOptions));\n</pre>\n<p>User-controlled origin:</p>\n<pre>\nfunction (req, res) {\n  const origin = req.header('Origin');\n  res.setHeader('Access-Control-Allow-Origin', origin); // Sensitive\n};\n</pre>\n""}]",[]
AYZ3RYc1fPd1PQzl2L0y,joshuaquek_nodejs-sonar_AYYy5lp7jcm0OeKe8voF,main,server/start.js,20,Refactor this code to not use nested template literals.,OPEN,joshua.quek.fullstack@gmail.com,2022-12-19T02:16:04+0000,2023-02-22T03:57:04+0000,javascript:S4624,,CODE_SMELL,MAJOR,10,"brain-overload,confusing",,,javascript:S4624,javascript,Template literals should not be nested,2023-02-21T15:21:22+0000,"<p>Template literals (previously named ""template strings"") are an elegant way to build a string without using the <code>+</code> operator to make\nstrings concatenation more readable.</p>\n<p>However, it’s possible to build complex string literals by nesting together multiple template literals, and therefore lose readability and\nmaintainability.</p>\n<p>In such situations, it’s preferable to move the nested template into a separate statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet color = ""red"";\nlet count = 3;\nlet message = `I have ${color ? `${count} ${color}` : count} apples`; // Noncompliant; nested template strings not easy to read\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet color = ""red"";\nlet count = 3;\nlet apples = color ? `${count} ${color}` : count;\nlet message = `I have ${apples} apples`;\n</pre>","<p>Template literals (previously named ""template strings"") are an elegant way to build a string without using the <code>+</code> operator to make\nstrings concatenation more readable.</p>\n<p>However, it’s possible to build complex string literals by nesting together multiple template literals, and therefore lose readability and\nmaintainability.</p>\n<p>In such situations, it’s preferable to move the nested template into a separate statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet color = ""red"";\nlet count = 3;\nlet message = `I have ${color ? `${count} ${color}` : count} apples`; // Noncompliant; nested template strings not easy to read\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet color = ""red"";\nlet count = 3;\nlet apples = color ? `${count} ${color}` : count;\nlet message = `I have ${apples} apples`;\n</pre>",MAJOR,READY,false,,"brain-overload,confusing",js,JavaScript,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>Template literals (previously named \""template strings\"") are an elegant way to build a string without using the <code>+</code> operator to make\nstrings concatenation more readable.</p>\n<p>However, it’s possible to build complex string literals by nesting together multiple template literals, and therefore lose readability and\nmaintainability.</p>\n<p>In such situations, it’s preferable to move the nested template into a separate statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet color = \""red\"";\nlet count = 3;\nlet message = `I have ${color ? `${count} ${color}` : count} apples`; // Noncompliant; nested template strings not easy to read\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet color = \""red\"";\nlet count = 3;\nlet apples = color ? `${count} ${color}` : count;\nlet message = `I have ${apples} apples`;\n</pre>""}]",[]
AYZ3RYcIfPd1PQzl2L0t,joshuaquek_nodejs-sonar_AYYy5lp7jcm0OeKe8voF,main,server/libs/utils/response-util/index.js,10,Refactor this function to reduce its Cognitive Complexity from 16 to the 15 allowed.,OPEN,joshua.quek.fullstack@gmail.com,2022-12-19T02:16:04+0000,2023-02-22T03:57:04+0000,javascript:S3776,,CODE_SMELL,CRITICAL,6,brain-overload,,,javascript:S3776,javascript,Cognitive Complexity of functions should not be too high,2023-02-21T15:21:22+0000,"<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be\ndifficult to maintain.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://www.sonarsource.com/docs/CognitiveComplexity.pdf"">Cognitive Complexity</a> </li>\n</ul>","<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be\ndifficult to maintain.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://www.sonarsource.com/docs/CognitiveComplexity.pdf"">Cognitive Complexity</a> </li>\n</ul>",CRITICAL,READY,false,,brain-overload,js,JavaScript,"[{""key"":""threshold"",""htmlDesc"":""The maximum authorized complexity."",""defaultValue"":""15"",""type"":""INTEGER""}]",CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be\ndifficult to maintain.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\""https://www.sonarsource.com/docs/CognitiveComplexity.pdf\"">Cognitive Complexity</a> </li>\n</ul>""}]",[]
AYZ3RYb6fPd1PQzl2L0s,joshuaquek_nodejs-sonar_AYYy5lp7jcm0OeKe8voF,main,server/app/routes/authentication/index.js,null,Remove this commented out code.,CLOSED,joshua.quek.fullstack@gmail.com,2023-02-09T22:13:19+0000,2023-02-22T08:56:36+0000,javascript:S125,,CODE_SMELL,MAJOR,5,unused,,,javascript:S125,javascript,Sections of code should not be commented out,2023-02-21T15:21:22+0000,<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>,<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>,MAJOR,READY,false,,unused,js,JavaScript,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>""}]",[]
AYZ3RYcVfPd1PQzl2L0u,joshuaquek_nodejs-sonar_AYYy5lp7jcm0OeKe8voF,main,server/libs/utils/passport-util/index.js,3,Remove this commented out code.,OPEN,joshua.quek.fullstack@gmail.com,2023-02-09T22:13:19+0000,2023-02-22T03:57:04+0000,javascript:S125,,CODE_SMELL,MAJOR,5,unused,,,javascript:S125,javascript,Sections of code should not be commented out,2023-02-21T15:21:22+0000,<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>,<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>,MAJOR,READY,false,,unused,js,JavaScript,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>""}]",[]
AYZ3RYcVfPd1PQzl2L0v,joshuaquek_nodejs-sonar_AYYy5lp7jcm0OeKe8voF,main,server/libs/utils/passport-util/index.js,8,Remove this commented out code.,OPEN,joshua.quek.fullstack@gmail.com,2023-02-09T22:13:19+0000,2023-02-22T03:57:04+0000,javascript:S125,,CODE_SMELL,MAJOR,5,unused,,,javascript:S125,javascript,Sections of code should not be commented out,2023-02-21T15:21:22+0000,<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>,<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>,MAJOR,READY,false,,unused,js,JavaScript,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>""}]",[]
AYj9QYKHj7aSGIl2btKY,nodejs-sonar-local,main,server/app/routes/authentication/postgres-user-pass/login-user/helpers/check-credentials.js,8,Promise executor functions should not be async.,OPEN,joshua.quek.fullstack@gmail.com,2022-12-19T02:16:04+0000,2023-07-14T02:36:54+0000,javascript:S6544,[object Object],BUG,MAJOR,5,"async,promise",,,javascript:S6544,javascript,Promise executor functions should not be async,2023-04-24T05:12:44+0000,"<p>In JavaScript, a promise is a mechanism to perform tasks in an asynchronous way. To this end, the language provides the <code>Promise</code> object\nwhich represents the eventual completion or failure of an asynchronous operation and its resulting value. A promise can be created with the\n<code>Promise</code> constructor accepting an executor function as an argument, which has <code>resolve</code> and <code>reject</code> parameters that\nare invoked when the promises completes or fails.</p>\n<h2>Why is this an issue?</h2>\n<p>The executor function of a promise can also be an async function. However, this usually denotes a mistake:</p>\n<ul>\n  <li> If an async executor function throws an error, the error won’t cause the created Promise to reject and will be lost therefore. This could make\n  it difficult to debug and handle runtime errors. </li>\n  <li> If a Promise executor function is using <code>await</code>, this means that it’s not necessary to use the Promise constructor, or the scope of\n  the Promise constructor can be reduced. </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Fixing the issue requires removing the <code>async</code> keyword from the Promise executor function and adapting the body of the executor\naccordingly.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nconst p = new Promise(async (resolve, reject) =&gt; {\n  doSomething('Hey, there!', function(err, res) {\n    if (err) {\n      reject(err);\n      return;\n    }\n    await saveResult(res)\n    resolve(res);\n  });\n});\nawait p;\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nconst p = new Promise(async (resolve, reject) =&gt; {\n  doSomething('Hey, there!', function(err, res) {\n    if (err) {\n      reject(err);\n      return;\n    }\n    resolve(res);\n  });\n});\nconst res = await p;\nawait saveResult(res);\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"">MDN Promise</a> </li>\n  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises"">MDN Using promises</a> </li>\n  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function"">MDN Async function</a> </li>\n</ul>","<p>In JavaScript, a promise is a mechanism to perform tasks in an asynchronous way. To this end, the language provides the <code>Promise</code> object\nwhich represents the eventual completion or failure of an asynchronous operation and its resulting value. A promise can be created with the\n<code>Promise</code> constructor accepting an executor function as an argument, which has <code>resolve</code> and <code>reject</code> parameters that\nare invoked when the promises completes or fails.</p>\n<h2>Why is this an issue?</h2>\n<p>The executor function of a promise can also be an async function. However, this usually denotes a mistake:</p>\n<ul>\n  <li> If an async executor function throws an error, the error won’t cause the created Promise to reject and will be lost therefore. This could make\n  it difficult to debug and handle runtime errors. </li>\n  <li> If a Promise executor function is using <code>await</code>, this means that it’s not necessary to use the Promise constructor, or the scope of\n  the Promise constructor can be reduced. </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Fixing the issue requires removing the <code>async</code> keyword from the Promise executor function and adapting the body of the executor\naccordingly.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nconst p = new Promise(async (resolve, reject) =&gt; {\n  doSomething('Hey, there!', function(err, res) {\n    if (err) {\n      reject(err);\n      return;\n    }\n    await saveResult(res)\n    resolve(res);\n  });\n});\nawait p;\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nconst p = new Promise(async (resolve, reject) =&gt; {\n  doSomething('Hey, there!', function(err, res) {\n    if (err) {\n      reject(err);\n      return;\n    }\n    resolve(res);\n  });\n});\nconst res = await p;\nawait saveResult(res);\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"">MDN Promise</a> </li>\n  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises"">MDN Using promises</a> </li>\n  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function"">MDN Async function</a> </li>\n</ul>",MAJOR,READY,false,,"async,promise",js,JavaScript,[],BUG,false,ALL,false,"[{""key"":""how_to_fix"",""content"":""<p>Fixing the issue requires removing the <code>async</code> keyword from the Promise executor function and adapting the body of the executor\naccordingly.</p>\n\n<h4>Noncompliant code example</h4>\n<pre>\nconst p = new Promise(async (resolve, reject) =&gt; {\n  doSomething('Hey, there!', function(err, res) {\n    if (err) {\n      reject(err);\n      return;\n    }\n    await saveResult(res)\n    resolve(res);\n  });\n});\n\nawait p;\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nconst p = new Promise(async (resolve, reject) =&gt; {\n  doSomething('Hey, there!', function(err, res) {\n    if (err) {\n      reject(err);\n      return;\n    }\n    resolve(res);\n  });\n});\n\nconst res = await p;\nawait saveResult(res);\n</pre>""},{""key"":""introduction"",""content"":""<p>In JavaScript, a promise is a mechanism to perform tasks in an asynchronous way. To this end, the language provides the <code>Promise</code> object\nwhich represents the eventual completion or failure of an asynchronous operation and its resulting value. A promise can be created with the\n<code>Promise</code> constructor accepting an executor function as an argument, which has <code>resolve</code> and <code>reject</code> parameters that\nare invoked when the promises completes or fails.</p>""},{""key"":""root_cause"",""content"":""<p>The executor function of a promise can also be an async function. However, this usually denotes a mistake:</p>\n<ul>\n  <li> If an async executor function throws an error, the error won’t cause the created Promise to reject and will be lost therefore. This could make\n  it difficult to debug and handle runtime errors. </li>\n  <li> If a Promise executor function is using <code>await</code>, this means that it’s not necessary to use the Promise constructor, or the scope of\n  the Promise constructor can be reduced. </li>\n</ul>""},{""key"":""resources"",""content"":""<h3>Documentation</h3>\n<ul>\n  <li> <a href=\""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"">MDN Promise</a> </li>\n  <li> <a href=\""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises\"">MDN Using promises</a> </li>\n  <li> <a href=\""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\"">MDN Async function</a> </li>\n</ul>""}]",[]
AYj9QYKHj7aSGIl2btKZ,nodejs-sonar-local,main,server/app/routes/authentication/postgres-user-pass/login-user/helpers/check-credentials.js,27,Promise executor functions should not be async.,OPEN,joshua.quek.fullstack@gmail.com,2022-12-19T02:16:04+0000,2023-07-14T02:37:01+0000,javascript:S6544,[object Object],BUG,MAJOR,5,"async,promise",,,javascript:S6544,javascript,Promise executor functions should not be async,2023-04-24T05:12:44+0000,"<p>In JavaScript, a promise is a mechanism to perform tasks in an asynchronous way. To this end, the language provides the <code>Promise</code> object\nwhich represents the eventual completion or failure of an asynchronous operation and its resulting value. A promise can be created with the\n<code>Promise</code> constructor accepting an executor function as an argument, which has <code>resolve</code> and <code>reject</code> parameters that\nare invoked when the promises completes or fails.</p>\n<h2>Why is this an issue?</h2>\n<p>The executor function of a promise can also be an async function. However, this usually denotes a mistake:</p>\n<ul>\n  <li> If an async executor function throws an error, the error won’t cause the created Promise to reject and will be lost therefore. This could make\n  it difficult to debug and handle runtime errors. </li>\n  <li> If a Promise executor function is using <code>await</code>, this means that it’s not necessary to use the Promise constructor, or the scope of\n  the Promise constructor can be reduced. </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Fixing the issue requires removing the <code>async</code> keyword from the Promise executor function and adapting the body of the executor\naccordingly.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nconst p = new Promise(async (resolve, reject) =&gt; {\n  doSomething('Hey, there!', function(err, res) {\n    if (err) {\n      reject(err);\n      return;\n    }\n    await saveResult(res)\n    resolve(res);\n  });\n});\nawait p;\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nconst p = new Promise(async (resolve, reject) =&gt; {\n  doSomething('Hey, there!', function(err, res) {\n    if (err) {\n      reject(err);\n      return;\n    }\n    resolve(res);\n  });\n});\nconst res = await p;\nawait saveResult(res);\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"">MDN Promise</a> </li>\n  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises"">MDN Using promises</a> </li>\n  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function"">MDN Async function</a> </li>\n</ul>","<p>In JavaScript, a promise is a mechanism to perform tasks in an asynchronous way. To this end, the language provides the <code>Promise</code> object\nwhich represents the eventual completion or failure of an asynchronous operation and its resulting value. A promise can be created with the\n<code>Promise</code> constructor accepting an executor function as an argument, which has <code>resolve</code> and <code>reject</code> parameters that\nare invoked when the promises completes or fails.</p>\n<h2>Why is this an issue?</h2>\n<p>The executor function of a promise can also be an async function. However, this usually denotes a mistake:</p>\n<ul>\n  <li> If an async executor function throws an error, the error won’t cause the created Promise to reject and will be lost therefore. This could make\n  it difficult to debug and handle runtime errors. </li>\n  <li> If a Promise executor function is using <code>await</code>, this means that it’s not necessary to use the Promise constructor, or the scope of\n  the Promise constructor can be reduced. </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Fixing the issue requires removing the <code>async</code> keyword from the Promise executor function and adapting the body of the executor\naccordingly.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nconst p = new Promise(async (resolve, reject) =&gt; {\n  doSomething('Hey, there!', function(err, res) {\n    if (err) {\n      reject(err);\n      return;\n    }\n    await saveResult(res)\n    resolve(res);\n  });\n});\nawait p;\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nconst p = new Promise(async (resolve, reject) =&gt; {\n  doSomething('Hey, there!', function(err, res) {\n    if (err) {\n      reject(err);\n      return;\n    }\n    resolve(res);\n  });\n});\nconst res = await p;\nawait saveResult(res);\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"">MDN Promise</a> </li>\n  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises"">MDN Using promises</a> </li>\n  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function"">MDN Async function</a> </li>\n</ul>",MAJOR,READY,false,,"async,promise",js,JavaScript,[],BUG,false,ALL,false,"[{""key"":""how_to_fix"",""content"":""<p>Fixing the issue requires removing the <code>async</code> keyword from the Promise executor function and adapting the body of the executor\naccordingly.</p>\n\n<h4>Noncompliant code example</h4>\n<pre>\nconst p = new Promise(async (resolve, reject) =&gt; {\n  doSomething('Hey, there!', function(err, res) {\n    if (err) {\n      reject(err);\n      return;\n    }\n    await saveResult(res)\n    resolve(res);\n  });\n});\n\nawait p;\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nconst p = new Promise(async (resolve, reject) =&gt; {\n  doSomething('Hey, there!', function(err, res) {\n    if (err) {\n      reject(err);\n      return;\n    }\n    resolve(res);\n  });\n});\n\nconst res = await p;\nawait saveResult(res);\n</pre>""},{""key"":""introduction"",""content"":""<p>In JavaScript, a promise is a mechanism to perform tasks in an asynchronous way. To this end, the language provides the <code>Promise</code> object\nwhich represents the eventual completion or failure of an asynchronous operation and its resulting value. A promise can be created with the\n<code>Promise</code> constructor accepting an executor function as an argument, which has <code>resolve</code> and <code>reject</code> parameters that\nare invoked when the promises completes or fails.</p>""},{""key"":""root_cause"",""content"":""<p>The executor function of a promise can also be an async function. However, this usually denotes a mistake:</p>\n<ul>\n  <li> If an async executor function throws an error, the error won’t cause the created Promise to reject and will be lost therefore. This could make\n  it difficult to debug and handle runtime errors. </li>\n  <li> If a Promise executor function is using <code>await</code>, this means that it’s not necessary to use the Promise constructor, or the scope of\n  the Promise constructor can be reduced. </li>\n</ul>""},{""key"":""resources"",""content"":""<h3>Documentation</h3>\n<ul>\n  <li> <a href=\""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"">MDN Promise</a> </li>\n  <li> <a href=\""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises\"">MDN Using promises</a> </li>\n  <li> <a href=\""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\"">MDN Async function</a> </li>\n</ul>""}]",[]
AYj9QYJ9j7aSGIl2btKX,nodejs-sonar-local,main,server/app/routes/authentication/postgres-user-pass/login-user/helpers/issue-jwt-token.js,5,Promise executor functions should not be async.,OPEN,joshua.quek.fullstack@gmail.com,2022-12-19T02:16:04+0000,2023-07-14T02:37:07+0000,javascript:S6544,[object Object],BUG,MAJOR,5,"async,promise",,,javascript:S6544,javascript,Promise executor functions should not be async,2023-04-24T05:12:44+0000,"<p>In JavaScript, a promise is a mechanism to perform tasks in an asynchronous way. To this end, the language provides the <code>Promise</code> object\nwhich represents the eventual completion or failure of an asynchronous operation and its resulting value. A promise can be created with the\n<code>Promise</code> constructor accepting an executor function as an argument, which has <code>resolve</code> and <code>reject</code> parameters that\nare invoked when the promises completes or fails.</p>\n<h2>Why is this an issue?</h2>\n<p>The executor function of a promise can also be an async function. However, this usually denotes a mistake:</p>\n<ul>\n  <li> If an async executor function throws an error, the error won’t cause the created Promise to reject and will be lost therefore. This could make\n  it difficult to debug and handle runtime errors. </li>\n  <li> If a Promise executor function is using <code>await</code>, this means that it’s not necessary to use the Promise constructor, or the scope of\n  the Promise constructor can be reduced. </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Fixing the issue requires removing the <code>async</code> keyword from the Promise executor function and adapting the body of the executor\naccordingly.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nconst p = new Promise(async (resolve, reject) =&gt; {\n  doSomething('Hey, there!', function(err, res) {\n    if (err) {\n      reject(err);\n      return;\n    }\n    await saveResult(res)\n    resolve(res);\n  });\n});\nawait p;\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nconst p = new Promise(async (resolve, reject) =&gt; {\n  doSomething('Hey, there!', function(err, res) {\n    if (err) {\n      reject(err);\n      return;\n    }\n    resolve(res);\n  });\n});\nconst res = await p;\nawait saveResult(res);\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"">MDN Promise</a> </li>\n  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises"">MDN Using promises</a> </li>\n  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function"">MDN Async function</a> </li>\n</ul>","<p>In JavaScript, a promise is a mechanism to perform tasks in an asynchronous way. To this end, the language provides the <code>Promise</code> object\nwhich represents the eventual completion or failure of an asynchronous operation and its resulting value. A promise can be created with the\n<code>Promise</code> constructor accepting an executor function as an argument, which has <code>resolve</code> and <code>reject</code> parameters that\nare invoked when the promises completes or fails.</p>\n<h2>Why is this an issue?</h2>\n<p>The executor function of a promise can also be an async function. However, this usually denotes a mistake:</p>\n<ul>\n  <li> If an async executor function throws an error, the error won’t cause the created Promise to reject and will be lost therefore. This could make\n  it difficult to debug and handle runtime errors. </li>\n  <li> If a Promise executor function is using <code>await</code>, this means that it’s not necessary to use the Promise constructor, or the scope of\n  the Promise constructor can be reduced. </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Fixing the issue requires removing the <code>async</code> keyword from the Promise executor function and adapting the body of the executor\naccordingly.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nconst p = new Promise(async (resolve, reject) =&gt; {\n  doSomething('Hey, there!', function(err, res) {\n    if (err) {\n      reject(err);\n      return;\n    }\n    await saveResult(res)\n    resolve(res);\n  });\n});\nawait p;\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nconst p = new Promise(async (resolve, reject) =&gt; {\n  doSomething('Hey, there!', function(err, res) {\n    if (err) {\n      reject(err);\n      return;\n    }\n    resolve(res);\n  });\n});\nconst res = await p;\nawait saveResult(res);\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"">MDN Promise</a> </li>\n  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises"">MDN Using promises</a> </li>\n  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function"">MDN Async function</a> </li>\n</ul>",MAJOR,READY,false,,"async,promise",js,JavaScript,[],BUG,false,ALL,false,"[{""key"":""how_to_fix"",""content"":""<p>Fixing the issue requires removing the <code>async</code> keyword from the Promise executor function and adapting the body of the executor\naccordingly.</p>\n\n<h4>Noncompliant code example</h4>\n<pre>\nconst p = new Promise(async (resolve, reject) =&gt; {\n  doSomething('Hey, there!', function(err, res) {\n    if (err) {\n      reject(err);\n      return;\n    }\n    await saveResult(res)\n    resolve(res);\n  });\n});\n\nawait p;\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nconst p = new Promise(async (resolve, reject) =&gt; {\n  doSomething('Hey, there!', function(err, res) {\n    if (err) {\n      reject(err);\n      return;\n    }\n    resolve(res);\n  });\n});\n\nconst res = await p;\nawait saveResult(res);\n</pre>""},{""key"":""introduction"",""content"":""<p>In JavaScript, a promise is a mechanism to perform tasks in an asynchronous way. To this end, the language provides the <code>Promise</code> object\nwhich represents the eventual completion or failure of an asynchronous operation and its resulting value. A promise can be created with the\n<code>Promise</code> constructor accepting an executor function as an argument, which has <code>resolve</code> and <code>reject</code> parameters that\nare invoked when the promises completes or fails.</p>""},{""key"":""root_cause"",""content"":""<p>The executor function of a promise can also be an async function. However, this usually denotes a mistake:</p>\n<ul>\n  <li> If an async executor function throws an error, the error won’t cause the created Promise to reject and will be lost therefore. This could make\n  it difficult to debug and handle runtime errors. </li>\n  <li> If a Promise executor function is using <code>await</code>, this means that it’s not necessary to use the Promise constructor, or the scope of\n  the Promise constructor can be reduced. </li>\n</ul>""},{""key"":""resources"",""content"":""<h3>Documentation</h3>\n<ul>\n  <li> <a href=\""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"">MDN Promise</a> </li>\n  <li> <a href=\""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises\"">MDN Using promises</a> </li>\n  <li> <a href=\""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\"">MDN Async function</a> </li>\n</ul>""}]",[]
AYj9QYJ1j7aSGIl2btKW,nodejs-sonar-local,main,server/app/routes/authentication/postgres-user-pass/register-user/validator.js,33,Use concise character class syntax '\d' instead of '[0-9]'.,OPEN,joshua.quek.fullstack@gmail.com,2022-12-19T02:16:04+0000,2023-07-14T02:37:38+0000,javascript:S6353,[object Object],CODE_SMELL,MINOR,5,regex,,,javascript:S6353,javascript,Regular expression quantifiers and character classes should be used concisely,2023-02-21T15:21:21+0000,"<p>With regular expressions syntax, it’s possible to express the same thing in many ways. For example, to match a two-digit number, one could write\n<code>[0-9]{2,2}</code> or <code>\d{2}</code>. Latter is not only shorter in terms of expression length, but also easier to read and thus to maintain.\nThis rule recommends to replace some bulky quantifiers and character classes with more concise equivalents:</p>\n<ul>\n  <li> <code>\d</code> for <code>[0-9]</code> and <code>\D</code> for <code>[^0-9]</code> </li>\n  <li> <code>\w</code> for <code>[A-Za-z0-9_]</code> and <code>\W</code> for <code>[^A-Za-z0-9_]</code> </li>\n  <li> <code>.</code> for character classes matching everything (e.g. <code>[\w\W]</code>, <code>[\d\D]</code>, or <code>[\s\S]</code> with\n  <code>s</code> flag) </li>\n  <li> <code>x?</code> for <code>x{0,1}</code>, <code>x*</code> for <code>x{0,}</code>, <code>x+</code> for <code>x{1,}</code>, <code>x{N}</code> for\n  <code>x{N,N}</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/a{1,}/; // Noncompliant, '{1,}' quantifier is the same as '+'\n/[A-Za-z0-9_]/; // Noncompliant, '\w' is equivalent\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/a+/;\n/\w/;\n</pre>","<p>With regular expressions syntax, it’s possible to express the same thing in many ways. For example, to match a two-digit number, one could write\n<code>[0-9]{2,2}</code> or <code>\d{2}</code>. Latter is not only shorter in terms of expression length, but also easier to read and thus to maintain.\nThis rule recommends to replace some bulky quantifiers and character classes with more concise equivalents:</p>\n<ul>\n  <li> <code>\d</code> for <code>[0-9]</code> and <code>\D</code> for <code>[^0-9]</code> </li>\n  <li> <code>\w</code> for <code>[A-Za-z0-9_]</code> and <code>\W</code> for <code>[^A-Za-z0-9_]</code> </li>\n  <li> <code>.</code> for character classes matching everything (e.g. <code>[\w\W]</code>, <code>[\d\D]</code>, or <code>[\s\S]</code> with\n  <code>s</code> flag) </li>\n  <li> <code>x?</code> for <code>x{0,1}</code>, <code>x*</code> for <code>x{0,}</code>, <code>x+</code> for <code>x{1,}</code>, <code>x{N}</code> for\n  <code>x{N,N}</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/a{1,}/; // Noncompliant, '{1,}' quantifier is the same as '+'\n/[A-Za-z0-9_]/; // Noncompliant, '\w' is equivalent\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/a+/;\n/\w/;\n</pre>",MINOR,READY,false,,regex,js,JavaScript,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>With regular expressions syntax, it’s possible to express the same thing in many ways. For example, to match a two-digit number, one could write\n<code>[0-9]{2,2}</code> or <code>\\d{2}</code>. Latter is not only shorter in terms of expression length, but also easier to read and thus to maintain.\nThis rule recommends to replace some bulky quantifiers and character classes with more concise equivalents:</p>\n<ul>\n  <li> <code>\\d</code> for <code>[0-9]</code> and <code>\\D</code> for <code>[^0-9]</code> </li>\n  <li> <code>\\w</code> for <code>[A-Za-z0-9_]</code> and <code>\\W</code> for <code>[^A-Za-z0-9_]</code> </li>\n  <li> <code>.</code> for character classes matching everything (e.g. <code>[\\w\\W]</code>, <code>[\\d\\D]</code>, or <code>[\\s\\S]</code> with\n  <code>s</code> flag) </li>\n  <li> <code>x?</code> for <code>x{0,1}</code>, <code>x*</code> for <code>x{0,}</code>, <code>x+</code> for <code>x{1,}</code>, <code>x{N}</code> for\n  <code>x{N,N}</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/a{1,}/; // Noncompliant, '{1,}' quantifier is the same as '+'\n/[A-Za-z0-9_]/; // Noncompliant, '\\w' is equivalent\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/a+/;\n/\\w/;\n</pre>""}]",[]
AYj9QYLdj7aSGIl2btKe,nodejs-sonar-local,main,server/libs/utils/passport-util/user-object.js,7,Review this potentially hardcoded credential.,TO_REVIEW,joshua.quek.fullstack@gmail.com,2022-12-19T02:16:04+0000,2023-06-27T14:25:34+0000,javascript:S2068,,SECURITY_HOTSPOT,,,,auth,HIGH,javascript:S2068,javascript,Hard-coded credentials are security-sensitive,2023-02-21T15:21:22+0000,"<p>Because it is easy to extract strings from an application source code or binary, credentials should not be hard-coded. This is particularly true\nfor applications that are distributed or that are open-source.</p>\n<p>In the past, it has led to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13466"">CVE-2019-13466</a> </li>\n  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-15389"">CVE-2018-15389</a> </li>\n</ul>\n<p>Credentials should be stored outside of the code in a configuration file, a database, or a management service for secrets.</p>\n<p>This rule flags instances of hard-coded credentials used in database and LDAP connections. It looks for hard-coded credentials in connection\nstrings, and for variable names that match any of the patterns from the provided list.</p>\n<p>It’s recommended to customize the configuration of this rule with additional credential words such as ""oauthToken"", ""secret"", …​</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Credentials allow access to a sensitive component like a database, a file storage, an API or a service. </li>\n  <li> Credentials are used in production environments. </li>\n  <li> Application re-distribution is required before updating the credentials. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Store the credentials in a configuration file that is not pushed to the code repository. </li>\n  <li> Store the credentials in a database. </li>\n  <li> Use your cloud provider’s service for managing secrets. </li>\n  <li> If a password has been disclosed through the source code: change it. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nvar mysql = require('mysql');\nvar connection = mysql.createConnection(\n{\n  host:'localhost',\n  user: ""admin"",\n  database: ""project"",\n  password: ""mypassword"", // sensitive\n  multipleStatements: true\n});\nconnection.connect();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar mysql = require('mysql');\nvar connection = mysql.createConnection({\n  host: process.env.MYSQL_URL,\n  user: process.env.MYSQL_USERNAME,\n  password: process.env.MYSQL_PASSWORD,\n  database: process.env.MYSQL_DATABASE\n});\nconnection.connect();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/"">OWASP Top 10 2021 Category A7</a> - Identification and\n  Authentication Failures </li>\n  <li> <a href=""https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication"">OWASP Top 10 2017 Category A2</a> - Broken Authentication\n  </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/798"">MITRE, CWE-798</a> - Use of Hard-coded Credentials </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/259"">MITRE, CWE-259</a> - Use of Hard-coded Password </li>\n  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>\n  <li> Derived from FindSecBugs rule <a href=""https://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD"">Hard Coded Password</a> </li>\n</ul>","<p>Because it is easy to extract strings from an application source code or binary, credentials should not be hard-coded. This is particularly true\nfor applications that are distributed or that are open-source.</p>\n<p>In the past, it has led to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13466"">CVE-2019-13466</a> </li>\n  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-15389"">CVE-2018-15389</a> </li>\n</ul>\n<p>Credentials should be stored outside of the code in a configuration file, a database, or a management service for secrets.</p>\n<p>This rule flags instances of hard-coded credentials used in database and LDAP connections. It looks for hard-coded credentials in connection\nstrings, and for variable names that match any of the patterns from the provided list.</p>\n<p>It’s recommended to customize the configuration of this rule with additional credential words such as ""oauthToken"", ""secret"", …​</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Credentials allow access to a sensitive component like a database, a file storage, an API or a service. </li>\n  <li> Credentials are used in production environments. </li>\n  <li> Application re-distribution is required before updating the credentials. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Store the credentials in a configuration file that is not pushed to the code repository. </li>\n  <li> Store the credentials in a database. </li>\n  <li> Use your cloud provider’s service for managing secrets. </li>\n  <li> If a password has been disclosed through the source code: change it. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nvar mysql = require('mysql');\nvar connection = mysql.createConnection(\n{\n  host:'localhost',\n  user: ""admin"",\n  database: ""project"",\n  password: ""mypassword"", // sensitive\n  multipleStatements: true\n});\nconnection.connect();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar mysql = require('mysql');\nvar connection = mysql.createConnection({\n  host: process.env.MYSQL_URL,\n  user: process.env.MYSQL_USERNAME,\n  password: process.env.MYSQL_PASSWORD,\n  database: process.env.MYSQL_DATABASE\n});\nconnection.connect();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/"">OWASP Top 10 2021 Category A7</a> - Identification and\n  Authentication Failures </li>\n  <li> <a href=""https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication"">OWASP Top 10 2017 Category A2</a> - Broken Authentication\n  </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/798"">MITRE, CWE-798</a> - Use of Hard-coded Credentials </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/259"">MITRE, CWE-259</a> - Use of Hard-coded Password </li>\n  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>\n  <li> Derived from FindSecBugs rule <a href=""https://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD"">Hard Coded Password</a> </li>\n</ul>",BLOCKER,READY,false,,"cwe,sans-top25-porous",js,JavaScript,"[{""key"":""credentialWords"",""htmlDesc"":""Comma separated list of words identifying potential credentials."",""defaultValue"":""password, pwd, passwd"",""type"":""STRING""}]",SECURITY_HOTSPOT,false,MAIN,false,"[{""key"":""how_to_fix"",""content"":""<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Store the credentials in a configuration file that is not pushed to the code repository. </li>\n  <li> Store the credentials in a database. </li>\n  <li> Use your cloud provider’s service for managing secrets. </li>\n  <li> If a password has been disclosed through the source code: change it. </li>\n</ul>\n<h2>Compliant Solution</h2>\n<pre>\nvar mysql = require('mysql');\n\nvar connection = mysql.createConnection({\n  host: process.env.MYSQL_URL,\n  user: process.env.MYSQL_USERNAME,\n  password: process.env.MYSQL_PASSWORD,\n  database: process.env.MYSQL_DATABASE\n});\nconnection.connect();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\""https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"">OWASP Top 10 2021 Category A7</a> - Identification and\n  Authentication Failures </li>\n  <li> <a href=\""https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication\"">OWASP Top 10 2017 Category A2</a> - Broken Authentication\n  </li>\n  <li> <a href=\""https://cwe.mitre.org/data/definitions/798\"">MITRE, CWE-798</a> - Use of Hard-coded Credentials </li>\n  <li> <a href=\""https://cwe.mitre.org/data/definitions/259\"">MITRE, CWE-259</a> - Use of Hard-coded Password </li>\n  <li> <a href=\""https://www.sans.org/top25-software-errors/#cat3\"">SANS Top 25</a> - Porous Defenses </li>\n  <li> Derived from FindSecBugs rule <a href=\""https://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD\"">Hard Coded Password</a> </li>\n</ul>""},{""key"":""root_cause"",""content"":""<p>Because it is easy to extract strings from an application source code or binary, credentials should not be hard-coded. This is particularly true\nfor applications that are distributed or that are open-source.</p>\n<p>In the past, it has led to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13466\"">CVE-2019-13466</a> </li>\n  <li> <a href=\""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-15389\"">CVE-2018-15389</a> </li>\n</ul>\n<p>Credentials should be stored outside of the code in a configuration file, a database, or a management service for secrets.</p>\n<p>This rule flags instances of hard-coded credentials used in database and LDAP connections. It looks for hard-coded credentials in connection\nstrings, and for variable names that match any of the patterns from the provided list.</p>\n<p>It’s recommended to customize the configuration of this rule with additional credential words such as \""oauthToken\"", \""secret\"", …​</p>\n""},{""key"":""assess_the_problem"",""content"":""<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Credentials allow access to a sensitive component like a database, a file storage, an API or a service. </li>\n  <li> Credentials are used in production environments. </li>\n  <li> Application re-distribution is required before updating the credentials. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nvar mysql = require('mysql');\n\nvar connection = mysql.createConnection(\n{\n  host:'localhost',\n  user: \""admin\"",\n  database: \""project\"",\n  password: \""mypassword\"", // sensitive\n  multipleStatements: true\n});\n\nconnection.connect();\n</pre>\n""}]",[]
AYj9QYLsj7aSGIl2btKf,nodejs-sonar-local,main,server/libs/services/express-service/index.js,18,Make sure that enabling CORS is safe here.,TO_REVIEW,joshua.quek.fullstack@gmail.com,2022-12-19T02:16:04+0000,2023-06-27T14:25:34+0000,javascript:S5122,,SECURITY_HOTSPOT,,,,insecure-conf,LOW,javascript:S5122,javascript,Having a permissive Cross-Origin Resource Sharing policy is security-sensitive,2023-02-21T15:21:21+0000,"<p>Having a permissive Cross-Origin Resource Sharing policy is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0269"">CVE-2018-0269</a> </li>\n  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14460"">CVE-2017-14460</a> </li>\n</ul>\n<p><a href=""https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy"">Same origin policy</a> in browsers prevents, by default and for\nsecurity-reasons, a javascript frontend to perform a cross-origin HTTP request to a resource that has a different origin (domain, protocol, or port)\nfrom its own. The requested target can append additional HTTP headers in response, called <a\nhref=""https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"">CORS</a>, that act like directives for the browser and change the access control policy\n/ relax the same origin policy.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> You don’t trust the origin specified, example: <code>Access-Control-Allow-Origin: untrustedwebsite.com</code>. </li>\n  <li> Access control policy is entirely disabled: <code>Access-Control-Allow-Origin: *</code> </li>\n  <li> Your access control policy is dynamically defined by a user-controlled input like <a\n  href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin""><code>origin</code></a> header. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> The <code>Access-Control-Allow-Origin</code> header should be set only for a trusted origin and for specific resources. </li>\n  <li> Allow only selected, trusted domains in the <code>Access-Control-Allow-Origin</code> header. Prefer whitelisting domains over blacklisting or\n  allowing any domain (do not use * wildcard nor blindly return the <code>Origin</code> header content without any checks). </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p><a href=""https://nodejs.org/api/http.html"">nodejs http</a> built-in module:</p>\n<pre>\nconst http = require('http');\nconst srv = http.createServer((req, res) =&gt; {\n  res.writeHead(200, { 'Access-Control-Allow-Origin': '*' }); // Sensitive\n  res.end('ok');\n});\nsrv.listen(3000);\n</pre>\n<p><a href=""https://www.npmjs.com/package/express"">Express.js</a> framework with <a href=""https://www.npmjs.com/package/cors"">cors middleware</a>:</p>\n<pre>\nconst cors = require('cors');\nlet app1 = express();\napp1.use(cors()); // Sensitive: by default origin is set to *\nlet corsOptions = {\n  origin: '*' // Sensitive\n};\nlet app2 = express();\napp2.use(cors(corsOptions));\n</pre>\n<p>User-controlled origin:</p>\n<pre>\nfunction (req, res) {\n  const origin = req.header('Origin');\n  res.setHeader('Access-Control-Allow-Origin', origin); // Sensitive\n};\n</pre>\n<h2>Compliant Solution</h2>\n<p><a href=""https://nodejs.org/api/http.html"">nodejs http</a> built-in module:</p>\n<pre>\nconst http = require('http');\nconst srv = http.createServer((req, res) =&gt; {\n  res.writeHead(200, { 'Access-Control-Allow-Origin': 'trustedwebsite.com' }); // Compliant\n  res.end('ok');\n});\nsrv.listen(3000);\n</pre>\n<p><a href=""https://www.npmjs.com/package/express"">Express.js</a> framework with <a href=""https://www.npmjs.com/package/cors"">cors middleware</a>:</p>\n<pre>\nconst cors = require('cors');\nlet corsOptions = {\n  origin: 'trustedwebsite.com' // Compliant\n};\nlet app = express();\napp.use(cors(corsOptions));\n</pre>\n<p>User-controlled origin validated with an allow-list:</p>\n<pre>\nfunction (req, res) {\n  const origin = req.header('Origin');\n  if (trustedOrigins.indexOf(origin) &gt;= 0) {\n    res.setHeader('Access-Control-Allow-Origin', origin);\n  }\n};\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://owasp.org/Top10/A05_2021-Security_Misconfiguration/"">OWASP Top 10 2021 Category A5</a> - Security Misconfiguration </li>\n  <li> <a href=""https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/"">OWASP Top 10 2021 Category A7</a> - Identification and\n  Authentication Failures </li>\n  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"">developer.mozilla.org</a> - CORS </li>\n  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy"">developer.mozilla.org</a> - Same origin policy </li>\n  <li> <a href=""https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration"">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=""https://cheatsheetseries.owasp.org/cheatsheets/HTML5_Security_Cheat_Sheet.html#cross-origin-resource-sharing"">OWASP HTML5 Security\n  Cheat Sheet</a> - Cross Origin Resource Sharing </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/346"">MITRE, CWE-346</a> - Origin Validation Error </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/942"">MITRE, CWE-942</a> - Overly Permissive Cross-domain Whitelist </li>\n  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>\n</ul>","<p>Having a permissive Cross-Origin Resource Sharing policy is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0269"">CVE-2018-0269</a> </li>\n  <li> <a href=""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14460"">CVE-2017-14460</a> </li>\n</ul>\n<p><a href=""https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy"">Same origin policy</a> in browsers prevents, by default and for\nsecurity-reasons, a javascript frontend to perform a cross-origin HTTP request to a resource that has a different origin (domain, protocol, or port)\nfrom its own. The requested target can append additional HTTP headers in response, called <a\nhref=""https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"">CORS</a>, that act like directives for the browser and change the access control policy\n/ relax the same origin policy.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> You don’t trust the origin specified, example: <code>Access-Control-Allow-Origin: untrustedwebsite.com</code>. </li>\n  <li> Access control policy is entirely disabled: <code>Access-Control-Allow-Origin: *</code> </li>\n  <li> Your access control policy is dynamically defined by a user-controlled input like <a\n  href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin""><code>origin</code></a> header. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> The <code>Access-Control-Allow-Origin</code> header should be set only for a trusted origin and for specific resources. </li>\n  <li> Allow only selected, trusted domains in the <code>Access-Control-Allow-Origin</code> header. Prefer whitelisting domains over blacklisting or\n  allowing any domain (do not use * wildcard nor blindly return the <code>Origin</code> header content without any checks). </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p><a href=""https://nodejs.org/api/http.html"">nodejs http</a> built-in module:</p>\n<pre>\nconst http = require('http');\nconst srv = http.createServer((req, res) =&gt; {\n  res.writeHead(200, { 'Access-Control-Allow-Origin': '*' }); // Sensitive\n  res.end('ok');\n});\nsrv.listen(3000);\n</pre>\n<p><a href=""https://www.npmjs.com/package/express"">Express.js</a> framework with <a href=""https://www.npmjs.com/package/cors"">cors middleware</a>:</p>\n<pre>\nconst cors = require('cors');\nlet app1 = express();\napp1.use(cors()); // Sensitive: by default origin is set to *\nlet corsOptions = {\n  origin: '*' // Sensitive\n};\nlet app2 = express();\napp2.use(cors(corsOptions));\n</pre>\n<p>User-controlled origin:</p>\n<pre>\nfunction (req, res) {\n  const origin = req.header('Origin');\n  res.setHeader('Access-Control-Allow-Origin', origin); // Sensitive\n};\n</pre>\n<h2>Compliant Solution</h2>\n<p><a href=""https://nodejs.org/api/http.html"">nodejs http</a> built-in module:</p>\n<pre>\nconst http = require('http');\nconst srv = http.createServer((req, res) =&gt; {\n  res.writeHead(200, { 'Access-Control-Allow-Origin': 'trustedwebsite.com' }); // Compliant\n  res.end('ok');\n});\nsrv.listen(3000);\n</pre>\n<p><a href=""https://www.npmjs.com/package/express"">Express.js</a> framework with <a href=""https://www.npmjs.com/package/cors"">cors middleware</a>:</p>\n<pre>\nconst cors = require('cors');\nlet corsOptions = {\n  origin: 'trustedwebsite.com' // Compliant\n};\nlet app = express();\napp.use(cors(corsOptions));\n</pre>\n<p>User-controlled origin validated with an allow-list:</p>\n<pre>\nfunction (req, res) {\n  const origin = req.header('Origin');\n  if (trustedOrigins.indexOf(origin) &gt;= 0) {\n    res.setHeader('Access-Control-Allow-Origin', origin);\n  }\n};\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://owasp.org/Top10/A05_2021-Security_Misconfiguration/"">OWASP Top 10 2021 Category A5</a> - Security Misconfiguration </li>\n  <li> <a href=""https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/"">OWASP Top 10 2021 Category A7</a> - Identification and\n  Authentication Failures </li>\n  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"">developer.mozilla.org</a> - CORS </li>\n  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy"">developer.mozilla.org</a> - Same origin policy </li>\n  <li> <a href=""https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration"">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=""https://cheatsheetseries.owasp.org/cheatsheets/HTML5_Security_Cheat_Sheet.html#cross-origin-resource-sharing"">OWASP HTML5 Security\n  Cheat Sheet</a> - Cross Origin Resource Sharing </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/346"">MITRE, CWE-346</a> - Origin Validation Error </li>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/942"">MITRE, CWE-942</a> - Overly Permissive Cross-domain Whitelist </li>\n  <li> <a href=""https://www.sans.org/top25-software-errors/#cat3"">SANS Top 25</a> - Porous Defenses </li>\n</ul>",MINOR,READY,false,,"cwe,express.js,sans-top25-porous",js,JavaScript,[],SECURITY_HOTSPOT,false,MAIN,false,"[{""key"":""how_to_fix"",""content"":""<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> The <code>Access-Control-Allow-Origin</code> header should be set only for a trusted origin and for specific resources. </li>\n  <li> Allow only selected, trusted domains in the <code>Access-Control-Allow-Origin</code> header. Prefer whitelisting domains over blacklisting or\n  allowing any domain (do not use * wildcard nor blindly return the <code>Origin</code> header content without any checks). </li>\n</ul>\n<h2>Compliant Solution</h2>\n<p><a href=\""https://nodejs.org/api/http.html\"">nodejs http</a> built-in module:</p>\n<pre>\nconst http = require('http');\nconst srv = http.createServer((req, res) =&gt; {\n  res.writeHead(200, { 'Access-Control-Allow-Origin': 'trustedwebsite.com' }); // Compliant\n  res.end('ok');\n});\nsrv.listen(3000);\n</pre>\n<p><a href=\""https://www.npmjs.com/package/express\"">Express.js</a> framework with <a href=\""https://www.npmjs.com/package/cors\"">cors middleware</a>:</p>\n<pre>\nconst cors = require('cors');\n\nlet corsOptions = {\n  origin: 'trustedwebsite.com' // Compliant\n};\n\nlet app = express();\napp.use(cors(corsOptions));\n</pre>\n<p>User-controlled origin validated with an allow-list:</p>\n<pre>\nfunction (req, res) {\n  const origin = req.header('Origin');\n\n  if (trustedOrigins.indexOf(origin) &gt;= 0) {\n    res.setHeader('Access-Control-Allow-Origin', origin);\n  }\n};\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\""https://owasp.org/Top10/A05_2021-Security_Misconfiguration/\"">OWASP Top 10 2021 Category A5</a> - Security Misconfiguration </li>\n  <li> <a href=\""https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/\"">OWASP Top 10 2021 Category A7</a> - Identification and\n  Authentication Failures </li>\n  <li> <a href=\""https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\"">developer.mozilla.org</a> - CORS </li>\n  <li> <a href=\""https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\"">developer.mozilla.org</a> - Same origin policy </li>\n  <li> <a href=\""https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration\"">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\""https://cheatsheetseries.owasp.org/cheatsheets/HTML5_Security_Cheat_Sheet.html#cross-origin-resource-sharing\"">OWASP HTML5 Security\n  Cheat Sheet</a> - Cross Origin Resource Sharing </li>\n  <li> <a href=\""https://cwe.mitre.org/data/definitions/346\"">MITRE, CWE-346</a> - Origin Validation Error </li>\n  <li> <a href=\""https://cwe.mitre.org/data/definitions/942\"">MITRE, CWE-942</a> - Overly Permissive Cross-domain Whitelist </li>\n  <li> <a href=\""https://www.sans.org/top25-software-errors/#cat3\"">SANS Top 25</a> - Porous Defenses </li>\n</ul>""},{""key"":""root_cause"",""content"":""<p>Having a permissive Cross-Origin Resource Sharing policy is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0269\"">CVE-2018-0269</a> </li>\n  <li> <a href=\""http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14460\"">CVE-2017-14460</a> </li>\n</ul>\n<p><a href=\""https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy\"">Same origin policy</a> in browsers prevents, by default and for\nsecurity-reasons, a javascript frontend to perform a cross-origin HTTP request to a resource that has a different origin (domain, protocol, or port)\nfrom its own. The requested target can append additional HTTP headers in response, called <a\nhref=\""https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\"">CORS</a>, that act like directives for the browser and change the access control policy\n/ relax the same origin policy.</p>\n""},{""key"":""assess_the_problem"",""content"":""<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> You don’t trust the origin specified, example: <code>Access-Control-Allow-Origin: untrustedwebsite.com</code>. </li>\n  <li> Access control policy is entirely disabled: <code>Access-Control-Allow-Origin: *</code> </li>\n  <li> Your access control policy is dynamically defined by a user-controlled input like <a\n  href=\""https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin\""><code>origin</code></a> header. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Sensitive Code Example</h2>\n<p><a href=\""https://nodejs.org/api/http.html\"">nodejs http</a> built-in module:</p>\n<pre>\nconst http = require('http');\nconst srv = http.createServer((req, res) =&gt; {\n  res.writeHead(200, { 'Access-Control-Allow-Origin': '*' }); // Sensitive\n  res.end('ok');\n});\nsrv.listen(3000);\n</pre>\n<p><a href=\""https://www.npmjs.com/package/express\"">Express.js</a> framework with <a href=\""https://www.npmjs.com/package/cors\"">cors middleware</a>:</p>\n<pre>\nconst cors = require('cors');\n\nlet app1 = express();\napp1.use(cors()); // Sensitive: by default origin is set to *\n\nlet corsOptions = {\n  origin: '*' // Sensitive\n};\n\nlet app2 = express();\napp2.use(cors(corsOptions));\n</pre>\n<p>User-controlled origin:</p>\n<pre>\nfunction (req, res) {\n  const origin = req.header('Origin');\n  res.setHeader('Access-Control-Allow-Origin', origin); // Sensitive\n};\n</pre>\n""}]",[]
AYj9QYLGj7aSGIl2btKb,nodejs-sonar-local,main,server/libs/utils/response-util/index.js,10,Refactor this function to reduce its Cognitive Complexity from 16 to the 15 allowed.,OPEN,joshua.quek.fullstack@gmail.com,2022-12-19T02:16:04+0000,2023-07-14T02:37:51+0000,javascript:S3776,[object Object],CODE_SMELL,CRITICAL,6,brain-overload,,,javascript:S3776,javascript,Cognitive Complexity of functions should not be too high,2023-02-21T15:21:22+0000,"<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be\ndifficult to maintain.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://www.sonarsource.com/docs/CognitiveComplexity.pdf"">Cognitive Complexity</a> </li>\n</ul>","<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be\ndifficult to maintain.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://www.sonarsource.com/docs/CognitiveComplexity.pdf"">Cognitive Complexity</a> </li>\n</ul>",CRITICAL,READY,false,,brain-overload,js,JavaScript,"[{""key"":""threshold"",""htmlDesc"":""The maximum authorized complexity."",""defaultValue"":""15"",""type"":""INTEGER""}]",CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be\ndifficult to maintain.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\""https://www.sonarsource.com/docs/CognitiveComplexity.pdf\"">Cognitive Complexity</a> </li>\n</ul>""}]",[]
AYj9QYKPj7aSGIl2btKa,nodejs-sonar-local,main,server/app/routes/authentication/postgres-user-pass/login-user/validator.js,33,Use concise character class syntax '\d' instead of '[0-9]'.,OPEN,joshua.quek.fullstack@gmail.com,2022-12-19T02:16:04+0000,2023-07-14T02:37:16+0000,javascript:S6353,[object Object],CODE_SMELL,MINOR,5,regex,,,javascript:S6353,javascript,Regular expression quantifiers and character classes should be used concisely,2023-02-21T15:21:21+0000,"<p>With regular expressions syntax, it’s possible to express the same thing in many ways. For example, to match a two-digit number, one could write\n<code>[0-9]{2,2}</code> or <code>\d{2}</code>. Latter is not only shorter in terms of expression length, but also easier to read and thus to maintain.\nThis rule recommends to replace some bulky quantifiers and character classes with more concise equivalents:</p>\n<ul>\n  <li> <code>\d</code> for <code>[0-9]</code> and <code>\D</code> for <code>[^0-9]</code> </li>\n  <li> <code>\w</code> for <code>[A-Za-z0-9_]</code> and <code>\W</code> for <code>[^A-Za-z0-9_]</code> </li>\n  <li> <code>.</code> for character classes matching everything (e.g. <code>[\w\W]</code>, <code>[\d\D]</code>, or <code>[\s\S]</code> with\n  <code>s</code> flag) </li>\n  <li> <code>x?</code> for <code>x{0,1}</code>, <code>x*</code> for <code>x{0,}</code>, <code>x+</code> for <code>x{1,}</code>, <code>x{N}</code> for\n  <code>x{N,N}</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/a{1,}/; // Noncompliant, '{1,}' quantifier is the same as '+'\n/[A-Za-z0-9_]/; // Noncompliant, '\w' is equivalent\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/a+/;\n/\w/;\n</pre>","<p>With regular expressions syntax, it’s possible to express the same thing in many ways. For example, to match a two-digit number, one could write\n<code>[0-9]{2,2}</code> or <code>\d{2}</code>. Latter is not only shorter in terms of expression length, but also easier to read and thus to maintain.\nThis rule recommends to replace some bulky quantifiers and character classes with more concise equivalents:</p>\n<ul>\n  <li> <code>\d</code> for <code>[0-9]</code> and <code>\D</code> for <code>[^0-9]</code> </li>\n  <li> <code>\w</code> for <code>[A-Za-z0-9_]</code> and <code>\W</code> for <code>[^A-Za-z0-9_]</code> </li>\n  <li> <code>.</code> for character classes matching everything (e.g. <code>[\w\W]</code>, <code>[\d\D]</code>, or <code>[\s\S]</code> with\n  <code>s</code> flag) </li>\n  <li> <code>x?</code> for <code>x{0,1}</code>, <code>x*</code> for <code>x{0,}</code>, <code>x+</code> for <code>x{1,}</code>, <code>x{N}</code> for\n  <code>x{N,N}</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/a{1,}/; // Noncompliant, '{1,}' quantifier is the same as '+'\n/[A-Za-z0-9_]/; // Noncompliant, '\w' is equivalent\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/a+/;\n/\w/;\n</pre>",MINOR,READY,false,,regex,js,JavaScript,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>With regular expressions syntax, it’s possible to express the same thing in many ways. For example, to match a two-digit number, one could write\n<code>[0-9]{2,2}</code> or <code>\\d{2}</code>. Latter is not only shorter in terms of expression length, but also easier to read and thus to maintain.\nThis rule recommends to replace some bulky quantifiers and character classes with more concise equivalents:</p>\n<ul>\n  <li> <code>\\d</code> for <code>[0-9]</code> and <code>\\D</code> for <code>[^0-9]</code> </li>\n  <li> <code>\\w</code> for <code>[A-Za-z0-9_]</code> and <code>\\W</code> for <code>[^A-Za-z0-9_]</code> </li>\n  <li> <code>.</code> for character classes matching everything (e.g. <code>[\\w\\W]</code>, <code>[\\d\\D]</code>, or <code>[\\s\\S]</code> with\n  <code>s</code> flag) </li>\n  <li> <code>x?</code> for <code>x{0,1}</code>, <code>x*</code> for <code>x{0,}</code>, <code>x+</code> for <code>x{1,}</code>, <code>x{N}</code> for\n  <code>x{N,N}</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/a{1,}/; // Noncompliant, '{1,}' quantifier is the same as '+'\n/[A-Za-z0-9_]/; // Noncompliant, '\\w' is equivalent\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/a+/;\n/\\w/;\n</pre>""}]",[]
AYj9QYL6j7aSGIl2btKg,nodejs-sonar-local,main,server/start.js,20,Refactor this code to not use nested template literals.,OPEN,joshua.quek.fullstack@gmail.com,2022-12-19T02:16:04+0000,2023-07-14T02:37:59+0000,javascript:S4624,[object Object],CODE_SMELL,MAJOR,10,"brain-overload,confusing",,,javascript:S4624,javascript,Template literals should not be nested,2023-02-21T15:21:22+0000,"<p>Template literals (previously named ""template strings"") are an elegant way to build a string without using the <code>+</code> operator to make\nstrings concatenation more readable.</p>\n<p>However, it’s possible to build complex string literals by nesting together multiple template literals, and therefore lose readability and\nmaintainability.</p>\n<p>In such situations, it’s preferable to move the nested template into a separate statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet color = ""red"";\nlet count = 3;\nlet message = `I have ${color ? `${count} ${color}` : count} apples`; // Noncompliant; nested template strings not easy to read\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet color = ""red"";\nlet count = 3;\nlet apples = color ? `${count} ${color}` : count;\nlet message = `I have ${apples} apples`;\n</pre>","<p>Template literals (previously named ""template strings"") are an elegant way to build a string without using the <code>+</code> operator to make\nstrings concatenation more readable.</p>\n<p>However, it’s possible to build complex string literals by nesting together multiple template literals, and therefore lose readability and\nmaintainability.</p>\n<p>In such situations, it’s preferable to move the nested template into a separate statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet color = ""red"";\nlet count = 3;\nlet message = `I have ${color ? `${count} ${color}` : count} apples`; // Noncompliant; nested template strings not easy to read\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet color = ""red"";\nlet count = 3;\nlet apples = color ? `${count} ${color}` : count;\nlet message = `I have ${apples} apples`;\n</pre>",MAJOR,READY,false,,"brain-overload,confusing",js,JavaScript,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>Template literals (previously named \""template strings\"") are an elegant way to build a string without using the <code>+</code> operator to make\nstrings concatenation more readable.</p>\n<p>However, it’s possible to build complex string literals by nesting together multiple template literals, and therefore lose readability and\nmaintainability.</p>\n<p>In such situations, it’s preferable to move the nested template into a separate statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet color = \""red\"";\nlet count = 3;\nlet message = `I have ${color ? `${count} ${color}` : count} apples`; // Noncompliant; nested template strings not easy to read\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet color = \""red\"";\nlet count = 3;\nlet apples = color ? `${count} ${color}` : count;\nlet message = `I have ${apples} apples`;\n</pre>""}]",[]
AYj9QYILj7aSGIl2btKV,nodejs-sonar-local,main,server/app/routes/authentication/postgres-user-pass/register-user/helpers/insert-new-database-user.js,14,Promise executor functions should not be async.,OPEN,joshua.quek.fullstack@gmail.com,2022-12-19T02:16:04+0000,2023-07-14T02:37:27+0000,javascript:S6544,[object Object],BUG,MAJOR,5,"async,promise",,,javascript:S6544,javascript,Promise executor functions should not be async,2023-04-24T05:12:44+0000,"<p>In JavaScript, a promise is a mechanism to perform tasks in an asynchronous way. To this end, the language provides the <code>Promise</code> object\nwhich represents the eventual completion or failure of an asynchronous operation and its resulting value. A promise can be created with the\n<code>Promise</code> constructor accepting an executor function as an argument, which has <code>resolve</code> and <code>reject</code> parameters that\nare invoked when the promises completes or fails.</p>\n<h2>Why is this an issue?</h2>\n<p>The executor function of a promise can also be an async function. However, this usually denotes a mistake:</p>\n<ul>\n  <li> If an async executor function throws an error, the error won’t cause the created Promise to reject and will be lost therefore. This could make\n  it difficult to debug and handle runtime errors. </li>\n  <li> If a Promise executor function is using <code>await</code>, this means that it’s not necessary to use the Promise constructor, or the scope of\n  the Promise constructor can be reduced. </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Fixing the issue requires removing the <code>async</code> keyword from the Promise executor function and adapting the body of the executor\naccordingly.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nconst p = new Promise(async (resolve, reject) =&gt; {\n  doSomething('Hey, there!', function(err, res) {\n    if (err) {\n      reject(err);\n      return;\n    }\n    await saveResult(res)\n    resolve(res);\n  });\n});\nawait p;\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nconst p = new Promise(async (resolve, reject) =&gt; {\n  doSomething('Hey, there!', function(err, res) {\n    if (err) {\n      reject(err);\n      return;\n    }\n    resolve(res);\n  });\n});\nconst res = await p;\nawait saveResult(res);\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"">MDN Promise</a> </li>\n  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises"">MDN Using promises</a> </li>\n  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function"">MDN Async function</a> </li>\n</ul>","<p>In JavaScript, a promise is a mechanism to perform tasks in an asynchronous way. To this end, the language provides the <code>Promise</code> object\nwhich represents the eventual completion or failure of an asynchronous operation and its resulting value. A promise can be created with the\n<code>Promise</code> constructor accepting an executor function as an argument, which has <code>resolve</code> and <code>reject</code> parameters that\nare invoked when the promises completes or fails.</p>\n<h2>Why is this an issue?</h2>\n<p>The executor function of a promise can also be an async function. However, this usually denotes a mistake:</p>\n<ul>\n  <li> If an async executor function throws an error, the error won’t cause the created Promise to reject and will be lost therefore. This could make\n  it difficult to debug and handle runtime errors. </li>\n  <li> If a Promise executor function is using <code>await</code>, this means that it’s not necessary to use the Promise constructor, or the scope of\n  the Promise constructor can be reduced. </li>\n</ul>\n<h2>How to fix it</h2>\n<p>Fixing the issue requires removing the <code>async</code> keyword from the Promise executor function and adapting the body of the executor\naccordingly.</p>\n<h3>Code examples</h3>\n<h4>Noncompliant code example</h4>\n<pre>\nconst p = new Promise(async (resolve, reject) =&gt; {\n  doSomething('Hey, there!', function(err, res) {\n    if (err) {\n      reject(err);\n      return;\n    }\n    await saveResult(res)\n    resolve(res);\n  });\n});\nawait p;\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nconst p = new Promise(async (resolve, reject) =&gt; {\n  doSomething('Hey, there!', function(err, res) {\n    if (err) {\n      reject(err);\n      return;\n    }\n    resolve(res);\n  });\n});\nconst res = await p;\nawait saveResult(res);\n</pre>\n<h2>Resources</h2>\n<h3>Documentation</h3>\n<ul>\n  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"">MDN Promise</a> </li>\n  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises"">MDN Using promises</a> </li>\n  <li> <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function"">MDN Async function</a> </li>\n</ul>",MAJOR,READY,false,,"async,promise",js,JavaScript,[],BUG,false,ALL,false,"[{""key"":""how_to_fix"",""content"":""<p>Fixing the issue requires removing the <code>async</code> keyword from the Promise executor function and adapting the body of the executor\naccordingly.</p>\n\n<h4>Noncompliant code example</h4>\n<pre>\nconst p = new Promise(async (resolve, reject) =&gt; {\n  doSomething('Hey, there!', function(err, res) {\n    if (err) {\n      reject(err);\n      return;\n    }\n    await saveResult(res)\n    resolve(res);\n  });\n});\n\nawait p;\n</pre>\n<h4>Compliant solution</h4>\n<pre>\nconst p = new Promise(async (resolve, reject) =&gt; {\n  doSomething('Hey, there!', function(err, res) {\n    if (err) {\n      reject(err);\n      return;\n    }\n    resolve(res);\n  });\n});\n\nconst res = await p;\nawait saveResult(res);\n</pre>""},{""key"":""introduction"",""content"":""<p>In JavaScript, a promise is a mechanism to perform tasks in an asynchronous way. To this end, the language provides the <code>Promise</code> object\nwhich represents the eventual completion or failure of an asynchronous operation and its resulting value. A promise can be created with the\n<code>Promise</code> constructor accepting an executor function as an argument, which has <code>resolve</code> and <code>reject</code> parameters that\nare invoked when the promises completes or fails.</p>""},{""key"":""root_cause"",""content"":""<p>The executor function of a promise can also be an async function. However, this usually denotes a mistake:</p>\n<ul>\n  <li> If an async executor function throws an error, the error won’t cause the created Promise to reject and will be lost therefore. This could make\n  it difficult to debug and handle runtime errors. </li>\n  <li> If a Promise executor function is using <code>await</code>, this means that it’s not necessary to use the Promise constructor, or the scope of\n  the Promise constructor can be reduced. </li>\n</ul>""},{""key"":""resources"",""content"":""<h3>Documentation</h3>\n<ul>\n  <li> <a href=\""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"">MDN Promise</a> </li>\n  <li> <a href=\""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises\"">MDN Using promises</a> </li>\n  <li> <a href=\""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\"">MDN Async function</a> </li>\n</ul>""}]",[]
AYj9QYLYj7aSGIl2btKd,nodejs-sonar-local,main,server/libs/utils/passport-util/index.js,8,Remove this commented out code.,OPEN,joshua.quek.fullstack@gmail.com,2023-02-09T22:13:19+0000,2023-07-14T02:36:49+0000,javascript:S125,[object Object],CODE_SMELL,MAJOR,5,unused,,,javascript:S125,javascript,Sections of code should not be commented out,2023-02-21T15:21:22+0000,<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>,<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>,MAJOR,READY,false,,unused,js,JavaScript,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>""}]",[]
AYj9QYLYj7aSGIl2btKc,nodejs-sonar-local,main,server/libs/utils/passport-util/index.js,3,Remove this commented out code.,OPEN,joshua.quek.fullstack@gmail.com,2023-02-09T22:13:19+0000,2023-07-14T02:36:43+0000,javascript:S125,[object Object],CODE_SMELL,MAJOR,5,unused,,,javascript:S125,javascript,Sections of code should not be commented out,2023-02-21T15:21:22+0000,<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>,<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>,MAJOR,READY,false,,unused,js,JavaScript,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>""}]",[]
AYbJfbsVdKFpeXIWkUWf,typescript-nodejs-sonar-local,main,src/logger/logger-noop.service.ts,8,Unexpected empty method 'debug'.,OPEN,joshua.quek.fullstack@gmail.com,2023-03-10T02:51:49+0000,2023-06-15T06:49:56+0000,typescript:S1186,[object Object],CODE_SMELL,CRITICAL,5,suspicious,,,typescript:S1186,typescript,Functions should not be empty,2023-02-21T15:21:29+0000,"<p>There are several reasons for a function not to have a function body:</p>\n<ul>\n  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>\n  <li> It is not yet, or never will be, supported. In this case an exception should be thrown in languages where that mechanism is available. </li>\n  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n}\nvar foo = () =&gt; {};\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo() {\n    // This is intentional\n}\nvar foo = () =&gt; {\n    do_something();\n};\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> This rule does not apply to function expressions and arrow functions as they can denote default values. </li>\n</ul>\n<pre>\nstatic defaultProps = {\n  listStyle: () =&gt; {}\n};\n</pre>\n<ul>\n  <li> The rule allows for empty functions with a name starting with the prefix <code>on</code> like <code>onClick</code>. </li>\n</ul>\n<pre>\nfunction onClick() {\n}\n</pre>","<p>There are several reasons for a function not to have a function body:</p>\n<ul>\n  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>\n  <li> It is not yet, or never will be, supported. In this case an exception should be thrown in languages where that mechanism is available. </li>\n  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n}\nvar foo = () =&gt; {};\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo() {\n    // This is intentional\n}\nvar foo = () =&gt; {\n    do_something();\n};\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> This rule does not apply to function expressions and arrow functions as they can denote default values. </li>\n</ul>\n<pre>\nstatic defaultProps = {\n  listStyle: () =&gt; {}\n};\n</pre>\n<ul>\n  <li> The rule allows for empty functions with a name starting with the prefix <code>on</code> like <code>onClick</code>. </li>\n</ul>\n<pre>\nfunction onClick() {\n}\n</pre>",CRITICAL,READY,false,,suspicious,ts,TypeScript,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>There are several reasons for a function not to have a function body:</p>\n<ul>\n  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>\n  <li> It is not yet, or never will be, supported. In this case an exception should be thrown in languages where that mechanism is available. </li>\n  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n}\n\nvar foo = () =&gt; {};\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo() {\n    // This is intentional\n}\n\nvar foo = () =&gt; {\n    do_something();\n};\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> This rule does not apply to function expressions and arrow functions as they can denote default values. </li>\n</ul>\n<pre>\nstatic defaultProps = {\n  listStyle: () =&gt; {}\n};\n</pre>\n<ul>\n  <li> The rule allows for empty functions with a name starting with the prefix <code>on</code> like <code>onClick</code>. </li>\n</ul>\n<pre>\nfunction onClick() {\n}\n</pre>""}]",[]
AYbJfbsVdKFpeXIWkUWg,typescript-nodejs-sonar-local,main,src/logger/logger-noop.service.ts,9,Unexpected empty method 'fatal'.,OPEN,joshua.quek.fullstack@gmail.com,2023-03-10T02:51:49+0000,2023-06-15T06:50:04+0000,typescript:S1186,[object Object],CODE_SMELL,CRITICAL,5,suspicious,,,typescript:S1186,typescript,Functions should not be empty,2023-02-21T15:21:29+0000,"<p>There are several reasons for a function not to have a function body:</p>\n<ul>\n  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>\n  <li> It is not yet, or never will be, supported. In this case an exception should be thrown in languages where that mechanism is available. </li>\n  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n}\nvar foo = () =&gt; {};\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo() {\n    // This is intentional\n}\nvar foo = () =&gt; {\n    do_something();\n};\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> This rule does not apply to function expressions and arrow functions as they can denote default values. </li>\n</ul>\n<pre>\nstatic defaultProps = {\n  listStyle: () =&gt; {}\n};\n</pre>\n<ul>\n  <li> The rule allows for empty functions with a name starting with the prefix <code>on</code> like <code>onClick</code>. </li>\n</ul>\n<pre>\nfunction onClick() {\n}\n</pre>","<p>There are several reasons for a function not to have a function body:</p>\n<ul>\n  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>\n  <li> It is not yet, or never will be, supported. In this case an exception should be thrown in languages where that mechanism is available. </li>\n  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n}\nvar foo = () =&gt; {};\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo() {\n    // This is intentional\n}\nvar foo = () =&gt; {\n    do_something();\n};\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> This rule does not apply to function expressions and arrow functions as they can denote default values. </li>\n</ul>\n<pre>\nstatic defaultProps = {\n  listStyle: () =&gt; {}\n};\n</pre>\n<ul>\n  <li> The rule allows for empty functions with a name starting with the prefix <code>on</code> like <code>onClick</code>. </li>\n</ul>\n<pre>\nfunction onClick() {\n}\n</pre>",CRITICAL,READY,false,,suspicious,ts,TypeScript,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>There are several reasons for a function not to have a function body:</p>\n<ul>\n  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>\n  <li> It is not yet, or never will be, supported. In this case an exception should be thrown in languages where that mechanism is available. </li>\n  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n}\n\nvar foo = () =&gt; {};\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo() {\n    // This is intentional\n}\n\nvar foo = () =&gt; {\n    do_something();\n};\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> This rule does not apply to function expressions and arrow functions as they can denote default values. </li>\n</ul>\n<pre>\nstatic defaultProps = {\n  listStyle: () =&gt; {}\n};\n</pre>\n<ul>\n  <li> The rule allows for empty functions with a name starting with the prefix <code>on</code> like <code>onClick</code>. </li>\n</ul>\n<pre>\nfunction onClick() {\n}\n</pre>""}]",[]
AYbJfbsVdKFpeXIWkUWh,typescript-nodejs-sonar-local,main,src/logger/logger-noop.service.ts,10,Unexpected empty method 'warn'.,OPEN,joshua.quek.fullstack@gmail.com,2023-03-10T02:51:49+0000,2023-06-15T06:50:11+0000,typescript:S1186,[object Object],CODE_SMELL,CRITICAL,5,suspicious,,,typescript:S1186,typescript,Functions should not be empty,2023-02-21T15:21:29+0000,"<p>There are several reasons for a function not to have a function body:</p>\n<ul>\n  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>\n  <li> It is not yet, or never will be, supported. In this case an exception should be thrown in languages where that mechanism is available. </li>\n  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n}\nvar foo = () =&gt; {};\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo() {\n    // This is intentional\n}\nvar foo = () =&gt; {\n    do_something();\n};\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> This rule does not apply to function expressions and arrow functions as they can denote default values. </li>\n</ul>\n<pre>\nstatic defaultProps = {\n  listStyle: () =&gt; {}\n};\n</pre>\n<ul>\n  <li> The rule allows for empty functions with a name starting with the prefix <code>on</code> like <code>onClick</code>. </li>\n</ul>\n<pre>\nfunction onClick() {\n}\n</pre>","<p>There are several reasons for a function not to have a function body:</p>\n<ul>\n  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>\n  <li> It is not yet, or never will be, supported. In this case an exception should be thrown in languages where that mechanism is available. </li>\n  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n}\nvar foo = () =&gt; {};\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo() {\n    // This is intentional\n}\nvar foo = () =&gt; {\n    do_something();\n};\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> This rule does not apply to function expressions and arrow functions as they can denote default values. </li>\n</ul>\n<pre>\nstatic defaultProps = {\n  listStyle: () =&gt; {}\n};\n</pre>\n<ul>\n  <li> The rule allows for empty functions with a name starting with the prefix <code>on</code> like <code>onClick</code>. </li>\n</ul>\n<pre>\nfunction onClick() {\n}\n</pre>",CRITICAL,READY,false,,suspicious,ts,TypeScript,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>There are several reasons for a function not to have a function body:</p>\n<ul>\n  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>\n  <li> It is not yet, or never will be, supported. In this case an exception should be thrown in languages where that mechanism is available. </li>\n  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n}\n\nvar foo = () =&gt; {};\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo() {\n    // This is intentional\n}\n\nvar foo = () =&gt; {\n    do_something();\n};\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> This rule does not apply to function expressions and arrow functions as they can denote default values. </li>\n</ul>\n<pre>\nstatic defaultProps = {\n  listStyle: () =&gt; {}\n};\n</pre>\n<ul>\n  <li> The rule allows for empty functions with a name starting with the prefix <code>on</code> like <code>onClick</code>. </li>\n</ul>\n<pre>\nfunction onClick() {\n}\n</pre>""}]",[]
AYbJfbsVdKFpeXIWkUWi,typescript-nodejs-sonar-local,main,src/logger/logger-noop.service.ts,11,Unexpected empty method 'error'.,OPEN,joshua.quek.fullstack@gmail.com,2023-03-10T02:51:49+0000,2023-06-15T06:50:22+0000,typescript:S1186,[object Object],CODE_SMELL,CRITICAL,5,suspicious,,,typescript:S1186,typescript,Functions should not be empty,2023-02-21T15:21:29+0000,"<p>There are several reasons for a function not to have a function body:</p>\n<ul>\n  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>\n  <li> It is not yet, or never will be, supported. In this case an exception should be thrown in languages where that mechanism is available. </li>\n  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n}\nvar foo = () =&gt; {};\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo() {\n    // This is intentional\n}\nvar foo = () =&gt; {\n    do_something();\n};\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> This rule does not apply to function expressions and arrow functions as they can denote default values. </li>\n</ul>\n<pre>\nstatic defaultProps = {\n  listStyle: () =&gt; {}\n};\n</pre>\n<ul>\n  <li> The rule allows for empty functions with a name starting with the prefix <code>on</code> like <code>onClick</code>. </li>\n</ul>\n<pre>\nfunction onClick() {\n}\n</pre>","<p>There are several reasons for a function not to have a function body:</p>\n<ul>\n  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>\n  <li> It is not yet, or never will be, supported. In this case an exception should be thrown in languages where that mechanism is available. </li>\n  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n}\nvar foo = () =&gt; {};\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo() {\n    // This is intentional\n}\nvar foo = () =&gt; {\n    do_something();\n};\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> This rule does not apply to function expressions and arrow functions as they can denote default values. </li>\n</ul>\n<pre>\nstatic defaultProps = {\n  listStyle: () =&gt; {}\n};\n</pre>\n<ul>\n  <li> The rule allows for empty functions with a name starting with the prefix <code>on</code> like <code>onClick</code>. </li>\n</ul>\n<pre>\nfunction onClick() {\n}\n</pre>",CRITICAL,READY,false,,suspicious,ts,TypeScript,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>There are several reasons for a function not to have a function body:</p>\n<ul>\n  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>\n  <li> It is not yet, or never will be, supported. In this case an exception should be thrown in languages where that mechanism is available. </li>\n  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n}\n\nvar foo = () =&gt; {};\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo() {\n    // This is intentional\n}\n\nvar foo = () =&gt; {\n    do_something();\n};\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> This rule does not apply to function expressions and arrow functions as they can denote default values. </li>\n</ul>\n<pre>\nstatic defaultProps = {\n  listStyle: () =&gt; {}\n};\n</pre>\n<ul>\n  <li> The rule allows for empty functions with a name starting with the prefix <code>on</code> like <code>onClick</code>. </li>\n</ul>\n<pre>\nfunction onClick() {\n}\n</pre>""}]",[]
AYbJfbsVdKFpeXIWkUWj,typescript-nodejs-sonar-local,main,src/logger/logger-noop.service.ts,12,Unexpected empty method 'trace'.,OPEN,joshua.quek.fullstack@gmail.com,2023-03-10T02:51:49+0000,2023-06-15T06:50:31+0000,typescript:S1186,[object Object],CODE_SMELL,CRITICAL,5,suspicious,,,typescript:S1186,typescript,Functions should not be empty,2023-02-21T15:21:29+0000,"<p>There are several reasons for a function not to have a function body:</p>\n<ul>\n  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>\n  <li> It is not yet, or never will be, supported. In this case an exception should be thrown in languages where that mechanism is available. </li>\n  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n}\nvar foo = () =&gt; {};\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo() {\n    // This is intentional\n}\nvar foo = () =&gt; {\n    do_something();\n};\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> This rule does not apply to function expressions and arrow functions as they can denote default values. </li>\n</ul>\n<pre>\nstatic defaultProps = {\n  listStyle: () =&gt; {}\n};\n</pre>\n<ul>\n  <li> The rule allows for empty functions with a name starting with the prefix <code>on</code> like <code>onClick</code>. </li>\n</ul>\n<pre>\nfunction onClick() {\n}\n</pre>","<p>There are several reasons for a function not to have a function body:</p>\n<ul>\n  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>\n  <li> It is not yet, or never will be, supported. In this case an exception should be thrown in languages where that mechanism is available. </li>\n  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n}\nvar foo = () =&gt; {};\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo() {\n    // This is intentional\n}\nvar foo = () =&gt; {\n    do_something();\n};\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> This rule does not apply to function expressions and arrow functions as they can denote default values. </li>\n</ul>\n<pre>\nstatic defaultProps = {\n  listStyle: () =&gt; {}\n};\n</pre>\n<ul>\n  <li> The rule allows for empty functions with a name starting with the prefix <code>on</code> like <code>onClick</code>. </li>\n</ul>\n<pre>\nfunction onClick() {\n}\n</pre>",CRITICAL,READY,false,,suspicious,ts,TypeScript,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>There are several reasons for a function not to have a function body:</p>\n<ul>\n  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>\n  <li> It is not yet, or never will be, supported. In this case an exception should be thrown in languages where that mechanism is available. </li>\n  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n}\n\nvar foo = () =&gt; {};\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo() {\n    // This is intentional\n}\n\nvar foo = () =&gt; {\n    do_something();\n};\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> This rule does not apply to function expressions and arrow functions as they can denote default values. </li>\n</ul>\n<pre>\nstatic defaultProps = {\n  listStyle: () =&gt; {}\n};\n</pre>\n<ul>\n  <li> The rule allows for empty functions with a name starting with the prefix <code>on</code> like <code>onClick</code>. </li>\n</ul>\n<pre>\nfunction onClick() {\n}\n</pre>""}]",[]
AYbJfbsVdKFpeXIWkUWk,typescript-nodejs-sonar-local,main,src/logger/logger-noop.service.ts,18,Unexpected empty method 'apply'.,OPEN,joshua.quek.fullstack@gmail.com,2023-03-10T02:51:49+0000,2023-06-15T06:50:40+0000,typescript:S1186,[object Object],CODE_SMELL,CRITICAL,5,suspicious,,,typescript:S1186,typescript,Functions should not be empty,2023-02-21T15:21:29+0000,"<p>There are several reasons for a function not to have a function body:</p>\n<ul>\n  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>\n  <li> It is not yet, or never will be, supported. In this case an exception should be thrown in languages where that mechanism is available. </li>\n  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n}\nvar foo = () =&gt; {};\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo() {\n    // This is intentional\n}\nvar foo = () =&gt; {\n    do_something();\n};\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> This rule does not apply to function expressions and arrow functions as they can denote default values. </li>\n</ul>\n<pre>\nstatic defaultProps = {\n  listStyle: () =&gt; {}\n};\n</pre>\n<ul>\n  <li> The rule allows for empty functions with a name starting with the prefix <code>on</code> like <code>onClick</code>. </li>\n</ul>\n<pre>\nfunction onClick() {\n}\n</pre>","<p>There are several reasons for a function not to have a function body:</p>\n<ul>\n  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>\n  <li> It is not yet, or never will be, supported. In this case an exception should be thrown in languages where that mechanism is available. </li>\n  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n}\nvar foo = () =&gt; {};\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo() {\n    // This is intentional\n}\nvar foo = () =&gt; {\n    do_something();\n};\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> This rule does not apply to function expressions and arrow functions as they can denote default values. </li>\n</ul>\n<pre>\nstatic defaultProps = {\n  listStyle: () =&gt; {}\n};\n</pre>\n<ul>\n  <li> The rule allows for empty functions with a name starting with the prefix <code>on</code> like <code>onClick</code>. </li>\n</ul>\n<pre>\nfunction onClick() {\n}\n</pre>",CRITICAL,READY,false,,suspicious,ts,TypeScript,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>There are several reasons for a function not to have a function body:</p>\n<ul>\n  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>\n  <li> It is not yet, or never will be, supported. In this case an exception should be thrown in languages where that mechanism is available. </li>\n  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n}\n\nvar foo = () =&gt; {};\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo() {\n    // This is intentional\n}\n\nvar foo = () =&gt; {\n    do_something();\n};\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> This rule does not apply to function expressions and arrow functions as they can denote default values. </li>\n</ul>\n<pre>\nstatic defaultProps = {\n  listStyle: () =&gt; {}\n};\n</pre>\n<ul>\n  <li> The rule allows for empty functions with a name starting with the prefix <code>on</code> like <code>onClick</code>. </li>\n</ul>\n<pre>\nfunction onClick() {\n}\n</pre>""}]",[]
AYbJfbsOdKFpeXIWkUWc,typescript-nodejs-sonar-local,main,src/logger/logger-pino.service.ts,38,Update this function so that its implementation is not identical to the one on line 22.,OPEN,joshua.quek.fullstack@gmail.com,2023-03-10T02:51:49+0000,2023-06-15T06:51:00+0000,typescript:S4144,[object Object],CODE_SMELL,MAJOR,15,"confusing,duplicate,suspicious",,,typescript:S4144,typescript,Functions should not have identical implementations,2023-02-21T15:21:29+0000,"<p>When two functions have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but\nmay be confusing to maintainers. In the latter case, the code should be refactored.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction calculateCode() {\n  doTheThing();\n  doOtherThing();\n  return code;\n}\nfunction getName() {  // Noncompliant\n  doTheThing();\n  doOtherThing();\n  return code;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction calculateCode() {\n  doTheThing();\n  doOtherThing();\n  return code;\n}\nfunction getName() {\n  return calculateCode();\n}\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> Functions with fewer than 3 lines are ignored. </li>\n  <li> This rule does not apply to function expressions and arrow functions because they don’t have explicit names and are often used in a way where\n  refactoring is not applicable. </li>\n</ul>\n<pre>\nlist.map((item) =&gt; ({\n  name: item.name,\n  address: item.address,\n  country: item.country\n}));\n</pre>","<p>When two functions have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but\nmay be confusing to maintainers. In the latter case, the code should be refactored.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction calculateCode() {\n  doTheThing();\n  doOtherThing();\n  return code;\n}\nfunction getName() {  // Noncompliant\n  doTheThing();\n  doOtherThing();\n  return code;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction calculateCode() {\n  doTheThing();\n  doOtherThing();\n  return code;\n}\nfunction getName() {\n  return calculateCode();\n}\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> Functions with fewer than 3 lines are ignored. </li>\n  <li> This rule does not apply to function expressions and arrow functions because they don’t have explicit names and are often used in a way where\n  refactoring is not applicable. </li>\n</ul>\n<pre>\nlist.map((item) =&gt; ({\n  name: item.name,\n  address: item.address,\n  country: item.country\n}));\n</pre>",MAJOR,READY,false,,"confusing,duplicate,suspicious",ts,TypeScript,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>When two functions have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but\nmay be confusing to maintainers. In the latter case, the code should be refactored.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction calculateCode() {\n  doTheThing();\n  doOtherThing();\n  return code;\n}\n\nfunction getName() {  // Noncompliant\n  doTheThing();\n  doOtherThing();\n  return code;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction calculateCode() {\n  doTheThing();\n  doOtherThing();\n  return code;\n}\n\nfunction getName() {\n  return calculateCode();\n}\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> Functions with fewer than 3 lines are ignored. </li>\n  <li> This rule does not apply to function expressions and arrow functions because they don’t have explicit names and are often used in a way where\n  refactoring is not applicable. </li>\n</ul>\n<pre>\nlist.map((item) =&gt; ({\n  name: item.name,\n  address: item.address,\n  country: item.country\n}));\n</pre>""}]",[]
AYbJfbrtdKFpeXIWkUWb,typescript-nodejs-sonar-local,main,src/tracer/jaeger-tracer.factory.ts,3,Remove this unused import of 'Tracer'.,OPEN,joshua.quek.fullstack@gmail.com,2023-03-10T02:51:49+0000,2023-06-15T06:51:14+0000,typescript:S1128,[object Object],CODE_SMELL,MINOR,2,"es2015,unused",,,typescript:S1128,typescript,Unnecessary imports should be removed,2023-02-21T15:21:29+0000,"<p>There’s no reason to import modules you don’t use; and every reason not to: doing so needlessly increases the load.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport A from 'a';      // Noncompliant, A isn't used\nimport { B1 } from 'b';\nconsole.log(B1);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport { B1 } from 'b';\nconsole.log(B1);\n</pre>","<p>There’s no reason to import modules you don’t use; and every reason not to: doing so needlessly increases the load.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport A from 'a';      // Noncompliant, A isn't used\nimport { B1 } from 'b';\nconsole.log(B1);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport { B1 } from 'b';\nconsole.log(B1);\n</pre>",MINOR,READY,false,,"es2015,unused",ts,TypeScript,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>There’s no reason to import modules you don’t use; and every reason not to: doing so needlessly increases the load.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport A from 'a';      // Noncompliant, A isn't used\nimport { B1 } from 'b';\n\nconsole.log(B1);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport { B1 } from 'b';\n\nconsole.log(B1);\n</pre>""}]",[]
AYbJfbqKdKFpeXIWkUWW,typescript-nodejs-sonar-local,main,src/util/opentracing/express-middleware.ts,41,'parse' is deprecated. since v11.0.0 - Use the WHATWG URL API.,OPEN,joshua.quek.fullstack@gmail.com,2023-03-10T02:51:49+0000,2023-06-15T06:51:34+0000,typescript:S1874,[object Object],CODE_SMELL,MINOR,15,"cwe,obsolete",,,typescript:S1874,typescript,Deprecated APIs should not be used,2023-02-21T15:21:29+0000,"<p>Once deprecated, classes, and interfaces, and their members should be avoided, rather than used, inherited or extended. Deprecation is a warning\nthat the class or interface has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth transition away\nfrom the aging, soon-to-be-retired technology.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nexport interface LanguageService {\n  /**\n  * @deprecated Use getEncodedSyntacticClassifications instead.\n  */\n  getSyntacticClassifications(fileName: string, span: TextSpan): ClassifiedSpan[];\n}\nconst syntacticClassifications = getLanguageService().getSyntacticClassifications(file, span); // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/477"">MITRE, CWE-477</a> - Use of Obsolete Functions </li>\n</ul>","<p>Once deprecated, classes, and interfaces, and their members should be avoided, rather than used, inherited or extended. Deprecation is a warning\nthat the class or interface has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth transition away\nfrom the aging, soon-to-be-retired technology.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nexport interface LanguageService {\n  /**\n  * @deprecated Use getEncodedSyntacticClassifications instead.\n  */\n  getSyntacticClassifications(fileName: string, span: TextSpan): ClassifiedSpan[];\n}\nconst syntacticClassifications = getLanguageService().getSyntacticClassifications(file, span); // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/477"">MITRE, CWE-477</a> - Use of Obsolete Functions </li>\n</ul>",MINOR,READY,false,,"cwe,obsolete",ts,TypeScript,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>Once deprecated, classes, and interfaces, and their members should be avoided, rather than used, inherited or extended. Deprecation is a warning\nthat the class or interface has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth transition away\nfrom the aging, soon-to-be-retired technology.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nexport interface LanguageService {\n  /**\n  * @deprecated Use getEncodedSyntacticClassifications instead.\n  */\n  getSyntacticClassifications(fileName: string, span: TextSpan): ClassifiedSpan[];\n}\n\nconst syntacticClassifications = getLanguageService().getSyntacticClassifications(file, span); // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\""https://cwe.mitre.org/data/definitions/477\"">MITRE, CWE-477</a> - Use of Obsolete Functions </li>\n</ul>""}]",[]
AYbJfbqKdKFpeXIWkUWX,typescript-nodejs-sonar-local,main,src/util/opentracing/express-middleware.ts,76,Remove this commented out code.,OPEN,joshua.quek.fullstack@gmail.com,2023-03-10T02:51:49+0000,2023-06-15T06:51:53+0000,typescript:S125,[object Object],CODE_SMELL,MAJOR,5,unused,,,typescript:S125,typescript,Sections of code should not be commented out,2023-02-21T15:21:29+0000,<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>,<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>,MAJOR,READY,false,,unused,ts,TypeScript,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>""}]",[]
AYbJfbrSdKFpeXIWkUWY,typescript-nodejs-sonar-local,main,src/workers/simple.worker.ts,1,Remove this unused import of 'Singleton'.,OPEN,joshua.quek.fullstack@gmail.com,2023-03-10T02:51:49+0000,2023-06-15T06:52:12+0000,typescript:S1128,[object Object],CODE_SMELL,MINOR,2,"es2015,unused",,,typescript:S1128,typescript,Unnecessary imports should be removed,2023-02-21T15:21:29+0000,"<p>There’s no reason to import modules you don’t use; and every reason not to: doing so needlessly increases the load.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport A from 'a';      // Noncompliant, A isn't used\nimport { B1 } from 'b';\nconsole.log(B1);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport { B1 } from 'b';\nconsole.log(B1);\n</pre>","<p>There’s no reason to import modules you don’t use; and every reason not to: doing so needlessly increases the load.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport A from 'a';      // Noncompliant, A isn't used\nimport { B1 } from 'b';\nconsole.log(B1);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport { B1 } from 'b';\nconsole.log(B1);\n</pre>",MINOR,READY,false,,"es2015,unused",ts,TypeScript,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>There’s no reason to import modules you don’t use; and every reason not to: doing so needlessly increases the load.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport A from 'a';      // Noncompliant, A isn't used\nimport { B1 } from 'b';\n\nconsole.log(B1);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport { B1 } from 'b';\n\nconsole.log(B1);\n</pre>""}]",[]
AYbJfbrYdKFpeXIWkUWZ,typescript-nodejs-sonar-local,main,src/workers/worker-manager.ts,39,'toPromise' is deprecated. Replaced with  {@link  firstValueFrom  }  and  {@link  lastValueFrom  } . Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise,OPEN,joshua.quek.fullstack@gmail.com,2023-03-10T02:51:49+0000,2023-06-15T06:52:31+0000,typescript:S1874,[object Object],CODE_SMELL,MINOR,15,"cwe,obsolete",,,typescript:S1874,typescript,Deprecated APIs should not be used,2023-02-21T15:21:29+0000,"<p>Once deprecated, classes, and interfaces, and their members should be avoided, rather than used, inherited or extended. Deprecation is a warning\nthat the class or interface has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth transition away\nfrom the aging, soon-to-be-retired technology.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nexport interface LanguageService {\n  /**\n  * @deprecated Use getEncodedSyntacticClassifications instead.\n  */\n  getSyntacticClassifications(fileName: string, span: TextSpan): ClassifiedSpan[];\n}\nconst syntacticClassifications = getLanguageService().getSyntacticClassifications(file, span); // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/477"">MITRE, CWE-477</a> - Use of Obsolete Functions </li>\n</ul>","<p>Once deprecated, classes, and interfaces, and their members should be avoided, rather than used, inherited or extended. Deprecation is a warning\nthat the class or interface has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth transition away\nfrom the aging, soon-to-be-retired technology.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nexport interface LanguageService {\n  /**\n  * @deprecated Use getEncodedSyntacticClassifications instead.\n  */\n  getSyntacticClassifications(fileName: string, span: TextSpan): ClassifiedSpan[];\n}\nconst syntacticClassifications = getLanguageService().getSyntacticClassifications(file, span); // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/477"">MITRE, CWE-477</a> - Use of Obsolete Functions </li>\n</ul>",MINOR,READY,false,,"cwe,obsolete",ts,TypeScript,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>Once deprecated, classes, and interfaces, and their members should be avoided, rather than used, inherited or extended. Deprecation is a warning\nthat the class or interface has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth transition away\nfrom the aging, soon-to-be-retired technology.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nexport interface LanguageService {\n  /**\n  * @deprecated Use getEncodedSyntacticClassifications instead.\n  */\n  getSyntacticClassifications(fileName: string, span: TextSpan): ClassifiedSpan[];\n}\n\nconst syntacticClassifications = getLanguageService().getSyntacticClassifications(file, span); // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\""https://cwe.mitre.org/data/definitions/477\"">MITRE, CWE-477</a> - Use of Obsolete Functions </li>\n</ul>""}]",[]
AYbJfbrYdKFpeXIWkUWa,typescript-nodejs-sonar-local,main,src/workers/worker-manager.ts,46,'toPromise' is deprecated. Replaced with  {@link  firstValueFrom  }  and  {@link  lastValueFrom  } . Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise,OPEN,joshua.quek.fullstack@gmail.com,2023-03-10T02:51:49+0000,2023-06-15T06:52:44+0000,typescript:S1874,[object Object],CODE_SMELL,MINOR,15,"cwe,obsolete",,,typescript:S1874,typescript,Deprecated APIs should not be used,2023-02-21T15:21:29+0000,"<p>Once deprecated, classes, and interfaces, and their members should be avoided, rather than used, inherited or extended. Deprecation is a warning\nthat the class or interface has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth transition away\nfrom the aging, soon-to-be-retired technology.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nexport interface LanguageService {\n  /**\n  * @deprecated Use getEncodedSyntacticClassifications instead.\n  */\n  getSyntacticClassifications(fileName: string, span: TextSpan): ClassifiedSpan[];\n}\nconst syntacticClassifications = getLanguageService().getSyntacticClassifications(file, span); // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/477"">MITRE, CWE-477</a> - Use of Obsolete Functions </li>\n</ul>","<p>Once deprecated, classes, and interfaces, and their members should be avoided, rather than used, inherited or extended. Deprecation is a warning\nthat the class or interface has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth transition away\nfrom the aging, soon-to-be-retired technology.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nexport interface LanguageService {\n  /**\n  * @deprecated Use getEncodedSyntacticClassifications instead.\n  */\n  getSyntacticClassifications(fileName: string, span: TextSpan): ClassifiedSpan[];\n}\nconst syntacticClassifications = getLanguageService().getSyntacticClassifications(file, span); // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=""https://cwe.mitre.org/data/definitions/477"">MITRE, CWE-477</a> - Use of Obsolete Functions </li>\n</ul>",MINOR,READY,false,,"cwe,obsolete",ts,TypeScript,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>Once deprecated, classes, and interfaces, and their members should be avoided, rather than used, inherited or extended. Deprecation is a warning\nthat the class or interface has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth transition away\nfrom the aging, soon-to-be-retired technology.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nexport interface LanguageService {\n  /**\n  * @deprecated Use getEncodedSyntacticClassifications instead.\n  */\n  getSyntacticClassifications(fileName: string, span: TextSpan): ClassifiedSpan[];\n}\n\nconst syntacticClassifications = getLanguageService().getSyntacticClassifications(file, span); // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\""https://cwe.mitre.org/data/definitions/477\"">MITRE, CWE-477</a> - Use of Obsolete Functions </li>\n</ul>""}]",[]
AYbJfbsVdKFpeXIWkUWe,typescript-nodejs-sonar-local,main,src/logger/logger-noop.service.ts,7,Unexpected empty method 'info'.,OPEN,joshua.quek.fullstack@gmail.com,2023-03-10T02:51:49+0000,2023-06-16T14:54:48+0000,typescript:S1186,[object Object],CODE_SMELL,CRITICAL,5,suspicious,,,typescript:S1186,typescript,Functions should not be empty,2023-02-21T15:21:29+0000,"<p>There are several reasons for a function not to have a function body:</p>\n<ul>\n  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>\n  <li> It is not yet, or never will be, supported. In this case an exception should be thrown in languages where that mechanism is available. </li>\n  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n}\nvar foo = () =&gt; {};\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo() {\n    // This is intentional\n}\nvar foo = () =&gt; {\n    do_something();\n};\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> This rule does not apply to function expressions and arrow functions as they can denote default values. </li>\n</ul>\n<pre>\nstatic defaultProps = {\n  listStyle: () =&gt; {}\n};\n</pre>\n<ul>\n  <li> The rule allows for empty functions with a name starting with the prefix <code>on</code> like <code>onClick</code>. </li>\n</ul>\n<pre>\nfunction onClick() {\n}\n</pre>","<p>There are several reasons for a function not to have a function body:</p>\n<ul>\n  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>\n  <li> It is not yet, or never will be, supported. In this case an exception should be thrown in languages where that mechanism is available. </li>\n  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n}\nvar foo = () =&gt; {};\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo() {\n    // This is intentional\n}\nvar foo = () =&gt; {\n    do_something();\n};\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> This rule does not apply to function expressions and arrow functions as they can denote default values. </li>\n</ul>\n<pre>\nstatic defaultProps = {\n  listStyle: () =&gt; {}\n};\n</pre>\n<ul>\n  <li> The rule allows for empty functions with a name starting with the prefix <code>on</code> like <code>onClick</code>. </li>\n</ul>\n<pre>\nfunction onClick() {\n}\n</pre>",CRITICAL,READY,false,,suspicious,ts,TypeScript,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>There are several reasons for a function not to have a function body:</p>\n<ul>\n  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>\n  <li> It is not yet, or never will be, supported. In this case an exception should be thrown in languages where that mechanism is available. </li>\n  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n}\n\nvar foo = () =&gt; {};\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo() {\n    // This is intentional\n}\n\nvar foo = () =&gt; {\n    do_something();\n};\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> This rule does not apply to function expressions and arrow functions as they can denote default values. </li>\n</ul>\n<pre>\nstatic defaultProps = {\n  listStyle: () =&gt; {}\n};\n</pre>\n<ul>\n  <li> The rule allows for empty functions with a name starting with the prefix <code>on</code> like <code>onClick</code>. </li>\n</ul>\n<pre>\nfunction onClick() {\n}\n</pre>""}]",[]
AYbJfbsVdKFpeXIWkUWd,typescript-nodejs-sonar-local,main,src/logger/logger-noop.service.ts,6,Unexpected empty method 'log'.,OPEN,joshua.quek.fullstack@gmail.com,2023-03-10T02:51:49+0000,2023-06-19T07:43:28+0000,typescript:S1186,[object Object],CODE_SMELL,CRITICAL,5,suspicious,,,typescript:S1186,typescript,Functions should not be empty,2023-02-21T15:21:29+0000,"<p>There are several reasons for a function not to have a function body:</p>\n<ul>\n  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>\n  <li> It is not yet, or never will be, supported. In this case an exception should be thrown in languages where that mechanism is available. </li>\n  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n}\nvar foo = () =&gt; {};\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo() {\n    // This is intentional\n}\nvar foo = () =&gt; {\n    do_something();\n};\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> This rule does not apply to function expressions and arrow functions as they can denote default values. </li>\n</ul>\n<pre>\nstatic defaultProps = {\n  listStyle: () =&gt; {}\n};\n</pre>\n<ul>\n  <li> The rule allows for empty functions with a name starting with the prefix <code>on</code> like <code>onClick</code>. </li>\n</ul>\n<pre>\nfunction onClick() {\n}\n</pre>","<p>There are several reasons for a function not to have a function body:</p>\n<ul>\n  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>\n  <li> It is not yet, or never will be, supported. In this case an exception should be thrown in languages where that mechanism is available. </li>\n  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n}\nvar foo = () =&gt; {};\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo() {\n    // This is intentional\n}\nvar foo = () =&gt; {\n    do_something();\n};\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> This rule does not apply to function expressions and arrow functions as they can denote default values. </li>\n</ul>\n<pre>\nstatic defaultProps = {\n  listStyle: () =&gt; {}\n};\n</pre>\n<ul>\n  <li> The rule allows for empty functions with a name starting with the prefix <code>on</code> like <code>onClick</code>. </li>\n</ul>\n<pre>\nfunction onClick() {\n}\n</pre>",CRITICAL,READY,false,,suspicious,ts,TypeScript,[],CODE_SMELL,false,MAIN,false,"[{""key"":""default"",""content"":""<p>There are several reasons for a function not to have a function body:</p>\n<ul>\n  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>\n  <li> It is not yet, or never will be, supported. In this case an exception should be thrown in languages where that mechanism is available. </li>\n  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n}\n\nvar foo = () =&gt; {};\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo() {\n    // This is intentional\n}\n\nvar foo = () =&gt; {\n    do_something();\n};\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> This rule does not apply to function expressions and arrow functions as they can denote default values. </li>\n</ul>\n<pre>\nstatic defaultProps = {\n  listStyle: () =&gt; {}\n};\n</pre>\n<ul>\n  <li> The rule allows for empty functions with a name starting with the prefix <code>on</code> like <code>onClick</code>. </li>\n</ul>\n<pre>\nfunction onClick() {\n}\n</pre>""}]",[]
